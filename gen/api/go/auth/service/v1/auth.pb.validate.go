// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth/service/v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCaptchaReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCaptchaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCaptchaReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCaptchaReqMultiError, or
// nil if none found.
func (m *GetCaptchaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCaptchaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCaptchaReqMultiError(errors)
	}

	return nil
}

// GetCaptchaReqMultiError is an error wrapping multiple validation errors
// returned by GetCaptchaReq.ValidateAll() if the designated constraints
// aren't met.
type GetCaptchaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCaptchaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCaptchaReqMultiError) AllErrors() []error { return m }

// GetCaptchaReqValidationError is the validation error returned by
// GetCaptchaReq.Validate if the designated constraints aren't met.
type GetCaptchaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaReqValidationError) ErrorName() string { return "GetCaptchaReqValidationError" }

// Error satisfies the builtin error interface
func (e GetCaptchaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaReqValidationError{}

// Validate checks the field values on GetCaptchaResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCaptchaResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCaptchaResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCaptchaRespMultiError,
// or nil if none found.
func (m *GetCaptchaResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCaptchaResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for ImgBytes

	if len(errors) > 0 {
		return GetCaptchaRespMultiError(errors)
	}

	return nil
}

// GetCaptchaRespMultiError is an error wrapping multiple validation errors
// returned by GetCaptchaResp.ValidateAll() if the designated constraints
// aren't met.
type GetCaptchaRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCaptchaRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCaptchaRespMultiError) AllErrors() []error { return m }

// GetCaptchaRespValidationError is the validation error returned by
// GetCaptchaResp.Validate if the designated constraints aren't met.
type GetCaptchaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCaptchaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCaptchaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCaptchaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCaptchaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCaptchaRespValidationError) ErrorName() string { return "GetCaptchaRespValidationError" }

// Error satisfies the builtin error interface
func (e GetCaptchaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCaptchaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCaptchaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCaptchaRespValidationError{}

// Validate checks the field values on VerifyCaptchaReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyCaptchaReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCaptchaReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyCaptchaReqMultiError, or nil if none found.
func (m *VerifyCaptchaReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCaptchaReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CaptchaId

	// no validation rules for CaptchaCode

	if len(errors) > 0 {
		return VerifyCaptchaReqMultiError(errors)
	}

	return nil
}

// VerifyCaptchaReqMultiError is an error wrapping multiple validation errors
// returned by VerifyCaptchaReq.ValidateAll() if the designated constraints
// aren't met.
type VerifyCaptchaReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCaptchaReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCaptchaReqMultiError) AllErrors() []error { return m }

// VerifyCaptchaReqValidationError is the validation error returned by
// VerifyCaptchaReq.Validate if the designated constraints aren't met.
type VerifyCaptchaReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCaptchaReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCaptchaReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCaptchaReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCaptchaReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCaptchaReqValidationError) ErrorName() string { return "VerifyCaptchaReqValidationError" }

// Error satisfies the builtin error interface
func (e VerifyCaptchaReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCaptchaReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCaptchaReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCaptchaReqValidationError{}

// Validate checks the field values on VerifyCaptchaResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerifyCaptchaResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCaptchaResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyCaptchaRespMultiError, or nil if none found.
func (m *VerifyCaptchaResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCaptchaResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyCaptchaRespMultiError(errors)
	}

	return nil
}

// VerifyCaptchaRespMultiError is an error wrapping multiple validation errors
// returned by VerifyCaptchaResp.ValidateAll() if the designated constraints
// aren't met.
type VerifyCaptchaRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCaptchaRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCaptchaRespMultiError) AllErrors() []error { return m }

// VerifyCaptchaRespValidationError is the validation error returned by
// VerifyCaptchaResp.Validate if the designated constraints aren't met.
type VerifyCaptchaRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCaptchaRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCaptchaRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCaptchaRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCaptchaRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCaptchaRespValidationError) ErrorName() string {
	return "VerifyCaptchaRespValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyCaptchaRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCaptchaResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCaptchaRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCaptchaRespValidationError{}

// Validate checks the field values on AuthorizeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthorizeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthorizeReqMultiError, or
// nil if none found.
func (m *AuthorizeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for ResponseType

	// no validation rules for Scope

	// no validation rules for State

	// no validation rules for RedirectUri

	if len(errors) > 0 {
		return AuthorizeReqMultiError(errors)
	}

	return nil
}

// AuthorizeReqMultiError is an error wrapping multiple validation errors
// returned by AuthorizeReq.ValidateAll() if the designated constraints aren't met.
type AuthorizeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeReqMultiError) AllErrors() []error { return m }

// AuthorizeReqValidationError is the validation error returned by
// AuthorizeReq.Validate if the designated constraints aren't met.
type AuthorizeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeReqValidationError) ErrorName() string { return "AuthorizeReqValidationError" }

// Error satisfies the builtin error interface
func (e AuthorizeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeReqValidationError{}

// Validate checks the field values on AuthorizeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthorizeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthorizeResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthorizeRespMultiError, or
// nil if none found.
func (m *AuthorizeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthorizeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthorizeRespMultiError(errors)
	}

	return nil
}

// AuthorizeRespMultiError is an error wrapping multiple validation errors
// returned by AuthorizeResp.ValidateAll() if the designated constraints
// aren't met.
type AuthorizeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorizeRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorizeRespMultiError) AllErrors() []error { return m }

// AuthorizeRespValidationError is the validation error returned by
// AuthorizeResp.Validate if the designated constraints aren't met.
type AuthorizeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeRespValidationError) ErrorName() string { return "AuthorizeRespValidationError" }

// Error satisfies the builtin error interface
func (e AuthorizeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeRespValidationError{}

// Validate checks the field values on TokenReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenReqMultiError, or nil
// if none found.
func (m *TokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantType

	// no validation rules for Code

	// no validation rules for ClientId

	if len(errors) > 0 {
		return TokenReqMultiError(errors)
	}

	return nil
}

// TokenReqMultiError is an error wrapping multiple validation errors returned
// by TokenReq.ValidateAll() if the designated constraints aren't met.
type TokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenReqMultiError) AllErrors() []error { return m }

// TokenReqValidationError is the validation error returned by
// TokenReq.Validate if the designated constraints aren't met.
type TokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenReqValidationError) ErrorName() string { return "TokenReqValidationError" }

// Error satisfies the builtin error interface
func (e TokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenReqValidationError{}

// Validate checks the field values on TokenResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TokenRespMultiError, or nil
// if none found.
func (m *TokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	// no validation rules for RefreshToken

	// no validation rules for Scope

	// no validation rules for TokenType

	if len(errors) > 0 {
		return TokenRespMultiError(errors)
	}

	return nil
}

// TokenRespMultiError is an error wrapping multiple validation errors returned
// by TokenResp.ValidateAll() if the designated constraints aren't met.
type TokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenRespMultiError) AllErrors() []error { return m }

// TokenRespValidationError is the validation error returned by
// TokenResp.Validate if the designated constraints aren't met.
type TokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRespValidationError) ErrorName() string { return "TokenRespValidationError" }

// Error satisfies the builtin error interface
func (e TokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRespValidationError{}

// Validate checks the field values on VerifyReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyReqMultiError, or nil
// if none found.
func (m *VerifyReq) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifyReqMultiError(errors)
	}

	return nil
}

// VerifyReqMultiError is an error wrapping multiple validation errors returned
// by VerifyReq.ValidateAll() if the designated constraints aren't met.
type VerifyReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyReqMultiError) AllErrors() []error { return m }

// VerifyReqValidationError is the validation error returned by
// VerifyReq.Validate if the designated constraints aren't met.
type VerifyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyReqValidationError) ErrorName() string { return "VerifyReqValidationError" }

// Error satisfies the builtin error interface
func (e VerifyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyReqValidationError{}

// Validate checks the field values on VerifyResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VerifyResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VerifyRespMultiError, or
// nil if none found.
func (m *VerifyResp) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for Domain

	// no validation rules for ExpiresIn

	// no validation rules for Scope

	// no validation rules for UserId

	if len(errors) > 0 {
		return VerifyRespMultiError(errors)
	}

	return nil
}

// VerifyRespMultiError is an error wrapping multiple validation errors
// returned by VerifyResp.ValidateAll() if the designated constraints aren't met.
type VerifyRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyRespMultiError) AllErrors() []error { return m }

// VerifyRespValidationError is the validation error returned by
// VerifyResp.Validate if the designated constraints aren't met.
type VerifyRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyRespValidationError) ErrorName() string { return "VerifyRespValidationError" }

// Error satisfies the builtin error interface
func (e VerifyRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyRespValidationError{}

// Validate checks the field values on RefreshTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenReqMultiError, or nil if none found.
func (m *RefreshTokenReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GrantType

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return RefreshTokenReqMultiError(errors)
	}

	return nil
}

// RefreshTokenReqMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenReq.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenReqMultiError) AllErrors() []error { return m }

// RefreshTokenReqValidationError is the validation error returned by
// RefreshTokenReq.Validate if the designated constraints aren't met.
type RefreshTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenReqValidationError) ErrorName() string { return "RefreshTokenReqValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenReqValidationError{}

// Validate checks the field values on RefreshTokenResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RefreshTokenResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshTokenResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshTokenRespMultiError, or nil if none found.
func (m *RefreshTokenResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshTokenResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for ExpiresIn

	// no validation rules for RefreshToken

	// no validation rules for Scope

	// no validation rules for TokenType

	if len(errors) > 0 {
		return RefreshTokenRespMultiError(errors)
	}

	return nil
}

// RefreshTokenRespMultiError is an error wrapping multiple validation errors
// returned by RefreshTokenResp.ValidateAll() if the designated constraints
// aren't met.
type RefreshTokenRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshTokenRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshTokenRespMultiError) AllErrors() []error { return m }

// RefreshTokenRespValidationError is the validation error returned by
// RefreshTokenResp.Validate if the designated constraints aren't met.
type RefreshTokenRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshTokenRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshTokenRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshTokenRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshTokenRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshTokenRespValidationError) ErrorName() string { return "RefreshTokenRespValidationError" }

// Error satisfies the builtin error interface
func (e RefreshTokenRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshTokenResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshTokenRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshTokenRespValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutReqMultiError, or nil
// if none found.
func (m *LogoutReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RedirectUri

	if len(errors) > 0 {
		return LogoutReqMultiError(errors)
	}

	return nil
}

// LogoutReqMultiError is an error wrapping multiple validation errors returned
// by LogoutReq.ValidateAll() if the designated constraints aren't met.
type LogoutReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutReqMultiError) AllErrors() []error { return m }

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRespMultiError, or
// nil if none found.
func (m *LogoutResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRespMultiError(errors)
	}

	return nil
}

// LogoutRespMultiError is an error wrapping multiple validation errors
// returned by LogoutResp.ValidateAll() if the designated constraints aren't met.
type LogoutRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRespMultiError) AllErrors() []error { return m }

// LogoutRespValidationError is the validation error returned by
// LogoutResp.Validate if the designated constraints aren't met.
type LogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRespValidationError) ErrorName() string { return "LogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRespValidationError{}
