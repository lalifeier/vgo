// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             (unknown)
// source: auth/service/v1/auth.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAuthGetCaptcha = "/api.auth.service.v1.Auth/GetCaptcha"
const OperationAuthVerifyCaptcha = "/api.auth.service.v1.Auth/VerifyCaptcha"

type AuthHTTPServer interface {
	GetCaptcha(context.Context, *GetCaptchaReq) (*GetCaptchaResp, error)
	VerifyCaptcha(context.Context, *VerifyCaptchaReq) (*VerifyCaptchaResp, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.GET("/api/getCaptcha", _Auth_GetCaptcha0_HTTP_Handler(srv))
	r.POST("/api/verifyCaptcha", _Auth_VerifyCaptcha0_HTTP_Handler(srv))
}

func _Auth_GetCaptcha0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCaptchaReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthGetCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCaptcha(ctx, req.(*GetCaptchaReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCaptchaResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_VerifyCaptcha0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifyCaptchaReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAuthVerifyCaptcha)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifyCaptcha(ctx, req.(*VerifyCaptchaReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifyCaptchaResp)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	GetCaptcha(ctx context.Context, req *GetCaptchaReq, opts ...http.CallOption) (rsp *GetCaptchaResp, err error)
	VerifyCaptcha(ctx context.Context, req *VerifyCaptchaReq, opts ...http.CallOption) (rsp *VerifyCaptchaResp, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) GetCaptcha(ctx context.Context, in *GetCaptchaReq, opts ...http.CallOption) (*GetCaptchaResp, error) {
	var out GetCaptchaResp
	pattern := "/api/getCaptcha"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAuthGetCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) VerifyCaptcha(ctx context.Context, in *VerifyCaptchaReq, opts ...http.CallOption) (*VerifyCaptchaResp, error) {
	var out VerifyCaptchaResp
	pattern := "/api/verifyCaptcha"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAuthVerifyCaptcha))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
