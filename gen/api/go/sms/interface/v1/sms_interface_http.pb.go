// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             (unknown)
// source: sms/interface/v1/sms_interface.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationSmsSendSmsCode = "/api.sms.interface.v1.Sms/SendSmsCode"
const OperationSmsVerifySmsCode = "/api.sms.interface.v1.Sms/VerifySmsCode"

type SmsHTTPServer interface {
	SendSmsCode(context.Context, *SendSmsCodeRequest) (*SendSmsCodeReply, error)
	VerifySmsCode(context.Context, *VerifySmsCodeRequest) (*VerifySmsCodeReply, error)
}

func RegisterSmsHTTPServer(s *http.Server, srv SmsHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/sms/sendCode", _Sms_SendSmsCode0_HTTP_Handler(srv))
	r.POST("/v1/sms/verifyCode", _Sms_VerifySmsCode0_HTTP_Handler(srv))
}

func _Sms_SendSmsCode0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendSmsCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSmsSendSmsCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSmsCode(ctx, req.(*SendSmsCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendSmsCodeReply)
		return ctx.Result(200, reply)
	}
}

func _Sms_VerifySmsCode0_HTTP_Handler(srv SmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VerifySmsCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSmsVerifySmsCode)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VerifySmsCode(ctx, req.(*VerifySmsCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VerifySmsCodeReply)
		return ctx.Result(200, reply)
	}
}

type SmsHTTPClient interface {
	SendSmsCode(ctx context.Context, req *SendSmsCodeRequest, opts ...http.CallOption) (rsp *SendSmsCodeReply, err error)
	VerifySmsCode(ctx context.Context, req *VerifySmsCodeRequest, opts ...http.CallOption) (rsp *VerifySmsCodeReply, err error)
}

type SmsHTTPClientImpl struct {
	cc *http.Client
}

func NewSmsHTTPClient(client *http.Client) SmsHTTPClient {
	return &SmsHTTPClientImpl{client}
}

func (c *SmsHTTPClientImpl) SendSmsCode(ctx context.Context, in *SendSmsCodeRequest, opts ...http.CallOption) (*SendSmsCodeReply, error) {
	var out SendSmsCodeReply
	pattern := "/v1/sms/sendCode"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSmsSendSmsCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SmsHTTPClientImpl) VerifySmsCode(ctx context.Context, in *VerifySmsCodeRequest, opts ...http.CallOption) (*VerifySmsCodeReply, error) {
	var out VerifySmsCodeReply
	pattern := "/v1/sms/verifyCode"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSmsVerifySmsCode))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
