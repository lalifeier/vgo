// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: sms/interface/v1/sms_interface.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendSmsCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendSmsCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSmsCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSmsCodeRequestMultiError, or nil if none found.
func (m *SendSmsCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSmsCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobile

	if len(errors) > 0 {
		return SendSmsCodeRequestMultiError(errors)
	}

	return nil
}

// SendSmsCodeRequestMultiError is an error wrapping multiple validation errors
// returned by SendSmsCodeRequest.ValidateAll() if the designated constraints
// aren't met.
type SendSmsCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSmsCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSmsCodeRequestMultiError) AllErrors() []error { return m }

// SendSmsCodeRequestValidationError is the validation error returned by
// SendSmsCodeRequest.Validate if the designated constraints aren't met.
type SendSmsCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsCodeRequestValidationError) ErrorName() string {
	return "SendSmsCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendSmsCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsCodeRequestValidationError{}

// Validate checks the field values on SendSmsCodeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendSmsCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendSmsCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendSmsCodeReplyMultiError, or nil if none found.
func (m *SendSmsCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendSmsCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendSmsCodeReplyMultiError(errors)
	}

	return nil
}

// SendSmsCodeReplyMultiError is an error wrapping multiple validation errors
// returned by SendSmsCodeReply.ValidateAll() if the designated constraints
// aren't met.
type SendSmsCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendSmsCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendSmsCodeReplyMultiError) AllErrors() []error { return m }

// SendSmsCodeReplyValidationError is the validation error returned by
// SendSmsCodeReply.Validate if the designated constraints aren't met.
type SendSmsCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsCodeReplyValidationError) ErrorName() string { return "SendSmsCodeReplyValidationError" }

// Error satisfies the builtin error interface
func (e SendSmsCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsCodeReplyValidationError{}

// Validate checks the field values on VerifySmsCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifySmsCodeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifySmsCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifySmsCodeRequestMultiError, or nil if none found.
func (m *VerifySmsCodeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifySmsCodeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Mobile

	if utf8.RuneCountInString(m.GetCode()) != 6 {
		err := VerifySmsCodeRequestValidationError{
			field:  "Code",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return VerifySmsCodeRequestMultiError(errors)
	}

	return nil
}

// VerifySmsCodeRequestMultiError is an error wrapping multiple validation
// errors returned by VerifySmsCodeRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifySmsCodeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifySmsCodeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifySmsCodeRequestMultiError) AllErrors() []error { return m }

// VerifySmsCodeRequestValidationError is the validation error returned by
// VerifySmsCodeRequest.Validate if the designated constraints aren't met.
type VerifySmsCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifySmsCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifySmsCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifySmsCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifySmsCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifySmsCodeRequestValidationError) ErrorName() string {
	return "VerifySmsCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifySmsCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifySmsCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifySmsCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifySmsCodeRequestValidationError{}

// Validate checks the field values on VerifySmsCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifySmsCodeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifySmsCodeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifySmsCodeReplyMultiError, or nil if none found.
func (m *VerifySmsCodeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifySmsCodeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerifySmsCodeReplyMultiError(errors)
	}

	return nil
}

// VerifySmsCodeReplyMultiError is an error wrapping multiple validation errors
// returned by VerifySmsCodeReply.ValidateAll() if the designated constraints
// aren't met.
type VerifySmsCodeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifySmsCodeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifySmsCodeReplyMultiError) AllErrors() []error { return m }

// VerifySmsCodeReplyValidationError is the validation error returned by
// VerifySmsCodeReply.Validate if the designated constraints aren't met.
type VerifySmsCodeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifySmsCodeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifySmsCodeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifySmsCodeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifySmsCodeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifySmsCodeReplyValidationError) ErrorName() string {
	return "VerifySmsCodeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerifySmsCodeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifySmsCodeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifySmsCodeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifySmsCodeReplyValidationError{}
