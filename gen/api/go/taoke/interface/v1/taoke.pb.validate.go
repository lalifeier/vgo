// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: taoke/interface/v1/taoke.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Carouse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Carouse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Carouse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CarouseMultiError, or nil if none found.
func (m *Carouse) ValidateAll() error {
	return m.validate(true)
}

func (m *Carouse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SourceType

	// no validation rules for TopicName

	// no validation rules for TopicImage

	// no validation rules for TopicId

	// no validation rules for Link

	// no validation rules for ActivityId

	if len(errors) > 0 {
		return CarouseMultiError(errors)
	}

	return nil
}

// CarouseMultiError is an error wrapping multiple validation errors returned
// by Carouse.ValidateAll() if the designated constraints aren't met.
type CarouseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CarouseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CarouseMultiError) AllErrors() []error { return m }

// CarouseValidationError is the validation error returned by Carouse.Validate
// if the designated constraints aren't met.
type CarouseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CarouseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CarouseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CarouseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CarouseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CarouseValidationError) ErrorName() string { return "CarouseValidationError" }

// Error satisfies the builtin error interface
func (e CarouseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCarouse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CarouseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CarouseValidationError{}

// Validate checks the field values on GetCarouseListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCarouseListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCarouseListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCarouseListReqMultiError, or nil if none found.
func (m *GetCarouseListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCarouseListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCarouseListReqMultiError(errors)
	}

	return nil
}

// GetCarouseListReqMultiError is an error wrapping multiple validation errors
// returned by GetCarouseListReq.ValidateAll() if the designated constraints
// aren't met.
type GetCarouseListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCarouseListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCarouseListReqMultiError) AllErrors() []error { return m }

// GetCarouseListReqValidationError is the validation error returned by
// GetCarouseListReq.Validate if the designated constraints aren't met.
type GetCarouseListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCarouseListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCarouseListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCarouseListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCarouseListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCarouseListReqValidationError) ErrorName() string {
	return "GetCarouseListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCarouseListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCarouseListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCarouseListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCarouseListReqValidationError{}

// Validate checks the field values on GetCarouseListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCarouseListResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCarouseListResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCarouseListRespMultiError, or nil if none found.
func (m *GetCarouseListResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCarouseListResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCarouseListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCarouseListRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCarouseListRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCarouseListRespMultiError(errors)
	}

	return nil
}

// GetCarouseListRespMultiError is an error wrapping multiple validation errors
// returned by GetCarouseListResp.ValidateAll() if the designated constraints
// aren't met.
type GetCarouseListRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCarouseListRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCarouseListRespMultiError) AllErrors() []error { return m }

// GetCarouseListRespValidationError is the validation error returned by
// GetCarouseListResp.Validate if the designated constraints aren't met.
type GetCarouseListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCarouseListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCarouseListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCarouseListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCarouseListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCarouseListRespValidationError) ErrorName() string {
	return "GetCarouseListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetCarouseListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCarouseListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCarouseListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCarouseListRespValidationError{}

// Validate checks the field values on Categories with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Categories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Categories with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CategoriesMultiError, or
// nil if none found.
func (m *Categories) ValidateAll() error {
	return m.validate(true)
}

func (m *Categories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cid

	// no validation rules for Cname

	// no validation rules for Cpic

	for idx, item := range m.GetSubcategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoriesValidationError{
						field:  fmt.Sprintf("Subcategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoriesValidationError{
						field:  fmt.Sprintf("Subcategories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoriesValidationError{
					field:  fmt.Sprintf("Subcategories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoriesMultiError(errors)
	}

	return nil
}

// CategoriesMultiError is an error wrapping multiple validation errors
// returned by Categories.ValidateAll() if the designated constraints aren't met.
type CategoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoriesMultiError) AllErrors() []error { return m }

// CategoriesValidationError is the validation error returned by
// Categories.Validate if the designated constraints aren't met.
type CategoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoriesValidationError) ErrorName() string { return "CategoriesValidationError" }

// Error satisfies the builtin error interface
func (e CategoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoriesValidationError{}

// Validate checks the field values on Subcategories with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Subcategories) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Subcategories with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubcategoriesMultiError, or
// nil if none found.
func (m *Subcategories) ValidateAll() error {
	return m.validate(true)
}

func (m *Subcategories) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Scpic

	// no validation rules for Subcid

	// no validation rules for Subcname

	if len(errors) > 0 {
		return SubcategoriesMultiError(errors)
	}

	return nil
}

// SubcategoriesMultiError is an error wrapping multiple validation errors
// returned by Subcategories.ValidateAll() if the designated constraints
// aren't met.
type SubcategoriesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubcategoriesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubcategoriesMultiError) AllErrors() []error { return m }

// SubcategoriesValidationError is the validation error returned by
// Subcategories.Validate if the designated constraints aren't met.
type SubcategoriesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubcategoriesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubcategoriesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubcategoriesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubcategoriesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubcategoriesValidationError) ErrorName() string { return "SubcategoriesValidationError" }

// Error satisfies the builtin error interface
func (e SubcategoriesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubcategories.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubcategoriesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubcategoriesValidationError{}

// Validate checks the field values on GetSuperCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuperCategoryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuperCategoryReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuperCategoryReqMultiError, or nil if none found.
func (m *GetSuperCategoryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuperCategoryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSuperCategoryReqMultiError(errors)
	}

	return nil
}

// GetSuperCategoryReqMultiError is an error wrapping multiple validation
// errors returned by GetSuperCategoryReq.ValidateAll() if the designated
// constraints aren't met.
type GetSuperCategoryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuperCategoryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuperCategoryReqMultiError) AllErrors() []error { return m }

// GetSuperCategoryReqValidationError is the validation error returned by
// GetSuperCategoryReq.Validate if the designated constraints aren't met.
type GetSuperCategoryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuperCategoryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuperCategoryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuperCategoryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuperCategoryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuperCategoryReqValidationError) ErrorName() string {
	return "GetSuperCategoryReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuperCategoryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuperCategoryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuperCategoryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuperCategoryReqValidationError{}

// Validate checks the field values on GetSuperCategoryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSuperCategoryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSuperCategoryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSuperCategoryRespMultiError, or nil if none found.
func (m *GetSuperCategoryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSuperCategoryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSuperCategoryRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSuperCategoryRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSuperCategoryRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSuperCategoryRespMultiError(errors)
	}

	return nil
}

// GetSuperCategoryRespMultiError is an error wrapping multiple validation
// errors returned by GetSuperCategoryResp.ValidateAll() if the designated
// constraints aren't met.
type GetSuperCategoryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSuperCategoryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSuperCategoryRespMultiError) AllErrors() []error { return m }

// GetSuperCategoryRespValidationError is the validation error returned by
// GetSuperCategoryResp.Validate if the designated constraints aren't met.
type GetSuperCategoryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSuperCategoryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSuperCategoryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSuperCategoryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSuperCategoryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSuperCategoryRespValidationError) ErrorName() string {
	return "GetSuperCategoryRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetSuperCategoryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSuperCategoryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSuperCategoryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSuperCategoryRespValidationError{}
