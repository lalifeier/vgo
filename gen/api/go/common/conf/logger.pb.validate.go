// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: common/conf/logger.proto

package conf

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Logger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logger with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LoggerMultiError, or nil if none found.
func (m *Logger) ValidateAll() error {
	return m.validate(true)
}

func (m *Logger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetZap()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Zap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Zap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetZap()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggerValidationError{
				field:  "Zap",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogrus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Logrus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Logrus",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogrus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggerValidationError{
				field:  "Logrus",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFluent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Fluent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Fluent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFluent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggerValidationError{
				field:  "Fluent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAliyun()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Aliyun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Aliyun",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAliyun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggerValidationError{
				field:  "Aliyun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTencent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Tencent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoggerValidationError{
					field:  "Tencent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTencent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoggerValidationError{
				field:  "Tencent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LoggerMultiError(errors)
	}

	return nil
}

// LoggerMultiError is an error wrapping multiple validation errors returned by
// Logger.ValidateAll() if the designated constraints aren't met.
type LoggerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggerMultiError) AllErrors() []error { return m }

// LoggerValidationError is the validation error returned by Logger.Validate if
// the designated constraints aren't met.
type LoggerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerValidationError) ErrorName() string { return "LoggerValidationError" }

// Error satisfies the builtin error interface
func (e LoggerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerValidationError{}

// Validate checks the field values on Zap with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Zap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Zap with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ZapMultiError, or nil if none found.
func (m *Zap) ValidateAll() error {
	return m.validate(true)
}

func (m *Zap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MessageKey

	// no validation rules for LevelKey

	// no validation rules for NameKey

	if len(errors) > 0 {
		return ZapMultiError(errors)
	}

	return nil
}

// ZapMultiError is an error wrapping multiple validation errors returned by
// Zap.ValidateAll() if the designated constraints aren't met.
type ZapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ZapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ZapMultiError) AllErrors() []error { return m }

// ZapValidationError is the validation error returned by Zap.Validate if the
// designated constraints aren't met.
type ZapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ZapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ZapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ZapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ZapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ZapValidationError) ErrorName() string { return "ZapValidationError" }

// Error satisfies the builtin error interface
func (e ZapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sZap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ZapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ZapValidationError{}

// Validate checks the field values on Logrus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Logrus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Logrus with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LogrusMultiError, or nil if none found.
func (m *Logrus) ValidateAll() error {
	return m.validate(true)
}

func (m *Logrus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Level

	// no validation rules for Formatter

	// no validation rules for TimestampFormat

	// no validation rules for DisableColors

	// no validation rules for DisableTimestamp

	if len(errors) > 0 {
		return LogrusMultiError(errors)
	}

	return nil
}

// LogrusMultiError is an error wrapping multiple validation errors returned by
// Logrus.ValidateAll() if the designated constraints aren't met.
type LogrusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogrusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogrusMultiError) AllErrors() []error { return m }

// LogrusValidationError is the validation error returned by Logrus.Validate if
// the designated constraints aren't met.
type LogrusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogrusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogrusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogrusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogrusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogrusValidationError) ErrorName() string { return "LogrusValidationError" }

// Error satisfies the builtin error interface
func (e LogrusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogrus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogrusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogrusValidationError{}

// Validate checks the field values on Fluent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Fluent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Fluent with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FluentMultiError, or nil if none found.
func (m *Fluent) ValidateAll() error {
	return m.validate(true)
}

func (m *Fluent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	if len(errors) > 0 {
		return FluentMultiError(errors)
	}

	return nil
}

// FluentMultiError is an error wrapping multiple validation errors returned by
// Fluent.ValidateAll() if the designated constraints aren't met.
type FluentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FluentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FluentMultiError) AllErrors() []error { return m }

// FluentValidationError is the validation error returned by Fluent.Validate if
// the designated constraints aren't met.
type FluentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FluentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FluentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FluentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FluentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FluentValidationError) ErrorName() string { return "FluentValidationError" }

// Error satisfies the builtin error interface
func (e FluentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFluent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FluentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FluentValidationError{}

// Validate checks the field values on Aliyun with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Aliyun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Aliyun with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AliyunMultiError, or nil if none found.
func (m *Aliyun) ValidateAll() error {
	return m.validate(true)
}

func (m *Aliyun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for Project

	// no validation rules for AccessKey

	// no validation rules for AccessSecret

	if len(errors) > 0 {
		return AliyunMultiError(errors)
	}

	return nil
}

// AliyunMultiError is an error wrapping multiple validation errors returned by
// Aliyun.ValidateAll() if the designated constraints aren't met.
type AliyunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AliyunMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AliyunMultiError) AllErrors() []error { return m }

// AliyunValidationError is the validation error returned by Aliyun.Validate if
// the designated constraints aren't met.
type AliyunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AliyunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AliyunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AliyunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AliyunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AliyunValidationError) ErrorName() string { return "AliyunValidationError" }

// Error satisfies the builtin error interface
func (e AliyunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAliyun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AliyunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AliyunValidationError{}

// Validate checks the field values on Tencent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Tencent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tencent with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TencentMultiError, or nil if none found.
func (m *Tencent) ValidateAll() error {
	return m.validate(true)
}

func (m *Tencent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Endpoint

	// no validation rules for TopicId

	// no validation rules for AccessKey

	// no validation rules for AccessSecret

	if len(errors) > 0 {
		return TencentMultiError(errors)
	}

	return nil
}

// TencentMultiError is an error wrapping multiple validation errors returned
// by Tencent.ValidateAll() if the designated constraints aren't met.
type TencentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TencentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TencentMultiError) AllErrors() []error { return m }

// TencentValidationError is the validation error returned by Tencent.Validate
// if the designated constraints aren't met.
type TencentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TencentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TencentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TencentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TencentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TencentValidationError) ErrorName() string { return "TencentValidationError" }

// Error satisfies the builtin error interface
func (e TencentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTencent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TencentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TencentValidationError{}
