// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: account/service/v1/account_user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountUserMultiError, or
// nil if none found.
func (m *AccountUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Username != nil {
		// no validation rules for Username
	}

	if m.Password != nil {
		// no validation rules for Password
	}

	if m.Email != nil {
		// no validation rules for Email
	}

	if m.Phone != nil {
		// no validation rules for Phone
	}

	if m.Status != nil {
		// no validation rules for Status
	}

	if len(errors) > 0 {
		return AccountUserMultiError(errors)
	}

	return nil
}

// AccountUserMultiError is an error wrapping multiple validation errors
// returned by AccountUser.ValidateAll() if the designated constraints aren't met.
type AccountUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUserMultiError) AllErrors() []error { return m }

// AccountUserValidationError is the validation error returned by
// AccountUser.Validate if the designated constraints aren't met.
type AccountUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUserValidationError) ErrorName() string { return "AccountUserValidationError" }

// Error satisfies the builtin error interface
func (e AccountUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUserValidationError{}

// Validate checks the field values on CreateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountUserReqMultiError, or nil if none found.
func (m *CreateAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccountUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateAccountUserReqValidationError{
					field:  "AccountUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateAccountUserReqValidationError{
					field:  "AccountUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateAccountUserReqValidationError{
				field:  "AccountUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateAccountUserReqMultiError(errors)
	}

	return nil
}

// CreateAccountUserReqMultiError is an error wrapping multiple validation
// errors returned by CreateAccountUserReq.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountUserReqMultiError) AllErrors() []error { return m }

// CreateAccountUserReqValidationError is the validation error returned by
// CreateAccountUserReq.Validate if the designated constraints aren't met.
type CreateAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountUserReqValidationError) ErrorName() string {
	return "CreateAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountUserReqValidationError{}

// Validate checks the field values on UpdateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountUserReqMultiError, or nil if none found.
func (m *UpdateAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetAccountUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateAccountUserReqValidationError{
					field:  "AccountUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateAccountUserReqValidationError{
					field:  "AccountUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccountUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAccountUserReqValidationError{
				field:  "AccountUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateAccountUserReqMultiError(errors)
	}

	return nil
}

// UpdateAccountUserReqMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountUserReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountUserReqMultiError) AllErrors() []error { return m }

// UpdateAccountUserReqValidationError is the validation error returned by
// UpdateAccountUserReq.Validate if the designated constraints aren't met.
type UpdateAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountUserReqValidationError) ErrorName() string {
	return "UpdateAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountUserReqValidationError{}

// Validate checks the field values on DeleteAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountUserReqMultiError, or nil if none found.
func (m *DeleteAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAccountUserReqMultiError(errors)
	}

	return nil
}

// DeleteAccountUserReqMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountUserReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountUserReqMultiError) AllErrors() []error { return m }

// DeleteAccountUserReqValidationError is the validation error returned by
// DeleteAccountUserReq.Validate if the designated constraints aren't met.
type DeleteAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountUserReqValidationError) ErrorName() string {
	return "DeleteAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountUserReqValidationError{}

// Validate checks the field values on GetAccountUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountUserReqMultiError, or nil if none found.
func (m *GetAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountUserReqValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountUserReqValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountUserReqValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetAccountUserReqMultiError(errors)
	}

	return nil
}

// GetAccountUserReqMultiError is an error wrapping multiple validation errors
// returned by GetAccountUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountUserReqMultiError) AllErrors() []error { return m }

// GetAccountUserReqValidationError is the validation error returned by
// GetAccountUserReq.Validate if the designated constraints aren't met.
type GetAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUserReqValidationError) ErrorName() string {
	return "GetAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUserReqValidationError{}

// Validate checks the field values on ListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountUserReqMultiError, or nil if none found.
func (m *ListAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Query

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return ListAccountUserReqMultiError(errors)
	}

	return nil
}

// ListAccountUserReqMultiError is an error wrapping multiple validation errors
// returned by ListAccountUserReq.ValidateAll() if the designated constraints
// aren't met.
type ListAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountUserReqMultiError) AllErrors() []error { return m }

// ListAccountUserReqValidationError is the validation error returned by
// ListAccountUserReq.Validate if the designated constraints aren't met.
type ListAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountUserReqValidationError) ErrorName() string {
	return "ListAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountUserReqValidationError{}

// Validate checks the field values on ListAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountUserRespMultiError, or nil if none found.
func (m *ListAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccountUserRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccountUserRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountUserRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccountUserRespMultiError(errors)
	}

	return nil
}

// ListAccountUserRespMultiError is an error wrapping multiple validation
// errors returned by ListAccountUserResp.ValidateAll() if the designated
// constraints aren't met.
type ListAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountUserRespMultiError) AllErrors() []error { return m }

// ListAccountUserRespValidationError is the validation error returned by
// ListAccountUserResp.Validate if the designated constraints aren't met.
type ListAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountUserRespValidationError) ErrorName() string {
	return "ListAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountUserRespValidationError{}

// Validate checks the field values on PageListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListAccountUserReqMultiError, or nil if none found.
func (m *PageListAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	// no validation rules for Query

	// no validation rules for OrderBy

	if len(errors) > 0 {
		return PageListAccountUserReqMultiError(errors)
	}

	return nil
}

// PageListAccountUserReqMultiError is an error wrapping multiple validation
// errors returned by PageListAccountUserReq.ValidateAll() if the designated
// constraints aren't met.
type PageListAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListAccountUserReqMultiError) AllErrors() []error { return m }

// PageListAccountUserReqValidationError is the validation error returned by
// PageListAccountUserReq.Validate if the designated constraints aren't met.
type PageListAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListAccountUserReqValidationError) ErrorName() string {
	return "PageListAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e PageListAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListAccountUserReqValidationError{}

// Validate checks the field values on PageListAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListAccountUserResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListAccountUserRespMultiError, or nil if none found.
func (m *PageListAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListAccountUserRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListAccountUserRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListAccountUserRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageListAccountUserRespMultiError(errors)
	}

	return nil
}

// PageListAccountUserRespMultiError is an error wrapping multiple validation
// errors returned by PageListAccountUserResp.ValidateAll() if the designated
// constraints aren't met.
type PageListAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListAccountUserRespMultiError) AllErrors() []error { return m }

// PageListAccountUserRespValidationError is the validation error returned by
// PageListAccountUserResp.Validate if the designated constraints aren't met.
type PageListAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListAccountUserRespValidationError) ErrorName() string {
	return "PageListAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e PageListAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListAccountUserRespValidationError{}
