// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: shop/admin/v1/shop_admin.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterReqMultiError, or
// nil if none found.
func (m *RegisterReq) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Password

	if len(errors) > 0 {
		return RegisterReqMultiError(errors)
	}

	return nil
}

// RegisterReqMultiError is an error wrapping multiple validation errors
// returned by RegisterReq.ValidateAll() if the designated constraints aren't met.
type RegisterReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterReqMultiError) AllErrors() []error { return m }

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on RegisterResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RegisterResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RegisterRespMultiError, or
// nil if none found.
func (m *RegisterResp) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RegisterRespMultiError(errors)
	}

	return nil
}

// RegisterRespMultiError is an error wrapping multiple validation errors
// returned by RegisterResp.ValidateAll() if the designated constraints aren't met.
type RegisterRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRespMultiError) AllErrors() []error { return m }

// RegisterRespValidationError is the validation error returned by
// RegisterResp.Validate if the designated constraints aren't met.
type RegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRespValidationError) ErrorName() string { return "RegisterRespValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRespValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginReqMultiError, or nil
// if none found.
func (m *LoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Password

	if len(errors) > 0 {
		return LoginReqMultiError(errors)
	}

	return nil
}

// LoginReqMultiError is an error wrapping multiple validation errors returned
// by LoginReq.ValidateAll() if the designated constraints aren't met.
type LoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginReqMultiError) AllErrors() []error { return m }

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRespMultiError, or nil
// if none found.
func (m *LoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Token

	if len(errors) > 0 {
		return LoginRespMultiError(errors)
	}

	return nil
}

// LoginRespMultiError is an error wrapping multiple validation errors returned
// by LoginResp.ValidateAll() if the designated constraints aren't met.
type LoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRespMultiError) AllErrors() []error { return m }

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on CreateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateUserReqMultiError, or
// nil if none found.
func (m *CreateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUserReqMultiError(errors)
	}

	return nil
}

// CreateUserReqMultiError is an error wrapping multiple validation errors
// returned by CreateUserReq.ValidateAll() if the designated constraints
// aren't met.
type CreateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserReqMultiError) AllErrors() []error { return m }

// CreateUserReqValidationError is the validation error returned by
// CreateUserReq.Validate if the designated constraints aren't met.
type CreateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReqValidationError) ErrorName() string { return "CreateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReqValidationError{}

// Validate checks the field values on CreateUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateUserRespMultiError,
// or nil if none found.
func (m *CreateUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateUserRespMultiError(errors)
	}

	return nil
}

// CreateUserRespMultiError is an error wrapping multiple validation errors
// returned by CreateUserResp.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRespMultiError) AllErrors() []error { return m }

// CreateUserRespValidationError is the validation error returned by
// CreateUserResp.Validate if the designated constraints aren't met.
type CreateUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRespValidationError) ErrorName() string { return "CreateUserRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRespValidationError{}

// Validate checks the field values on UpdateUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserReqMultiError, or
// nil if none found.
func (m *UpdateUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateUserReqMultiError(errors)
	}

	return nil
}

// UpdateUserReqMultiError is an error wrapping multiple validation errors
// returned by UpdateUserReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserReqMultiError) AllErrors() []error { return m }

// UpdateUserReqValidationError is the validation error returned by
// UpdateUserReq.Validate if the designated constraints aren't met.
type UpdateUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReqValidationError) ErrorName() string { return "UpdateUserReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReqValidationError{}

// Validate checks the field values on UpdateUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateUserRespMultiError,
// or nil if none found.
func (m *UpdateUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUserRespMultiError(errors)
	}

	return nil
}

// UpdateUserRespMultiError is an error wrapping multiple validation errors
// returned by UpdateUserResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUserRespMultiError) AllErrors() []error { return m }

// UpdateUserRespValidationError is the validation error returned by
// UpdateUserResp.Validate if the designated constraints aren't met.
type UpdateUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRespValidationError) ErrorName() string { return "UpdateUserRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRespValidationError{}

// Validate checks the field values on DeleteUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteUserReqMultiError, or
// nil if none found.
func (m *DeleteUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteUserReqMultiError(errors)
	}

	return nil
}

// DeleteUserReqMultiError is an error wrapping multiple validation errors
// returned by DeleteUserReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserReqMultiError) AllErrors() []error { return m }

// DeleteUserReqValidationError is the validation error returned by
// DeleteUserReq.Validate if the designated constraints aren't met.
type DeleteUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReqValidationError) ErrorName() string { return "DeleteUserReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReqValidationError{}

// Validate checks the field values on DeleteUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteUserRespMultiError,
// or nil if none found.
func (m *DeleteUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUserRespMultiError(errors)
	}

	return nil
}

// DeleteUserRespMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRespMultiError) AllErrors() []error { return m }

// DeleteUserRespValidationError is the validation error returned by
// DeleteUserResp.Validate if the designated constraints aren't met.
type DeleteUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRespValidationError) ErrorName() string { return "DeleteUserRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRespValidationError{}

// Validate checks the field values on GetUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserReqMultiError, or
// nil if none found.
func (m *GetUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserReqMultiError(errors)
	}

	return nil
}

// GetUserReqMultiError is an error wrapping multiple validation errors
// returned by GetUserReq.ValidateAll() if the designated constraints aren't met.
type GetUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserReqMultiError) AllErrors() []error { return m }

// GetUserReqValidationError is the validation error returned by
// GetUserReq.Validate if the designated constraints aren't met.
type GetUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReqValidationError) ErrorName() string { return "GetUserReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReqValidationError{}

// Validate checks the field values on GetUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRespMultiError, or
// nil if none found.
func (m *GetUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetUserRespMultiError(errors)
	}

	return nil
}

// GetUserRespMultiError is an error wrapping multiple validation errors
// returned by GetUserResp.ValidateAll() if the designated constraints aren't met.
type GetUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRespMultiError) AllErrors() []error { return m }

// GetUserRespValidationError is the validation error returned by
// GetUserResp.Validate if the designated constraints aren't met.
type GetUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRespValidationError) ErrorName() string { return "GetUserRespValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRespValidationError{}

// Validate checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserReqMultiError, or
// nil if none found.
func (m *ListUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListUserReqMultiError(errors)
	}

	return nil
}

// ListUserReqMultiError is an error wrapping multiple validation errors
// returned by ListUserReq.ValidateAll() if the designated constraints aren't met.
type ListUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserReqMultiError) AllErrors() []error { return m }

// ListUserReqValidationError is the validation error returned by
// ListUserReq.Validate if the designated constraints aren't met.
type ListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReqValidationError) ErrorName() string { return "ListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReqValidationError{}

// Validate checks the field values on ListUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListUserRespMultiError, or
// nil if none found.
func (m *ListUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserRespMultiError(errors)
	}

	return nil
}

// ListUserRespMultiError is an error wrapping multiple validation errors
// returned by ListUserResp.ValidateAll() if the designated constraints aren't met.
type ListUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserRespMultiError) AllErrors() []error { return m }

// ListUserRespValidationError is the validation error returned by
// ListUserResp.Validate if the designated constraints aren't met.
type ListUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRespValidationError) ErrorName() string { return "ListUserRespValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRespValidationError{}

// Validate checks the field values on PageListUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListUserReqMultiError, or nil if none found.
func (m *PageListUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageListUserReqMultiError(errors)
	}

	return nil
}

// PageListUserReqMultiError is an error wrapping multiple validation errors
// returned by PageListUserReq.ValidateAll() if the designated constraints
// aren't met.
type PageListUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListUserReqMultiError) AllErrors() []error { return m }

// PageListUserReqValidationError is the validation error returned by
// PageListUserReq.Validate if the designated constraints aren't met.
type PageListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListUserReqValidationError) ErrorName() string { return "PageListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e PageListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListUserReqValidationError{}

// Validate checks the field values on PageListUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListUserRespMultiError, or nil if none found.
func (m *PageListUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalPages

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListUserRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListUserRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListUserRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListUserRespMultiError(errors)
	}

	return nil
}

// PageListUserRespMultiError is an error wrapping multiple validation errors
// returned by PageListUserResp.ValidateAll() if the designated constraints
// aren't met.
type PageListUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListUserRespMultiError) AllErrors() []error { return m }

// PageListUserRespValidationError is the validation error returned by
// PageListUserResp.Validate if the designated constraints aren't met.
type PageListUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListUserRespValidationError) ErrorName() string { return "PageListUserRespValidationError" }

// Error satisfies the builtin error interface
func (e PageListUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListUserRespValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on CreateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleReqMultiError, or
// nil if none found.
func (m *CreateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleReqMultiError(errors)
	}

	return nil
}

// CreateRoleReqMultiError is an error wrapping multiple validation errors
// returned by CreateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleReqMultiError) AllErrors() []error { return m }

// CreateRoleReqValidationError is the validation error returned by
// CreateRoleReq.Validate if the designated constraints aren't met.
type CreateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleReqValidationError) ErrorName() string { return "CreateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleReqValidationError{}

// Validate checks the field values on CreateRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRoleRespMultiError,
// or nil if none found.
func (m *CreateRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateRoleRespMultiError(errors)
	}

	return nil
}

// CreateRoleRespMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResp.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRespMultiError) AllErrors() []error { return m }

// CreateRoleRespValidationError is the validation error returned by
// CreateRoleResp.Validate if the designated constraints aren't met.
type CreateRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRespValidationError) ErrorName() string { return "CreateRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRespValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleReqMultiError, or
// nil if none found.
func (m *UpdateRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateRoleReqMultiError(errors)
	}

	return nil
}

// UpdateRoleReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleReqMultiError) AllErrors() []error { return m }

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on UpdateRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRoleRespMultiError,
// or nil if none found.
func (m *UpdateRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRoleRespMultiError(errors)
	}

	return nil
}

// UpdateRoleRespMultiError is an error wrapping multiple validation errors
// returned by UpdateRoleResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRoleRespMultiError) AllErrors() []error { return m }

// UpdateRoleRespValidationError is the validation error returned by
// UpdateRoleResp.Validate if the designated constraints aren't met.
type UpdateRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRespValidationError) ErrorName() string { return "UpdateRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRespValidationError{}

// Validate checks the field values on DeleteRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleReqMultiError, or
// nil if none found.
func (m *DeleteRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoleReqMultiError(errors)
	}

	return nil
}

// DeleteRoleReqMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleReqMultiError) AllErrors() []error { return m }

// DeleteRoleReqValidationError is the validation error returned by
// DeleteRoleReq.Validate if the designated constraints aren't met.
type DeleteRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReqValidationError) ErrorName() string { return "DeleteRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReqValidationError{}

// Validate checks the field values on DeleteRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRoleRespMultiError,
// or nil if none found.
func (m *DeleteRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleRespMultiError(errors)
	}

	return nil
}

// DeleteRoleRespMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRespMultiError) AllErrors() []error { return m }

// DeleteRoleRespValidationError is the validation error returned by
// DeleteRoleResp.Validate if the designated constraints aren't met.
type DeleteRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRespValidationError) ErrorName() string { return "DeleteRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRespValidationError{}

// Validate checks the field values on GetRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleReqMultiError, or
// nil if none found.
func (m *GetRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRoleReqMultiError(errors)
	}

	return nil
}

// GetRoleReqMultiError is an error wrapping multiple validation errors
// returned by GetRoleReq.ValidateAll() if the designated constraints aren't met.
type GetRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleReqMultiError) AllErrors() []error { return m }

// GetRoleReqValidationError is the validation error returned by
// GetRoleReq.Validate if the designated constraints aren't met.
type GetRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleReqValidationError) ErrorName() string { return "GetRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleReqValidationError{}

// Validate checks the field values on GetRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleRespMultiError, or
// nil if none found.
func (m *GetRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRoleRespMultiError(errors)
	}

	return nil
}

// GetRoleRespMultiError is an error wrapping multiple validation errors
// returned by GetRoleResp.ValidateAll() if the designated constraints aren't met.
type GetRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleRespMultiError) AllErrors() []error { return m }

// GetRoleRespValidationError is the validation error returned by
// GetRoleResp.Validate if the designated constraints aren't met.
type GetRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRespValidationError) ErrorName() string { return "GetRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRespValidationError{}

// Validate checks the field values on ListRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRoleReqMultiError, or
// nil if none found.
func (m *ListRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListRoleReqMultiError(errors)
	}

	return nil
}

// ListRoleReqMultiError is an error wrapping multiple validation errors
// returned by ListRoleReq.ValidateAll() if the designated constraints aren't met.
type ListRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleReqMultiError) AllErrors() []error { return m }

// ListRoleReqValidationError is the validation error returned by
// ListRoleReq.Validate if the designated constraints aren't met.
type ListRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleReqValidationError) ErrorName() string { return "ListRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleReqValidationError{}

// Validate checks the field values on ListRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRoleRespMultiError, or
// nil if none found.
func (m *ListRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRoleRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRoleRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListRoleRespMultiError(errors)
	}

	return nil
}

// ListRoleRespMultiError is an error wrapping multiple validation errors
// returned by ListRoleResp.ValidateAll() if the designated constraints aren't met.
type ListRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRoleRespMultiError) AllErrors() []error { return m }

// ListRoleRespValidationError is the validation error returned by
// ListRoleResp.Validate if the designated constraints aren't met.
type ListRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleRespValidationError) ErrorName() string { return "ListRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleRespValidationError{}

// Validate checks the field values on PageListRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListRoleReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListRoleReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListRoleReqMultiError, or nil if none found.
func (m *PageListRoleReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListRoleReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageListRoleReqMultiError(errors)
	}

	return nil
}

// PageListRoleReqMultiError is an error wrapping multiple validation errors
// returned by PageListRoleReq.ValidateAll() if the designated constraints
// aren't met.
type PageListRoleReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListRoleReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListRoleReqMultiError) AllErrors() []error { return m }

// PageListRoleReqValidationError is the validation error returned by
// PageListRoleReq.Validate if the designated constraints aren't met.
type PageListRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListRoleReqValidationError) ErrorName() string { return "PageListRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e PageListRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListRoleReqValidationError{}

// Validate checks the field values on PageListRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListRoleResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListRoleResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListRoleRespMultiError, or nil if none found.
func (m *PageListRoleResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListRoleResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalPages

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListRoleRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListRoleRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListRoleRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListRoleRespMultiError(errors)
	}

	return nil
}

// PageListRoleRespMultiError is an error wrapping multiple validation errors
// returned by PageListRoleResp.ValidateAll() if the designated constraints
// aren't met.
type PageListRoleRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListRoleRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListRoleRespMultiError) AllErrors() []error { return m }

// PageListRoleRespValidationError is the validation error returned by
// PageListRoleResp.Validate if the designated constraints aren't met.
type PageListRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListRoleRespValidationError) ErrorName() string { return "PageListRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e PageListRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListRoleRespValidationError{}

// Validate checks the field values on Menu with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Menu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Menu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MenuMultiError, or nil if none found.
func (m *Menu) ValidateAll() error {
	return m.validate(true)
}

func (m *Menu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MenuMultiError(errors)
	}

	return nil
}

// MenuMultiError is an error wrapping multiple validation errors returned by
// Menu.ValidateAll() if the designated constraints aren't met.
type MenuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuMultiError) AllErrors() []error { return m }

// MenuValidationError is the validation error returned by Menu.Validate if the
// designated constraints aren't met.
type MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuValidationError) ErrorName() string { return "MenuValidationError" }

// Error satisfies the builtin error interface
func (e MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuValidationError{}

// Validate checks the field values on CreateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateMenuReqMultiError, or
// nil if none found.
func (m *CreateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateMenuReqMultiError(errors)
	}

	return nil
}

// CreateMenuReqMultiError is an error wrapping multiple validation errors
// returned by CreateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuReqMultiError) AllErrors() []error { return m }

// CreateMenuReqValidationError is the validation error returned by
// CreateMenuReq.Validate if the designated constraints aren't met.
type CreateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuReqValidationError) ErrorName() string { return "CreateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuReqValidationError{}

// Validate checks the field values on CreateMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateMenuRespMultiError,
// or nil if none found.
func (m *CreateMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateMenuRespMultiError(errors)
	}

	return nil
}

// CreateMenuRespMultiError is an error wrapping multiple validation errors
// returned by CreateMenuResp.ValidateAll() if the designated constraints
// aren't met.
type CreateMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMenuRespMultiError) AllErrors() []error { return m }

// CreateMenuRespValidationError is the validation error returned by
// CreateMenuResp.Validate if the designated constraints aren't met.
type CreateMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuRespValidationError) ErrorName() string { return "CreateMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuRespValidationError{}

// Validate checks the field values on UpdateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateMenuReqMultiError, or
// nil if none found.
func (m *UpdateMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateMenuReqMultiError(errors)
	}

	return nil
}

// UpdateMenuReqMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuReqMultiError) AllErrors() []error { return m }

// UpdateMenuReqValidationError is the validation error returned by
// UpdateMenuReq.Validate if the designated constraints aren't met.
type UpdateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReqValidationError) ErrorName() string { return "UpdateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReqValidationError{}

// Validate checks the field values on UpdateMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateMenuRespMultiError,
// or nil if none found.
func (m *UpdateMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMenuRespMultiError(errors)
	}

	return nil
}

// UpdateMenuRespMultiError is an error wrapping multiple validation errors
// returned by UpdateMenuResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMenuRespMultiError) AllErrors() []error { return m }

// UpdateMenuRespValidationError is the validation error returned by
// UpdateMenuResp.Validate if the designated constraints aren't met.
type UpdateMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuRespValidationError) ErrorName() string { return "UpdateMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuRespValidationError{}

// Validate checks the field values on DeleteMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteMenuReqMultiError, or
// nil if none found.
func (m *DeleteMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteMenuReqMultiError(errors)
	}

	return nil
}

// DeleteMenuReqMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuReqMultiError) AllErrors() []error { return m }

// DeleteMenuReqValidationError is the validation error returned by
// DeleteMenuReq.Validate if the designated constraints aren't met.
type DeleteMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuReqValidationError) ErrorName() string { return "DeleteMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuReqValidationError{}

// Validate checks the field values on DeleteMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteMenuRespMultiError,
// or nil if none found.
func (m *DeleteMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMenuRespMultiError(errors)
	}

	return nil
}

// DeleteMenuRespMultiError is an error wrapping multiple validation errors
// returned by DeleteMenuResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMenuRespMultiError) AllErrors() []error { return m }

// DeleteMenuRespValidationError is the validation error returned by
// DeleteMenuResp.Validate if the designated constraints aren't met.
type DeleteMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuRespValidationError) ErrorName() string { return "DeleteMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuRespValidationError{}

// Validate checks the field values on GetMenuReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMenuReqMultiError, or
// nil if none found.
func (m *GetMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMenuReqMultiError(errors)
	}

	return nil
}

// GetMenuReqMultiError is an error wrapping multiple validation errors
// returned by GetMenuReq.ValidateAll() if the designated constraints aren't met.
type GetMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuReqMultiError) AllErrors() []error { return m }

// GetMenuReqValidationError is the validation error returned by
// GetMenuReq.Validate if the designated constraints aren't met.
type GetMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuReqValidationError) ErrorName() string { return "GetMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuReqValidationError{}

// Validate checks the field values on GetMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMenuRespMultiError, or
// nil if none found.
func (m *GetMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMenuRespMultiError(errors)
	}

	return nil
}

// GetMenuRespMultiError is an error wrapping multiple validation errors
// returned by GetMenuResp.ValidateAll() if the designated constraints aren't met.
type GetMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMenuRespMultiError) AllErrors() []error { return m }

// GetMenuRespValidationError is the validation error returned by
// GetMenuResp.Validate if the designated constraints aren't met.
type GetMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuRespValidationError) ErrorName() string { return "GetMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuRespValidationError{}

// Validate checks the field values on ListMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListMenuReqMultiError, or
// nil if none found.
func (m *ListMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMenuReqMultiError(errors)
	}

	return nil
}

// ListMenuReqMultiError is an error wrapping multiple validation errors
// returned by ListMenuReq.ValidateAll() if the designated constraints aren't met.
type ListMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuReqMultiError) AllErrors() []error { return m }

// ListMenuReqValidationError is the validation error returned by
// ListMenuReq.Validate if the designated constraints aren't met.
type ListMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuReqValidationError) ErrorName() string { return "ListMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuReqValidationError{}

// Validate checks the field values on ListMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListMenuRespMultiError, or
// nil if none found.
func (m *ListMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMenuRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMenuRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMenuRespMultiError(errors)
	}

	return nil
}

// ListMenuRespMultiError is an error wrapping multiple validation errors
// returned by ListMenuResp.ValidateAll() if the designated constraints aren't met.
type ListMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMenuRespMultiError) AllErrors() []error { return m }

// ListMenuRespValidationError is the validation error returned by
// ListMenuResp.Validate if the designated constraints aren't met.
type ListMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuRespValidationError) ErrorName() string { return "ListMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuRespValidationError{}

// Validate checks the field values on PageListMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListMenuReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListMenuReqMultiError, or nil if none found.
func (m *PageListMenuReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListMenuReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageListMenuReqMultiError(errors)
	}

	return nil
}

// PageListMenuReqMultiError is an error wrapping multiple validation errors
// returned by PageListMenuReq.ValidateAll() if the designated constraints
// aren't met.
type PageListMenuReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListMenuReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListMenuReqMultiError) AllErrors() []error { return m }

// PageListMenuReqValidationError is the validation error returned by
// PageListMenuReq.Validate if the designated constraints aren't met.
type PageListMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListMenuReqValidationError) ErrorName() string { return "PageListMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e PageListMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListMenuReqValidationError{}

// Validate checks the field values on PageListMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListMenuResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListMenuResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListMenuRespMultiError, or nil if none found.
func (m *PageListMenuResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListMenuResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalPages

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListMenuRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListMenuRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListMenuRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListMenuRespMultiError(errors)
	}

	return nil
}

// PageListMenuRespMultiError is an error wrapping multiple validation errors
// returned by PageListMenuResp.ValidateAll() if the designated constraints
// aren't met.
type PageListMenuRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListMenuRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListMenuRespMultiError) AllErrors() []error { return m }

// PageListMenuRespValidationError is the validation error returned by
// PageListMenuResp.Validate if the designated constraints aren't met.
type PageListMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListMenuRespValidationError) ErrorName() string { return "PageListMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e PageListMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListMenuRespValidationError{}

// Validate checks the field values on DictData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictDataMultiError, or nil
// if none found.
func (m *DictData) ValidateAll() error {
	return m.validate(true)
}

func (m *DictData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DictTypeId

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for Sort

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return DictDataMultiError(errors)
	}

	return nil
}

// DictDataMultiError is an error wrapping multiple validation errors returned
// by DictData.ValidateAll() if the designated constraints aren't met.
type DictDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictDataMultiError) AllErrors() []error { return m }

// DictDataValidationError is the validation error returned by
// DictData.Validate if the designated constraints aren't met.
type DictDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictDataValidationError) ErrorName() string { return "DictDataValidationError" }

// Error satisfies the builtin error interface
func (e DictDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictDataValidationError{}

// Validate checks the field values on CreateDictDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDictDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictDataReqMultiError, or nil if none found.
func (m *CreateDictDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictTypeId

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for Sort

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return CreateDictDataReqMultiError(errors)
	}

	return nil
}

// CreateDictDataReqMultiError is an error wrapping multiple validation errors
// returned by CreateDictDataReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDictDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictDataReqMultiError) AllErrors() []error { return m }

// CreateDictDataReqValidationError is the validation error returned by
// CreateDictDataReq.Validate if the designated constraints aren't met.
type CreateDictDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictDataReqValidationError) ErrorName() string {
	return "CreateDictDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictDataReqValidationError{}

// Validate checks the field values on CreateDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDictDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDictDataRespMultiError, or nil if none found.
func (m *CreateDictDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDictDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDictDataRespMultiError(errors)
	}

	return nil
}

// CreateDictDataRespMultiError is an error wrapping multiple validation errors
// returned by CreateDictDataResp.ValidateAll() if the designated constraints
// aren't met.
type CreateDictDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDictDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDictDataRespMultiError) AllErrors() []error { return m }

// CreateDictDataRespValidationError is the validation error returned by
// CreateDictDataResp.Validate if the designated constraints aren't met.
type CreateDictDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDictDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDictDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDictDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDictDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDictDataRespValidationError) ErrorName() string {
	return "CreateDictDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDictDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDictDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDictDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDictDataRespValidationError{}

// Validate checks the field values on UpdateDictDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataReqMultiError, or nil if none found.
func (m *UpdateDictDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for DictTypeId

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for Sort

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return UpdateDictDataReqMultiError(errors)
	}

	return nil
}

// UpdateDictDataReqMultiError is an error wrapping multiple validation errors
// returned by UpdateDictDataReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateDictDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataReqMultiError) AllErrors() []error { return m }

// UpdateDictDataReqValidationError is the validation error returned by
// UpdateDictDataReq.Validate if the designated constraints aren't met.
type UpdateDictDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataReqValidationError) ErrorName() string {
	return "UpdateDictDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataReqValidationError{}

// Validate checks the field values on UpdateDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDictDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDictDataRespMultiError, or nil if none found.
func (m *UpdateDictDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDictDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDictDataRespMultiError(errors)
	}

	return nil
}

// UpdateDictDataRespMultiError is an error wrapping multiple validation errors
// returned by UpdateDictDataResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateDictDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDictDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDictDataRespMultiError) AllErrors() []error { return m }

// UpdateDictDataRespValidationError is the validation error returned by
// UpdateDictDataResp.Validate if the designated constraints aren't met.
type UpdateDictDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDictDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDictDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDictDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDictDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDictDataRespValidationError) ErrorName() string {
	return "UpdateDictDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDictDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDictDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDictDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDictDataRespValidationError{}

// Validate checks the field values on DeleteDictDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictDataReqMultiError, or nil if none found.
func (m *DeleteDictDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDictDataReqMultiError(errors)
	}

	return nil
}

// DeleteDictDataReqMultiError is an error wrapping multiple validation errors
// returned by DeleteDictDataReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteDictDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictDataReqMultiError) AllErrors() []error { return m }

// DeleteDictDataReqValidationError is the validation error returned by
// DeleteDictDataReq.Validate if the designated constraints aren't met.
type DeleteDictDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictDataReqValidationError) ErrorName() string {
	return "DeleteDictDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictDataReqValidationError{}

// Validate checks the field values on DeleteDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDictDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDictDataRespMultiError, or nil if none found.
func (m *DeleteDictDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDictDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDictDataRespMultiError(errors)
	}

	return nil
}

// DeleteDictDataRespMultiError is an error wrapping multiple validation errors
// returned by DeleteDictDataResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteDictDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDictDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDictDataRespMultiError) AllErrors() []error { return m }

// DeleteDictDataRespValidationError is the validation error returned by
// DeleteDictDataResp.Validate if the designated constraints aren't met.
type DeleteDictDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDictDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDictDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDictDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDictDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDictDataRespValidationError) ErrorName() string {
	return "DeleteDictDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDictDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDictDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDictDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDictDataRespValidationError{}

// Validate checks the field values on GetDictDataReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDictDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDictDataReqMultiError,
// or nil if none found.
func (m *GetDictDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDictDataReqMultiError(errors)
	}

	return nil
}

// GetDictDataReqMultiError is an error wrapping multiple validation errors
// returned by GetDictDataReq.ValidateAll() if the designated constraints
// aren't met.
type GetDictDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictDataReqMultiError) AllErrors() []error { return m }

// GetDictDataReqValidationError is the validation error returned by
// GetDictDataReq.Validate if the designated constraints aren't met.
type GetDictDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictDataReqValidationError) ErrorName() string { return "GetDictDataReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDictDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictDataReqValidationError{}

// Validate checks the field values on GetDictDataResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetDictDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDictDataRespMultiError, or nil if none found.
func (m *GetDictDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDictDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Label

	// no validation rules for Value

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for Sort

	// no validation rules for IsDefault

	if len(errors) > 0 {
		return GetDictDataRespMultiError(errors)
	}

	return nil
}

// GetDictDataRespMultiError is an error wrapping multiple validation errors
// returned by GetDictDataResp.ValidateAll() if the designated constraints
// aren't met.
type GetDictDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDictDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDictDataRespMultiError) AllErrors() []error { return m }

// GetDictDataRespValidationError is the validation error returned by
// GetDictDataResp.Validate if the designated constraints aren't met.
type GetDictDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDictDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDictDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDictDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDictDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDictDataRespValidationError) ErrorName() string { return "GetDictDataRespValidationError" }

// Error satisfies the builtin error interface
func (e GetDictDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDictDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDictDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDictDataRespValidationError{}

// Validate checks the field values on ListDictDataReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDictDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictDataReqMultiError, or nil if none found.
func (m *ListDictDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListDictDataReqMultiError(errors)
	}

	return nil
}

// ListDictDataReqMultiError is an error wrapping multiple validation errors
// returned by ListDictDataReq.ValidateAll() if the designated constraints
// aren't met.
type ListDictDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictDataReqMultiError) AllErrors() []error { return m }

// ListDictDataReqValidationError is the validation error returned by
// ListDictDataReq.Validate if the designated constraints aren't met.
type ListDictDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictDataReqValidationError) ErrorName() string { return "ListDictDataReqValidationError" }

// Error satisfies the builtin error interface
func (e ListDictDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictDataReqValidationError{}

// Validate checks the field values on ListDictDataResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDictDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDictDataRespMultiError, or nil if none found.
func (m *ListDictDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDictDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDictDataRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDictDataRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDictDataRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDictDataRespMultiError(errors)
	}

	return nil
}

// ListDictDataRespMultiError is an error wrapping multiple validation errors
// returned by ListDictDataResp.ValidateAll() if the designated constraints
// aren't met.
type ListDictDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDictDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDictDataRespMultiError) AllErrors() []error { return m }

// ListDictDataRespValidationError is the validation error returned by
// ListDictDataResp.Validate if the designated constraints aren't met.
type ListDictDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDictDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDictDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDictDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDictDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDictDataRespValidationError) ErrorName() string { return "ListDictDataRespValidationError" }

// Error satisfies the builtin error interface
func (e ListDictDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDictDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDictDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDictDataRespValidationError{}

// Validate checks the field values on PageListDictDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListDictDataReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListDictDataReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListDictDataReqMultiError, or nil if none found.
func (m *PageListDictDataReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListDictDataReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageListDictDataReqMultiError(errors)
	}

	return nil
}

// PageListDictDataReqMultiError is an error wrapping multiple validation
// errors returned by PageListDictDataReq.ValidateAll() if the designated
// constraints aren't met.
type PageListDictDataReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListDictDataReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListDictDataReqMultiError) AllErrors() []error { return m }

// PageListDictDataReqValidationError is the validation error returned by
// PageListDictDataReq.Validate if the designated constraints aren't met.
type PageListDictDataReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListDictDataReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListDictDataReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListDictDataReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListDictDataReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListDictDataReqValidationError) ErrorName() string {
	return "PageListDictDataReqValidationError"
}

// Error satisfies the builtin error interface
func (e PageListDictDataReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListDictDataReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListDictDataReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListDictDataReqValidationError{}

// Validate checks the field values on PageListDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListDictDataResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListDictDataResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListDictDataRespMultiError, or nil if none found.
func (m *PageListDictDataResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListDictDataResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalPages

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListDictDataRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListDictDataRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListDictDataRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListDictDataRespMultiError(errors)
	}

	return nil
}

// PageListDictDataRespMultiError is an error wrapping multiple validation
// errors returned by PageListDictDataResp.ValidateAll() if the designated
// constraints aren't met.
type PageListDictDataRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListDictDataRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListDictDataRespMultiError) AllErrors() []error { return m }

// PageListDictDataRespValidationError is the validation error returned by
// PageListDictDataResp.Validate if the designated constraints aren't met.
type PageListDictDataRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListDictDataRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListDictDataRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListDictDataRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListDictDataRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListDictDataRespValidationError) ErrorName() string {
	return "PageListDictDataRespValidationError"
}

// Error satisfies the builtin error interface
func (e PageListDictDataRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListDictDataResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListDictDataRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListDictDataRespValidationError{}

// Validate checks the field values on DictType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictTypeMultiError, or nil
// if none found.
func (m *DictType) ValidateAll() error {
	return m.validate(true)
}

func (m *DictType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return DictTypeMultiError(errors)
	}

	return nil
}

// DictTypeMultiError is an error wrapping multiple validation errors returned
// by DictType.ValidateAll() if the designated constraints aren't met.
type DictTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictTypeMultiError) AllErrors() []error { return m }

// DictTypeValidationError is the validation error returned by
// DictType.Validate if the designated constraints aren't met.
type DictTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictTypeValidationError) ErrorName() string { return "DictTypeValidationError" }

// Error satisfies the builtin error interface
func (e DictTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictTypeValidationError{}

// Validate checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AccountUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AccountUserMultiError, or
// nil if none found.
func (m *AccountUser) ValidateAll() error {
	return m.validate(true)
}

func (m *AccountUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AccountUserMultiError(errors)
	}

	return nil
}

// AccountUserMultiError is an error wrapping multiple validation errors
// returned by AccountUser.ValidateAll() if the designated constraints aren't met.
type AccountUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccountUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccountUserMultiError) AllErrors() []error { return m }

// AccountUserValidationError is the validation error returned by
// AccountUser.Validate if the designated constraints aren't met.
type AccountUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUserValidationError) ErrorName() string { return "AccountUserValidationError" }

// Error satisfies the builtin error interface
func (e AccountUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUserValidationError{}

// Validate checks the field values on CreateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountUserReqMultiError, or nil if none found.
func (m *CreateAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateAccountUserReqMultiError(errors)
	}

	return nil
}

// CreateAccountUserReqMultiError is an error wrapping multiple validation
// errors returned by CreateAccountUserReq.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountUserReqMultiError) AllErrors() []error { return m }

// CreateAccountUserReqValidationError is the validation error returned by
// CreateAccountUserReq.Validate if the designated constraints aren't met.
type CreateAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountUserReqValidationError) ErrorName() string {
	return "CreateAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountUserReqValidationError{}

// Validate checks the field values on CreateAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountUserRespMultiError, or nil if none found.
func (m *CreateAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateAccountUserRespMultiError(errors)
	}

	return nil
}

// CreateAccountUserRespMultiError is an error wrapping multiple validation
// errors returned by CreateAccountUserResp.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountUserRespMultiError) AllErrors() []error { return m }

// CreateAccountUserRespValidationError is the validation error returned by
// CreateAccountUserResp.Validate if the designated constraints aren't met.
type CreateAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountUserRespValidationError) ErrorName() string {
	return "CreateAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountUserRespValidationError{}

// Validate checks the field values on UpdateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountUserReqMultiError, or nil if none found.
func (m *UpdateAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateAccountUserReqMultiError(errors)
	}

	return nil
}

// UpdateAccountUserReqMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountUserReq.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountUserReqMultiError) AllErrors() []error { return m }

// UpdateAccountUserReqValidationError is the validation error returned by
// UpdateAccountUserReq.Validate if the designated constraints aren't met.
type UpdateAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountUserReqValidationError) ErrorName() string {
	return "UpdateAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountUserReqValidationError{}

// Validate checks the field values on UpdateAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateAccountUserRespMultiError, or nil if none found.
func (m *UpdateAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateAccountUserRespMultiError(errors)
	}

	return nil
}

// UpdateAccountUserRespMultiError is an error wrapping multiple validation
// errors returned by UpdateAccountUserResp.ValidateAll() if the designated
// constraints aren't met.
type UpdateAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateAccountUserRespMultiError) AllErrors() []error { return m }

// UpdateAccountUserRespValidationError is the validation error returned by
// UpdateAccountUserResp.Validate if the designated constraints aren't met.
type UpdateAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountUserRespValidationError) ErrorName() string {
	return "UpdateAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountUserRespValidationError{}

// Validate checks the field values on DeleteAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountUserReqMultiError, or nil if none found.
func (m *DeleteAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAccountUserReqMultiError(errors)
	}

	return nil
}

// DeleteAccountUserReqMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountUserReq.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountUserReqMultiError) AllErrors() []error { return m }

// DeleteAccountUserReqValidationError is the validation error returned by
// DeleteAccountUserReq.Validate if the designated constraints aren't met.
type DeleteAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountUserReqValidationError) ErrorName() string {
	return "DeleteAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountUserReqValidationError{}

// Validate checks the field values on DeleteAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAccountUserRespMultiError, or nil if none found.
func (m *DeleteAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteAccountUserRespMultiError(errors)
	}

	return nil
}

// DeleteAccountUserRespMultiError is an error wrapping multiple validation
// errors returned by DeleteAccountUserResp.ValidateAll() if the designated
// constraints aren't met.
type DeleteAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAccountUserRespMultiError) AllErrors() []error { return m }

// DeleteAccountUserRespValidationError is the validation error returned by
// DeleteAccountUserResp.Validate if the designated constraints aren't met.
type DeleteAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountUserRespValidationError) ErrorName() string {
	return "DeleteAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountUserRespValidationError{}

// Validate checks the field values on GetAccountUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountUserReqMultiError, or nil if none found.
func (m *GetAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAccountUserReqMultiError(errors)
	}

	return nil
}

// GetAccountUserReqMultiError is an error wrapping multiple validation errors
// returned by GetAccountUserReq.ValidateAll() if the designated constraints
// aren't met.
type GetAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountUserReqMultiError) AllErrors() []error { return m }

// GetAccountUserReqValidationError is the validation error returned by
// GetAccountUserReq.Validate if the designated constraints aren't met.
type GetAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUserReqValidationError) ErrorName() string {
	return "GetAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUserReqValidationError{}

// Validate checks the field values on GetAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountUserRespMultiError, or nil if none found.
func (m *GetAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAccountUserRespMultiError(errors)
	}

	return nil
}

// GetAccountUserRespMultiError is an error wrapping multiple validation errors
// returned by GetAccountUserResp.ValidateAll() if the designated constraints
// aren't met.
type GetAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountUserRespMultiError) AllErrors() []error { return m }

// GetAccountUserRespValidationError is the validation error returned by
// GetAccountUserResp.Validate if the designated constraints aren't met.
type GetAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUserRespValidationError) ErrorName() string {
	return "GetAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUserRespValidationError{}

// Validate checks the field values on ListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountUserReqMultiError, or nil if none found.
func (m *ListAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListAccountUserReqMultiError(errors)
	}

	return nil
}

// ListAccountUserReqMultiError is an error wrapping multiple validation errors
// returned by ListAccountUserReq.ValidateAll() if the designated constraints
// aren't met.
type ListAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountUserReqMultiError) AllErrors() []error { return m }

// ListAccountUserReqValidationError is the validation error returned by
// ListAccountUserReq.Validate if the designated constraints aren't met.
type ListAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountUserReqValidationError) ErrorName() string {
	return "ListAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountUserReqValidationError{}

// Validate checks the field values on ListAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListAccountUserRespMultiError, or nil if none found.
func (m *ListAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListAccountUserRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListAccountUserRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountUserRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListAccountUserRespMultiError(errors)
	}

	return nil
}

// ListAccountUserRespMultiError is an error wrapping multiple validation
// errors returned by ListAccountUserResp.ValidateAll() if the designated
// constraints aren't met.
type ListAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListAccountUserRespMultiError) AllErrors() []error { return m }

// ListAccountUserRespValidationError is the validation error returned by
// ListAccountUserResp.Validate if the designated constraints aren't met.
type ListAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountUserRespValidationError) ErrorName() string {
	return "ListAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountUserRespValidationError{}

// Validate checks the field values on PageListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListAccountUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListAccountUserReqMultiError, or nil if none found.
func (m *PageListAccountUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListAccountUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageListAccountUserReqMultiError(errors)
	}

	return nil
}

// PageListAccountUserReqMultiError is an error wrapping multiple validation
// errors returned by PageListAccountUserReq.ValidateAll() if the designated
// constraints aren't met.
type PageListAccountUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListAccountUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListAccountUserReqMultiError) AllErrors() []error { return m }

// PageListAccountUserReqValidationError is the validation error returned by
// PageListAccountUserReq.Validate if the designated constraints aren't met.
type PageListAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListAccountUserReqValidationError) ErrorName() string {
	return "PageListAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e PageListAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListAccountUserReqValidationError{}

// Validate checks the field values on PageListAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListAccountUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListAccountUserResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListAccountUserRespMultiError, or nil if none found.
func (m *PageListAccountUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListAccountUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalPages

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListAccountUserRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListAccountUserRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListAccountUserRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListAccountUserRespMultiError(errors)
	}

	return nil
}

// PageListAccountUserRespMultiError is an error wrapping multiple validation
// errors returned by PageListAccountUserResp.ValidateAll() if the designated
// constraints aren't met.
type PageListAccountUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListAccountUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListAccountUserRespMultiError) AllErrors() []error { return m }

// PageListAccountUserRespValidationError is the validation error returned by
// PageListAccountUserResp.Validate if the designated constraints aren't met.
type PageListAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListAccountUserRespValidationError) ErrorName() string {
	return "PageListAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e PageListAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListAccountUserRespValidationError{}

// Validate checks the field values on Staff with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Staff) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Staff with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StaffMultiError, or nil if none found.
func (m *Staff) ValidateAll() error {
	return m.validate(true)
}

func (m *Staff) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return StaffMultiError(errors)
	}

	return nil
}

// StaffMultiError is an error wrapping multiple validation errors returned by
// Staff.ValidateAll() if the designated constraints aren't met.
type StaffMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StaffMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StaffMultiError) AllErrors() []error { return m }

// StaffValidationError is the validation error returned by Staff.Validate if
// the designated constraints aren't met.
type StaffValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StaffValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StaffValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StaffValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StaffValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StaffValidationError) ErrorName() string { return "StaffValidationError" }

// Error satisfies the builtin error interface
func (e StaffValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStaff.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StaffValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StaffValidationError{}

// Validate checks the field values on CreateStaffReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateStaffReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStaffReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateStaffReqMultiError,
// or nil if none found.
func (m *CreateStaffReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStaffReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateStaffReqMultiError(errors)
	}

	return nil
}

// CreateStaffReqMultiError is an error wrapping multiple validation errors
// returned by CreateStaffReq.ValidateAll() if the designated constraints
// aren't met.
type CreateStaffReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStaffReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStaffReqMultiError) AllErrors() []error { return m }

// CreateStaffReqValidationError is the validation error returned by
// CreateStaffReq.Validate if the designated constraints aren't met.
type CreateStaffReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStaffReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStaffReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStaffReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStaffReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStaffReqValidationError) ErrorName() string { return "CreateStaffReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateStaffReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStaffReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStaffReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStaffReqValidationError{}

// Validate checks the field values on CreateStaffResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateStaffResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateStaffResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateStaffRespMultiError, or nil if none found.
func (m *CreateStaffResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateStaffResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateStaffRespMultiError(errors)
	}

	return nil
}

// CreateStaffRespMultiError is an error wrapping multiple validation errors
// returned by CreateStaffResp.ValidateAll() if the designated constraints
// aren't met.
type CreateStaffRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateStaffRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateStaffRespMultiError) AllErrors() []error { return m }

// CreateStaffRespValidationError is the validation error returned by
// CreateStaffResp.Validate if the designated constraints aren't met.
type CreateStaffRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateStaffRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateStaffRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateStaffRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateStaffRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateStaffRespValidationError) ErrorName() string { return "CreateStaffRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateStaffRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateStaffResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateStaffRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateStaffRespValidationError{}

// Validate checks the field values on UpdateStaffReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateStaffReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStaffReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateStaffReqMultiError,
// or nil if none found.
func (m *UpdateStaffReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStaffReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateStaffReqMultiError(errors)
	}

	return nil
}

// UpdateStaffReqMultiError is an error wrapping multiple validation errors
// returned by UpdateStaffReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateStaffReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStaffReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStaffReqMultiError) AllErrors() []error { return m }

// UpdateStaffReqValidationError is the validation error returned by
// UpdateStaffReq.Validate if the designated constraints aren't met.
type UpdateStaffReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStaffReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStaffReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStaffReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStaffReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStaffReqValidationError) ErrorName() string { return "UpdateStaffReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateStaffReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStaffReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStaffReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStaffReqValidationError{}

// Validate checks the field values on UpdateStaffResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateStaffResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateStaffResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateStaffRespMultiError, or nil if none found.
func (m *UpdateStaffResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateStaffResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateStaffRespMultiError(errors)
	}

	return nil
}

// UpdateStaffRespMultiError is an error wrapping multiple validation errors
// returned by UpdateStaffResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateStaffRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateStaffRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateStaffRespMultiError) AllErrors() []error { return m }

// UpdateStaffRespValidationError is the validation error returned by
// UpdateStaffResp.Validate if the designated constraints aren't met.
type UpdateStaffRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStaffRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStaffRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStaffRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStaffRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStaffRespValidationError) ErrorName() string { return "UpdateStaffRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateStaffRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStaffResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStaffRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStaffRespValidationError{}

// Validate checks the field values on DeleteStaffReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteStaffReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStaffReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteStaffReqMultiError,
// or nil if none found.
func (m *DeleteStaffReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStaffReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteStaffReqMultiError(errors)
	}

	return nil
}

// DeleteStaffReqMultiError is an error wrapping multiple validation errors
// returned by DeleteStaffReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteStaffReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStaffReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStaffReqMultiError) AllErrors() []error { return m }

// DeleteStaffReqValidationError is the validation error returned by
// DeleteStaffReq.Validate if the designated constraints aren't met.
type DeleteStaffReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStaffReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStaffReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStaffReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStaffReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStaffReqValidationError) ErrorName() string { return "DeleteStaffReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteStaffReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStaffReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStaffReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStaffReqValidationError{}

// Validate checks the field values on DeleteStaffResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteStaffResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteStaffResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteStaffRespMultiError, or nil if none found.
func (m *DeleteStaffResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteStaffResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteStaffRespMultiError(errors)
	}

	return nil
}

// DeleteStaffRespMultiError is an error wrapping multiple validation errors
// returned by DeleteStaffResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteStaffRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteStaffRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteStaffRespMultiError) AllErrors() []error { return m }

// DeleteStaffRespValidationError is the validation error returned by
// DeleteStaffResp.Validate if the designated constraints aren't met.
type DeleteStaffRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteStaffRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteStaffRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteStaffRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteStaffRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteStaffRespValidationError) ErrorName() string { return "DeleteStaffRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteStaffRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteStaffResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteStaffRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteStaffRespValidationError{}

// Validate checks the field values on GetStaffReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetStaffReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStaffReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetStaffReqMultiError, or
// nil if none found.
func (m *GetStaffReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStaffReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetStaffReqMultiError(errors)
	}

	return nil
}

// GetStaffReqMultiError is an error wrapping multiple validation errors
// returned by GetStaffReq.ValidateAll() if the designated constraints aren't met.
type GetStaffReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStaffReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStaffReqMultiError) AllErrors() []error { return m }

// GetStaffReqValidationError is the validation error returned by
// GetStaffReq.Validate if the designated constraints aren't met.
type GetStaffReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStaffReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStaffReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStaffReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStaffReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStaffReqValidationError) ErrorName() string { return "GetStaffReqValidationError" }

// Error satisfies the builtin error interface
func (e GetStaffReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStaffReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStaffReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStaffReqValidationError{}

// Validate checks the field values on GetStaffResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetStaffResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStaffResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetStaffRespMultiError, or
// nil if none found.
func (m *GetStaffResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStaffResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetStaffRespMultiError(errors)
	}

	return nil
}

// GetStaffRespMultiError is an error wrapping multiple validation errors
// returned by GetStaffResp.ValidateAll() if the designated constraints aren't met.
type GetStaffRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStaffRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStaffRespMultiError) AllErrors() []error { return m }

// GetStaffRespValidationError is the validation error returned by
// GetStaffResp.Validate if the designated constraints aren't met.
type GetStaffRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStaffRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStaffRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStaffRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStaffRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStaffRespValidationError) ErrorName() string { return "GetStaffRespValidationError" }

// Error satisfies the builtin error interface
func (e GetStaffRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStaffResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStaffRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStaffRespValidationError{}

// Validate checks the field values on ListStaffReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListStaffReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListStaffReqMultiError, or
// nil if none found.
func (m *ListStaffReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListStaffReqMultiError(errors)
	}

	return nil
}

// ListStaffReqMultiError is an error wrapping multiple validation errors
// returned by ListStaffReq.ValidateAll() if the designated constraints aren't met.
type ListStaffReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffReqMultiError) AllErrors() []error { return m }

// ListStaffReqValidationError is the validation error returned by
// ListStaffReq.Validate if the designated constraints aren't met.
type ListStaffReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffReqValidationError) ErrorName() string { return "ListStaffReqValidationError" }

// Error satisfies the builtin error interface
func (e ListStaffReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffReqValidationError{}

// Validate checks the field values on ListStaffResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListStaffResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListStaffResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListStaffRespMultiError, or
// nil if none found.
func (m *ListStaffResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListStaffResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListStaffRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListStaffRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListStaffRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListStaffRespMultiError(errors)
	}

	return nil
}

// ListStaffRespMultiError is an error wrapping multiple validation errors
// returned by ListStaffResp.ValidateAll() if the designated constraints
// aren't met.
type ListStaffRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListStaffRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListStaffRespMultiError) AllErrors() []error { return m }

// ListStaffRespValidationError is the validation error returned by
// ListStaffResp.Validate if the designated constraints aren't met.
type ListStaffRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListStaffRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListStaffRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListStaffRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListStaffRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListStaffRespValidationError) ErrorName() string { return "ListStaffRespValidationError" }

// Error satisfies the builtin error interface
func (e ListStaffRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListStaffResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListStaffRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListStaffRespValidationError{}

// Validate checks the field values on PageListStaffReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListStaffReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListStaffReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListStaffReqMultiError, or nil if none found.
func (m *PageListStaffReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListStaffReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageListStaffReqMultiError(errors)
	}

	return nil
}

// PageListStaffReqMultiError is an error wrapping multiple validation errors
// returned by PageListStaffReq.ValidateAll() if the designated constraints
// aren't met.
type PageListStaffReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListStaffReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListStaffReqMultiError) AllErrors() []error { return m }

// PageListStaffReqValidationError is the validation error returned by
// PageListStaffReq.Validate if the designated constraints aren't met.
type PageListStaffReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListStaffReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListStaffReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListStaffReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListStaffReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListStaffReqValidationError) ErrorName() string { return "PageListStaffReqValidationError" }

// Error satisfies the builtin error interface
func (e PageListStaffReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListStaffReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListStaffReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListStaffReqValidationError{}

// Validate checks the field values on PageListStaffResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListStaffResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListStaffResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListStaffRespMultiError, or nil if none found.
func (m *PageListStaffResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListStaffResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalPages

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListStaffRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListStaffRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListStaffRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListStaffRespMultiError(errors)
	}

	return nil
}

// PageListStaffRespMultiError is an error wrapping multiple validation errors
// returned by PageListStaffResp.ValidateAll() if the designated constraints
// aren't met.
type PageListStaffRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListStaffRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListStaffRespMultiError) AllErrors() []error { return m }

// PageListStaffRespValidationError is the validation error returned by
// PageListStaffResp.Validate if the designated constraints aren't met.
type PageListStaffRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListStaffRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListStaffRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListStaffRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListStaffRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListStaffRespValidationError) ErrorName() string {
	return "PageListStaffRespValidationError"
}

// Error satisfies the builtin error interface
func (e PageListStaffRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListStaffResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListStaffRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListStaffRespValidationError{}

// Validate checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *System) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SystemMultiError, or nil if none found.
func (m *System) ValidateAll() error {
	return m.validate(true)
}

func (m *System) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SystemMultiError(errors)
	}

	return nil
}

// SystemMultiError is an error wrapping multiple validation errors returned by
// System.ValidateAll() if the designated constraints aren't met.
type SystemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemMultiError) AllErrors() []error { return m }

// SystemValidationError is the validation error returned by System.Validate if
// the designated constraints aren't met.
type SystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemValidationError) ErrorName() string { return "SystemValidationError" }

// Error satisfies the builtin error interface
func (e SystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemValidationError{}

// Validate checks the field values on CreateSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSystemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSystemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSystemReqMultiError, or nil if none found.
func (m *CreateSystemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSystemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSystemReqMultiError(errors)
	}

	return nil
}

// CreateSystemReqMultiError is an error wrapping multiple validation errors
// returned by CreateSystemReq.ValidateAll() if the designated constraints
// aren't met.
type CreateSystemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSystemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSystemReqMultiError) AllErrors() []error { return m }

// CreateSystemReqValidationError is the validation error returned by
// CreateSystemReq.Validate if the designated constraints aren't met.
type CreateSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemReqValidationError) ErrorName() string { return "CreateSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemReqValidationError{}

// Validate checks the field values on CreateSystemResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSystemResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSystemResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSystemRespMultiError, or nil if none found.
func (m *CreateSystemResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSystemResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSystemRespMultiError(errors)
	}

	return nil
}

// CreateSystemRespMultiError is an error wrapping multiple validation errors
// returned by CreateSystemResp.ValidateAll() if the designated constraints
// aren't met.
type CreateSystemRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSystemRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSystemRespMultiError) AllErrors() []error { return m }

// CreateSystemRespValidationError is the validation error returned by
// CreateSystemResp.Validate if the designated constraints aren't met.
type CreateSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemRespValidationError) ErrorName() string { return "CreateSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemRespValidationError{}

// Validate checks the field values on UpdateSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSystemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSystemReqMultiError, or nil if none found.
func (m *UpdateSystemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateSystemReqMultiError(errors)
	}

	return nil
}

// UpdateSystemReqMultiError is an error wrapping multiple validation errors
// returned by UpdateSystemReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateSystemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemReqMultiError) AllErrors() []error { return m }

// UpdateSystemReqValidationError is the validation error returned by
// UpdateSystemReq.Validate if the designated constraints aren't met.
type UpdateSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemReqValidationError) ErrorName() string { return "UpdateSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemReqValidationError{}

// Validate checks the field values on UpdateSystemResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSystemResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSystemResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSystemRespMultiError, or nil if none found.
func (m *UpdateSystemResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSystemResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSystemRespMultiError(errors)
	}

	return nil
}

// UpdateSystemRespMultiError is an error wrapping multiple validation errors
// returned by UpdateSystemResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateSystemRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSystemRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSystemRespMultiError) AllErrors() []error { return m }

// UpdateSystemRespValidationError is the validation error returned by
// UpdateSystemResp.Validate if the designated constraints aren't met.
type UpdateSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemRespValidationError) ErrorName() string { return "UpdateSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemRespValidationError{}

// Validate checks the field values on DeleteSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSystemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSystemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSystemReqMultiError, or nil if none found.
func (m *DeleteSystemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSystemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSystemReqMultiError(errors)
	}

	return nil
}

// DeleteSystemReqMultiError is an error wrapping multiple validation errors
// returned by DeleteSystemReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteSystemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSystemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSystemReqMultiError) AllErrors() []error { return m }

// DeleteSystemReqValidationError is the validation error returned by
// DeleteSystemReq.Validate if the designated constraints aren't met.
type DeleteSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemReqValidationError) ErrorName() string { return "DeleteSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemReqValidationError{}

// Validate checks the field values on DeleteSystemResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSystemResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSystemResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSystemRespMultiError, or nil if none found.
func (m *DeleteSystemResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSystemResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSystemRespMultiError(errors)
	}

	return nil
}

// DeleteSystemRespMultiError is an error wrapping multiple validation errors
// returned by DeleteSystemResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteSystemRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSystemRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSystemRespMultiError) AllErrors() []error { return m }

// DeleteSystemRespValidationError is the validation error returned by
// DeleteSystemResp.Validate if the designated constraints aren't met.
type DeleteSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemRespValidationError) ErrorName() string { return "DeleteSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemRespValidationError{}

// Validate checks the field values on GetSystemReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSystemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSystemReqMultiError, or
// nil if none found.
func (m *GetSystemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSystemReqMultiError(errors)
	}

	return nil
}

// GetSystemReqMultiError is an error wrapping multiple validation errors
// returned by GetSystemReq.ValidateAll() if the designated constraints aren't met.
type GetSystemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemReqMultiError) AllErrors() []error { return m }

// GetSystemReqValidationError is the validation error returned by
// GetSystemReq.Validate if the designated constraints aren't met.
type GetSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemReqValidationError) ErrorName() string { return "GetSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemReqValidationError{}

// Validate checks the field values on GetSystemResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSystemResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSystemResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSystemRespMultiError, or
// nil if none found.
func (m *GetSystemResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSystemResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSystemRespMultiError(errors)
	}

	return nil
}

// GetSystemRespMultiError is an error wrapping multiple validation errors
// returned by GetSystemResp.ValidateAll() if the designated constraints
// aren't met.
type GetSystemRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSystemRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSystemRespMultiError) AllErrors() []error { return m }

// GetSystemRespValidationError is the validation error returned by
// GetSystemResp.Validate if the designated constraints aren't met.
type GetSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemRespValidationError) ErrorName() string { return "GetSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e GetSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemRespValidationError{}

// Validate checks the field values on ListSystemReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSystemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSystemReqMultiError, or
// nil if none found.
func (m *ListSystemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSystemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSystemReqMultiError(errors)
	}

	return nil
}

// ListSystemReqMultiError is an error wrapping multiple validation errors
// returned by ListSystemReq.ValidateAll() if the designated constraints
// aren't met.
type ListSystemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSystemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSystemReqMultiError) AllErrors() []error { return m }

// ListSystemReqValidationError is the validation error returned by
// ListSystemReq.Validate if the designated constraints aren't met.
type ListSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemReqValidationError) ErrorName() string { return "ListSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e ListSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemReqValidationError{}

// Validate checks the field values on ListSystemResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSystemResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSystemResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSystemRespMultiError,
// or nil if none found.
func (m *ListSystemResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSystemResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSystemRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSystemRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSystemRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSystemRespMultiError(errors)
	}

	return nil
}

// ListSystemRespMultiError is an error wrapping multiple validation errors
// returned by ListSystemResp.ValidateAll() if the designated constraints
// aren't met.
type ListSystemRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSystemRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSystemRespMultiError) AllErrors() []error { return m }

// ListSystemRespValidationError is the validation error returned by
// ListSystemResp.Validate if the designated constraints aren't met.
type ListSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemRespValidationError) ErrorName() string { return "ListSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e ListSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemRespValidationError{}

// Validate checks the field values on PageListSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PageListSystemReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListSystemReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListSystemReqMultiError, or nil if none found.
func (m *PageListSystemReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListSystemReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageNum

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PageListSystemReqMultiError(errors)
	}

	return nil
}

// PageListSystemReqMultiError is an error wrapping multiple validation errors
// returned by PageListSystemReq.ValidateAll() if the designated constraints
// aren't met.
type PageListSystemReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListSystemReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListSystemReqMultiError) AllErrors() []error { return m }

// PageListSystemReqValidationError is the validation error returned by
// PageListSystemReq.Validate if the designated constraints aren't met.
type PageListSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListSystemReqValidationError) ErrorName() string {
	return "PageListSystemReqValidationError"
}

// Error satisfies the builtin error interface
func (e PageListSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListSystemReqValidationError{}

// Validate checks the field values on PageListSystemResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PageListSystemResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PageListSystemResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PageListSystemRespMultiError, or nil if none found.
func (m *PageListSystemResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PageListSystemResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalPages

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PageListSystemRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PageListSystemRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListSystemRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PageListSystemRespMultiError(errors)
	}

	return nil
}

// PageListSystemRespMultiError is an error wrapping multiple validation errors
// returned by PageListSystemResp.ValidateAll() if the designated constraints
// aren't met.
type PageListSystemRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PageListSystemRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PageListSystemRespMultiError) AllErrors() []error { return m }

// PageListSystemRespValidationError is the validation error returned by
// PageListSystemResp.Validate if the designated constraints aren't met.
type PageListSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListSystemRespValidationError) ErrorName() string {
	return "PageListSystemRespValidationError"
}

// Error satisfies the builtin error interface
func (e PageListSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListSystemRespValidationError{}
