// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             (unknown)
// source: shop/admin/v1/shop_admin.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShopAdminCreateAccountUser = "/api.shop.admin.v1.ShopAdmin/CreateAccountUser"
const OperationShopAdminCreateDictData = "/api.shop.admin.v1.ShopAdmin/CreateDictData"
const OperationShopAdminCreateMenu = "/api.shop.admin.v1.ShopAdmin/CreateMenu"
const OperationShopAdminCreateRole = "/api.shop.admin.v1.ShopAdmin/CreateRole"
const OperationShopAdminCreateStaff = "/api.shop.admin.v1.ShopAdmin/CreateStaff"
const OperationShopAdminCreateSystem = "/api.shop.admin.v1.ShopAdmin/CreateSystem"
const OperationShopAdminCreateUser = "/api.shop.admin.v1.ShopAdmin/CreateUser"
const OperationShopAdminDeleteAccountUser = "/api.shop.admin.v1.ShopAdmin/DeleteAccountUser"
const OperationShopAdminDeleteDictData = "/api.shop.admin.v1.ShopAdmin/DeleteDictData"
const OperationShopAdminDeleteMenu = "/api.shop.admin.v1.ShopAdmin/DeleteMenu"
const OperationShopAdminDeleteRole = "/api.shop.admin.v1.ShopAdmin/DeleteRole"
const OperationShopAdminDeleteStaff = "/api.shop.admin.v1.ShopAdmin/DeleteStaff"
const OperationShopAdminDeleteSystem = "/api.shop.admin.v1.ShopAdmin/DeleteSystem"
const OperationShopAdminDeleteUser = "/api.shop.admin.v1.ShopAdmin/DeleteUser"
const OperationShopAdminGetAccountUser = "/api.shop.admin.v1.ShopAdmin/GetAccountUser"
const OperationShopAdminGetDictData = "/api.shop.admin.v1.ShopAdmin/GetDictData"
const OperationShopAdminGetMenu = "/api.shop.admin.v1.ShopAdmin/GetMenu"
const OperationShopAdminGetRole = "/api.shop.admin.v1.ShopAdmin/GetRole"
const OperationShopAdminGetStaff = "/api.shop.admin.v1.ShopAdmin/GetStaff"
const OperationShopAdminGetSystem = "/api.shop.admin.v1.ShopAdmin/GetSystem"
const OperationShopAdminGetUser = "/api.shop.admin.v1.ShopAdmin/GetUser"
const OperationShopAdminListAccountUser = "/api.shop.admin.v1.ShopAdmin/ListAccountUser"
const OperationShopAdminListDictData = "/api.shop.admin.v1.ShopAdmin/ListDictData"
const OperationShopAdminListMenu = "/api.shop.admin.v1.ShopAdmin/ListMenu"
const OperationShopAdminListRole = "/api.shop.admin.v1.ShopAdmin/ListRole"
const OperationShopAdminListStaff = "/api.shop.admin.v1.ShopAdmin/ListStaff"
const OperationShopAdminListSystem = "/api.shop.admin.v1.ShopAdmin/ListSystem"
const OperationShopAdminListUser = "/api.shop.admin.v1.ShopAdmin/ListUser"
const OperationShopAdminLogin = "/api.shop.admin.v1.ShopAdmin/Login"
const OperationShopAdminPageListAccountUser = "/api.shop.admin.v1.ShopAdmin/PageListAccountUser"
const OperationShopAdminPageListDictData = "/api.shop.admin.v1.ShopAdmin/PageListDictData"
const OperationShopAdminPageListMenu = "/api.shop.admin.v1.ShopAdmin/PageListMenu"
const OperationShopAdminPageListRole = "/api.shop.admin.v1.ShopAdmin/PageListRole"
const OperationShopAdminPageListStaff = "/api.shop.admin.v1.ShopAdmin/PageListStaff"
const OperationShopAdminPageListSystem = "/api.shop.admin.v1.ShopAdmin/PageListSystem"
const OperationShopAdminPageListUser = "/api.shop.admin.v1.ShopAdmin/PageListUser"
const OperationShopAdminRegister = "/api.shop.admin.v1.ShopAdmin/Register"
const OperationShopAdminUpdateAccountUser = "/api.shop.admin.v1.ShopAdmin/UpdateAccountUser"
const OperationShopAdminUpdateDictData = "/api.shop.admin.v1.ShopAdmin/UpdateDictData"
const OperationShopAdminUpdateMenu = "/api.shop.admin.v1.ShopAdmin/UpdateMenu"
const OperationShopAdminUpdateRole = "/api.shop.admin.v1.ShopAdmin/UpdateRole"
const OperationShopAdminUpdateStaff = "/api.shop.admin.v1.ShopAdmin/UpdateStaff"
const OperationShopAdminUpdateSystem = "/api.shop.admin.v1.ShopAdmin/UpdateSystem"
const OperationShopAdminUpdateUser = "/api.shop.admin.v1.ShopAdmin/UpdateUser"

type ShopAdminHTTPServer interface {
	CreateAccountUser(context.Context, *CreateAccountUserReq) (*CreateAccountUserResp, error)
	CreateDictData(context.Context, *CreateDictDataReq) (*CreateDictDataResp, error)
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuResp, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error)
	CreateStaff(context.Context, *CreateStaffReq) (*CreateStaffResp, error)
	CreateSystem(context.Context, *CreateSystemReq) (*CreateSystemResp, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	DeleteAccountUser(context.Context, *DeleteAccountUserReq) (*DeleteAccountUserResp, error)
	DeleteDictData(context.Context, *DeleteDictDataReq) (*DeleteDictDataResp, error)
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuResp, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error)
	DeleteStaff(context.Context, *DeleteStaffReq) (*DeleteStaffResp, error)
	DeleteSystem(context.Context, *DeleteSystemReq) (*DeleteSystemResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	GetAccountUser(context.Context, *GetAccountUserReq) (*GetAccountUserResp, error)
	GetDictData(context.Context, *GetDictDataReq) (*GetDictDataResp, error)
	GetMenu(context.Context, *GetMenuReq) (*GetMenuResp, error)
	GetRole(context.Context, *GetRoleReq) (*GetRoleResp, error)
	GetStaff(context.Context, *GetStaffReq) (*GetStaffResp, error)
	GetSystem(context.Context, *GetSystemReq) (*GetSystemResp, error)
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	ListAccountUser(context.Context, *ListAccountUserReq) (*ListAccountUserResp, error)
	ListDictData(context.Context, *ListDictDataReq) (*ListDictDataResp, error)
	ListMenu(context.Context, *ListMenuReq) (*ListMenuResp, error)
	ListRole(context.Context, *ListRoleReq) (*ListRoleResp, error)
	ListStaff(context.Context, *ListStaffReq) (*ListStaffResp, error)
	ListSystem(context.Context, *ListSystemReq) (*ListSystemResp, error)
	ListUser(context.Context, *ListUserReq) (*ListUserResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	PageListAccountUser(context.Context, *PageListAccountUserReq) (*PageListAccountUserResp, error)
	PageListDictData(context.Context, *PageListDictDataReq) (*PageListDictDataResp, error)
	PageListMenu(context.Context, *PageListMenuReq) (*PageListMenuResp, error)
	PageListRole(context.Context, *PageListRoleReq) (*PageListRoleResp, error)
	PageListStaff(context.Context, *PageListStaffReq) (*PageListStaffResp, error)
	PageListSystem(context.Context, *PageListSystemReq) (*PageListSystemResp, error)
	PageListUser(context.Context, *PageListUserReq) (*PageListUserResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	UpdateAccountUser(context.Context, *UpdateAccountUserReq) (*UpdateAccountUserResp, error)
	UpdateDictData(context.Context, *UpdateDictDataReq) (*UpdateDictDataResp, error)
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	UpdateStaff(context.Context, *UpdateStaffReq) (*UpdateStaffResp, error)
	UpdateSystem(context.Context, *UpdateSystemReq) (*UpdateSystemResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
}

func RegisterShopAdminHTTPServer(s *http.Server, srv ShopAdminHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/register", _ShopAdmin_Register0_HTTP_Handler(srv))
	r.POST("/api/v1/login", _ShopAdmin_Login0_HTTP_Handler(srv))
	r.POST("/api/user", _ShopAdmin_CreateUser0_HTTP_Handler(srv))
	r.PUT("/api/user/{id}", _ShopAdmin_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/api/user/{id}", _ShopAdmin_DeleteUser0_HTTP_Handler(srv))
	r.GET("/api/user/list", _ShopAdmin_ListUser0_HTTP_Handler(srv))
	r.GET("/api/user", _ShopAdmin_PageListUser0_HTTP_Handler(srv))
	r.GET("/api/user/{id}", _ShopAdmin_GetUser0_HTTP_Handler(srv))
	r.POST("/api/role", _ShopAdmin_CreateRole0_HTTP_Handler(srv))
	r.PUT("/api/role/{id}", _ShopAdmin_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/api/role/{id}", _ShopAdmin_DeleteRole0_HTTP_Handler(srv))
	r.GET("/api/role/list", _ShopAdmin_ListRole0_HTTP_Handler(srv))
	r.GET("/api/role", _ShopAdmin_PageListRole0_HTTP_Handler(srv))
	r.GET("/api/role/{id}", _ShopAdmin_GetRole0_HTTP_Handler(srv))
	r.POST("/api/menu", _ShopAdmin_CreateMenu0_HTTP_Handler(srv))
	r.PUT("/api/menu/{id}", _ShopAdmin_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/api/menu/{id}", _ShopAdmin_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/api/menu/list", _ShopAdmin_ListMenu0_HTTP_Handler(srv))
	r.GET("/api/menu", _ShopAdmin_PageListMenu0_HTTP_Handler(srv))
	r.GET("/api/menu/{id}", _ShopAdmin_GetMenu0_HTTP_Handler(srv))
	r.POST("/api/dict", _ShopAdmin_CreateDictData0_HTTP_Handler(srv))
	r.PUT("/api/dict/{id}", _ShopAdmin_UpdateDictData0_HTTP_Handler(srv))
	r.DELETE("/api/dict/{id}", _ShopAdmin_DeleteDictData0_HTTP_Handler(srv))
	r.GET("/api/dicts", _ShopAdmin_ListDictData0_HTTP_Handler(srv))
	r.GET("/api/dict", _ShopAdmin_PageListDictData0_HTTP_Handler(srv))
	r.GET("/api/dict/{id}", _ShopAdmin_GetDictData0_HTTP_Handler(srv))
	r.POST("/api/account_user", _ShopAdmin_CreateAccountUser0_HTTP_Handler(srv))
	r.PUT("/api/account_user/{id}", _ShopAdmin_UpdateAccountUser0_HTTP_Handler(srv))
	r.DELETE("/api/account_user/{id}", _ShopAdmin_DeleteAccountUser0_HTTP_Handler(srv))
	r.GET("/api/account_user/list", _ShopAdmin_ListAccountUser0_HTTP_Handler(srv))
	r.GET("/api/account_user", _ShopAdmin_PageListAccountUser0_HTTP_Handler(srv))
	r.GET("/api/account_user/{id}", _ShopAdmin_GetAccountUser0_HTTP_Handler(srv))
	r.POST("/api/staff", _ShopAdmin_CreateStaff0_HTTP_Handler(srv))
	r.PUT("/api/staff/{id}", _ShopAdmin_UpdateStaff0_HTTP_Handler(srv))
	r.DELETE("/api/staff/{id}", _ShopAdmin_DeleteStaff0_HTTP_Handler(srv))
	r.GET("/api/staff/list", _ShopAdmin_ListStaff0_HTTP_Handler(srv))
	r.GET("/api/staff", _ShopAdmin_PageListStaff0_HTTP_Handler(srv))
	r.GET("/api/staff/{id}", _ShopAdmin_GetStaff0_HTTP_Handler(srv))
	r.POST("/api/account_user", _ShopAdmin_CreateSystem0_HTTP_Handler(srv))
	r.PUT("/api/system/{id}", _ShopAdmin_UpdateSystem0_HTTP_Handler(srv))
	r.DELETE("/api/system/{id}", _ShopAdmin_DeleteSystem0_HTTP_Handler(srv))
	r.GET("/api/system/list", _ShopAdmin_ListSystem0_HTTP_Handler(srv))
	r.GET("/api/system", _ShopAdmin_PageListSystem0_HTTP_Handler(srv))
	r.GET("/api/system/{id}", _ShopAdmin_GetSystem0_HTTP_Handler(srv))
}

func _ShopAdmin_Register0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_Login0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_PageListUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminPageListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListUser(ctx, req.(*PageListUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateRole0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminCreateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateRole0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminUpdateRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteRole0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminDeleteRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListRole0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRole(ctx, req.(*ListRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_PageListRole0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminPageListRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListRole(ctx, req.(*PageListRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListRoleResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetRole0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateMenu0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminCreateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*CreateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMenuResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateMenu0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminUpdateMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMenuResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteMenu0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminDeleteMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMenuResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListMenu0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenu(ctx, req.(*ListMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMenuResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_PageListMenu0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminPageListMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListMenu(ctx, req.(*PageListMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListMenuResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetMenu0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetMenu)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenu(ctx, req.(*GetMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateDictData0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDictDataReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminCreateDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDictData(ctx, req.(*CreateDictDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDictDataResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateDictData0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDictDataReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminUpdateDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDictData(ctx, req.(*UpdateDictDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDictDataResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteDictData0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDictDataReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminDeleteDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDictData(ctx, req.(*DeleteDictDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDictDataResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListDictData0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDictDataReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDictData(ctx, req.(*ListDictDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDictDataResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_PageListDictData0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListDictDataReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminPageListDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListDictData(ctx, req.(*PageListDictDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListDictDataResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetDictData0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDictDataReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetDictData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDictData(ctx, req.(*GetDictDataReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDictDataResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateAccountUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAccountUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminCreateAccountUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccountUser(ctx, req.(*CreateAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateAccountUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminUpdateAccountUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccountUser(ctx, req.(*UpdateAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteAccountUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminDeleteAccountUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccountUser(ctx, req.(*DeleteAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListAccountUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListAccountUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccountUser(ctx, req.(*ListAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_PageListAccountUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminPageListAccountUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListAccountUser(ctx, req.(*PageListAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetAccountUser0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetAccountUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountUser(ctx, req.(*GetAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateStaff0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStaffReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminCreateStaff)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStaff(ctx, req.(*CreateStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStaffResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateStaff0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStaffReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminUpdateStaff)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStaff(ctx, req.(*UpdateStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStaffResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteStaff0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStaffReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminDeleteStaff)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStaff(ctx, req.(*DeleteStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStaffResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListStaff0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStaffReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListStaff)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStaff(ctx, req.(*ListStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStaffResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_PageListStaff0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListStaffReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminPageListStaff)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListStaff(ctx, req.(*PageListStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListStaffResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetStaff0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStaffReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetStaff)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStaff(ctx, req.(*GetStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStaffResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_CreateSystem0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSystemReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminCreateSystem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSystem(ctx, req.(*CreateSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSystemResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_UpdateSystem0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSystemReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminUpdateSystem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSystem(ctx, req.(*UpdateSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSystemResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_DeleteSystem0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSystemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminDeleteSystem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSystem(ctx, req.(*DeleteSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSystemResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_ListSystem0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSystemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminListSystem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSystem(ctx, req.(*ListSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSystemResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_PageListSystem0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListSystemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminPageListSystem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListSystem(ctx, req.(*PageListSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListSystemResp)
		return ctx.Result(200, reply)
	}
}

func _ShopAdmin_GetSystem0_HTTP_Handler(srv ShopAdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSystemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShopAdminGetSystem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSystem(ctx, req.(*GetSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSystemResp)
		return ctx.Result(200, reply)
	}
}

type ShopAdminHTTPClient interface {
	CreateAccountUser(ctx context.Context, req *CreateAccountUserReq, opts ...http.CallOption) (rsp *CreateAccountUserResp, err error)
	CreateDictData(ctx context.Context, req *CreateDictDataReq, opts ...http.CallOption) (rsp *CreateDictDataResp, err error)
	CreateMenu(ctx context.Context, req *CreateMenuReq, opts ...http.CallOption) (rsp *CreateMenuResp, err error)
	CreateRole(ctx context.Context, req *CreateRoleReq, opts ...http.CallOption) (rsp *CreateRoleResp, err error)
	CreateStaff(ctx context.Context, req *CreateStaffReq, opts ...http.CallOption) (rsp *CreateStaffResp, err error)
	CreateSystem(ctx context.Context, req *CreateSystemReq, opts ...http.CallOption) (rsp *CreateSystemResp, err error)
	CreateUser(ctx context.Context, req *CreateUserReq, opts ...http.CallOption) (rsp *CreateUserResp, err error)
	DeleteAccountUser(ctx context.Context, req *DeleteAccountUserReq, opts ...http.CallOption) (rsp *DeleteAccountUserResp, err error)
	DeleteDictData(ctx context.Context, req *DeleteDictDataReq, opts ...http.CallOption) (rsp *DeleteDictDataResp, err error)
	DeleteMenu(ctx context.Context, req *DeleteMenuReq, opts ...http.CallOption) (rsp *DeleteMenuResp, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleReq, opts ...http.CallOption) (rsp *DeleteRoleResp, err error)
	DeleteStaff(ctx context.Context, req *DeleteStaffReq, opts ...http.CallOption) (rsp *DeleteStaffResp, err error)
	DeleteSystem(ctx context.Context, req *DeleteSystemReq, opts ...http.CallOption) (rsp *DeleteSystemResp, err error)
	DeleteUser(ctx context.Context, req *DeleteUserReq, opts ...http.CallOption) (rsp *DeleteUserResp, err error)
	GetAccountUser(ctx context.Context, req *GetAccountUserReq, opts ...http.CallOption) (rsp *GetAccountUserResp, err error)
	GetDictData(ctx context.Context, req *GetDictDataReq, opts ...http.CallOption) (rsp *GetDictDataResp, err error)
	GetMenu(ctx context.Context, req *GetMenuReq, opts ...http.CallOption) (rsp *GetMenuResp, err error)
	GetRole(ctx context.Context, req *GetRoleReq, opts ...http.CallOption) (rsp *GetRoleResp, err error)
	GetStaff(ctx context.Context, req *GetStaffReq, opts ...http.CallOption) (rsp *GetStaffResp, err error)
	GetSystem(ctx context.Context, req *GetSystemReq, opts ...http.CallOption) (rsp *GetSystemResp, err error)
	GetUser(ctx context.Context, req *GetUserReq, opts ...http.CallOption) (rsp *GetUserResp, err error)
	ListAccountUser(ctx context.Context, req *ListAccountUserReq, opts ...http.CallOption) (rsp *ListAccountUserResp, err error)
	ListDictData(ctx context.Context, req *ListDictDataReq, opts ...http.CallOption) (rsp *ListDictDataResp, err error)
	ListMenu(ctx context.Context, req *ListMenuReq, opts ...http.CallOption) (rsp *ListMenuResp, err error)
	ListRole(ctx context.Context, req *ListRoleReq, opts ...http.CallOption) (rsp *ListRoleResp, err error)
	ListStaff(ctx context.Context, req *ListStaffReq, opts ...http.CallOption) (rsp *ListStaffResp, err error)
	ListSystem(ctx context.Context, req *ListSystemReq, opts ...http.CallOption) (rsp *ListSystemResp, err error)
	ListUser(ctx context.Context, req *ListUserReq, opts ...http.CallOption) (rsp *ListUserResp, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginResp, err error)
	PageListAccountUser(ctx context.Context, req *PageListAccountUserReq, opts ...http.CallOption) (rsp *PageListAccountUserResp, err error)
	PageListDictData(ctx context.Context, req *PageListDictDataReq, opts ...http.CallOption) (rsp *PageListDictDataResp, err error)
	PageListMenu(ctx context.Context, req *PageListMenuReq, opts ...http.CallOption) (rsp *PageListMenuResp, err error)
	PageListRole(ctx context.Context, req *PageListRoleReq, opts ...http.CallOption) (rsp *PageListRoleResp, err error)
	PageListStaff(ctx context.Context, req *PageListStaffReq, opts ...http.CallOption) (rsp *PageListStaffResp, err error)
	PageListSystem(ctx context.Context, req *PageListSystemReq, opts ...http.CallOption) (rsp *PageListSystemResp, err error)
	PageListUser(ctx context.Context, req *PageListUserReq, opts ...http.CallOption) (rsp *PageListUserResp, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterResp, err error)
	UpdateAccountUser(ctx context.Context, req *UpdateAccountUserReq, opts ...http.CallOption) (rsp *UpdateAccountUserResp, err error)
	UpdateDictData(ctx context.Context, req *UpdateDictDataReq, opts ...http.CallOption) (rsp *UpdateDictDataResp, err error)
	UpdateMenu(ctx context.Context, req *UpdateMenuReq, opts ...http.CallOption) (rsp *UpdateMenuResp, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleReq, opts ...http.CallOption) (rsp *UpdateRoleResp, err error)
	UpdateStaff(ctx context.Context, req *UpdateStaffReq, opts ...http.CallOption) (rsp *UpdateStaffResp, err error)
	UpdateSystem(ctx context.Context, req *UpdateSystemReq, opts ...http.CallOption) (rsp *UpdateSystemResp, err error)
	UpdateUser(ctx context.Context, req *UpdateUserReq, opts ...http.CallOption) (rsp *UpdateUserResp, err error)
}

type ShopAdminHTTPClientImpl struct {
	cc *http.Client
}

func NewShopAdminHTTPClient(client *http.Client) ShopAdminHTTPClient {
	return &ShopAdminHTTPClientImpl{client}
}

func (c *ShopAdminHTTPClientImpl) CreateAccountUser(ctx context.Context, in *CreateAccountUserReq, opts ...http.CallOption) (*CreateAccountUserResp, error) {
	var out CreateAccountUserResp
	pattern := "/api/account_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminCreateAccountUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) CreateDictData(ctx context.Context, in *CreateDictDataReq, opts ...http.CallOption) (*CreateDictDataResp, error) {
	var out CreateDictDataResp
	pattern := "/api/dict"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminCreateDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...http.CallOption) (*CreateMenuResp, error) {
	var out CreateMenuResp
	pattern := "/api/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminCreateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...http.CallOption) (*CreateRoleResp, error) {
	var out CreateRoleResp
	pattern := "/api/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminCreateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) CreateStaff(ctx context.Context, in *CreateStaffReq, opts ...http.CallOption) (*CreateStaffResp, error) {
	var out CreateStaffResp
	pattern := "/api/staff"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminCreateStaff))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) CreateSystem(ctx context.Context, in *CreateSystemReq, opts ...http.CallOption) (*CreateSystemResp, error) {
	var out CreateSystemResp
	pattern := "/api/account_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminCreateSystem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserReq, opts ...http.CallOption) (*CreateUserResp, error) {
	var out CreateUserResp
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteAccountUser(ctx context.Context, in *DeleteAccountUserReq, opts ...http.CallOption) (*DeleteAccountUserResp, error) {
	var out DeleteAccountUserResp
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminDeleteAccountUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteDictData(ctx context.Context, in *DeleteDictDataReq, opts ...http.CallOption) (*DeleteDictDataResp, error) {
	var out DeleteDictDataResp
	pattern := "/api/dict/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminDeleteDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...http.CallOption) (*DeleteMenuResp, error) {
	var out DeleteMenuResp
	pattern := "/api/menu/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminDeleteMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...http.CallOption) (*DeleteRoleResp, error) {
	var out DeleteRoleResp
	pattern := "/api/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminDeleteRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteStaff(ctx context.Context, in *DeleteStaffReq, opts ...http.CallOption) (*DeleteStaffResp, error) {
	var out DeleteStaffResp
	pattern := "/api/staff/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminDeleteStaff))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteSystem(ctx context.Context, in *DeleteSystemReq, opts ...http.CallOption) (*DeleteSystemResp, error) {
	var out DeleteSystemResp
	pattern := "/api/system/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminDeleteSystem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...http.CallOption) (*DeleteUserResp, error) {
	var out DeleteUserResp
	pattern := "/api/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetAccountUser(ctx context.Context, in *GetAccountUserReq, opts ...http.CallOption) (*GetAccountUserResp, error) {
	var out GetAccountUserResp
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetAccountUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetDictData(ctx context.Context, in *GetDictDataReq, opts ...http.CallOption) (*GetDictDataResp, error) {
	var out GetDictDataResp
	pattern := "/api/dict/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetMenu(ctx context.Context, in *GetMenuReq, opts ...http.CallOption) (*GetMenuResp, error) {
	var out GetMenuResp
	pattern := "/api/menu/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleReq, opts ...http.CallOption) (*GetRoleResp, error) {
	var out GetRoleResp
	pattern := "/api/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetStaff(ctx context.Context, in *GetStaffReq, opts ...http.CallOption) (*GetStaffResp, error) {
	var out GetStaffResp
	pattern := "/api/staff/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetStaff))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetSystem(ctx context.Context, in *GetSystemReq, opts ...http.CallOption) (*GetSystemResp, error) {
	var out GetSystemResp
	pattern := "/api/system/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetSystem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) GetUser(ctx context.Context, in *GetUserReq, opts ...http.CallOption) (*GetUserResp, error) {
	var out GetUserResp
	pattern := "/api/user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListAccountUser(ctx context.Context, in *ListAccountUserReq, opts ...http.CallOption) (*ListAccountUserResp, error) {
	var out ListAccountUserResp
	pattern := "/api/account_user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListAccountUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListDictData(ctx context.Context, in *ListDictDataReq, opts ...http.CallOption) (*ListDictDataResp, error) {
	var out ListDictDataResp
	pattern := "/api/dicts"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListMenu(ctx context.Context, in *ListMenuReq, opts ...http.CallOption) (*ListMenuResp, error) {
	var out ListMenuResp
	pattern := "/api/menu/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListRole(ctx context.Context, in *ListRoleReq, opts ...http.CallOption) (*ListRoleResp, error) {
	var out ListRoleResp
	pattern := "/api/role/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListStaff(ctx context.Context, in *ListStaffReq, opts ...http.CallOption) (*ListStaffResp, error) {
	var out ListStaffResp
	pattern := "/api/staff/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListStaff))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListSystem(ctx context.Context, in *ListSystemReq, opts ...http.CallOption) (*ListSystemResp, error) {
	var out ListSystemResp
	pattern := "/api/system/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListSystem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) ListUser(ctx context.Context, in *ListUserReq, opts ...http.CallOption) (*ListUserResp, error) {
	var out ListUserResp
	pattern := "/api/user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginResp, error) {
	var out LoginResp
	pattern := "/api/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) PageListAccountUser(ctx context.Context, in *PageListAccountUserReq, opts ...http.CallOption) (*PageListAccountUserResp, error) {
	var out PageListAccountUserResp
	pattern := "/api/account_user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminPageListAccountUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) PageListDictData(ctx context.Context, in *PageListDictDataReq, opts ...http.CallOption) (*PageListDictDataResp, error) {
	var out PageListDictDataResp
	pattern := "/api/dict"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminPageListDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) PageListMenu(ctx context.Context, in *PageListMenuReq, opts ...http.CallOption) (*PageListMenuResp, error) {
	var out PageListMenuResp
	pattern := "/api/menu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminPageListMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) PageListRole(ctx context.Context, in *PageListRoleReq, opts ...http.CallOption) (*PageListRoleResp, error) {
	var out PageListRoleResp
	pattern := "/api/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminPageListRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) PageListStaff(ctx context.Context, in *PageListStaffReq, opts ...http.CallOption) (*PageListStaffResp, error) {
	var out PageListStaffResp
	pattern := "/api/staff"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminPageListStaff))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) PageListSystem(ctx context.Context, in *PageListSystemReq, opts ...http.CallOption) (*PageListSystemResp, error) {
	var out PageListSystemResp
	pattern := "/api/system"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminPageListSystem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) PageListUser(ctx context.Context, in *PageListUserReq, opts ...http.CallOption) (*PageListUserResp, error) {
	var out PageListUserResp
	pattern := "/api/user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShopAdminPageListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterResp, error) {
	var out RegisterResp
	pattern := "/api/v1/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateAccountUser(ctx context.Context, in *UpdateAccountUserReq, opts ...http.CallOption) (*UpdateAccountUserResp, error) {
	var out UpdateAccountUserResp
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminUpdateAccountUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateDictData(ctx context.Context, in *UpdateDictDataReq, opts ...http.CallOption) (*UpdateDictDataResp, error) {
	var out UpdateDictDataResp
	pattern := "/api/dict/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminUpdateDictData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...http.CallOption) (*UpdateMenuResp, error) {
	var out UpdateMenuResp
	pattern := "/api/menu/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminUpdateMenu))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...http.CallOption) (*UpdateRoleResp, error) {
	var out UpdateRoleResp
	pattern := "/api/role/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminUpdateRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateStaff(ctx context.Context, in *UpdateStaffReq, opts ...http.CallOption) (*UpdateStaffResp, error) {
	var out UpdateStaffResp
	pattern := "/api/staff/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminUpdateStaff))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateSystem(ctx context.Context, in *UpdateSystemReq, opts ...http.CallOption) (*UpdateSystemResp, error) {
	var out UpdateSystemResp
	pattern := "/api/system/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminUpdateSystem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ShopAdminHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...http.CallOption) (*UpdateUserResp, error) {
	var out UpdateUserResp
	pattern := "/api/user/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShopAdminUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
