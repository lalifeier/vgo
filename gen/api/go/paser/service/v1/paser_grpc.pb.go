// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: paser/service/v1/paser.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaserClient is the client API for Paser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaserClient interface {
	Paser(ctx context.Context, in *PaserReq, opts ...grpc.CallOption) (*PaserReply, error)
}

type paserClient struct {
	cc grpc.ClientConnInterface
}

func NewPaserClient(cc grpc.ClientConnInterface) PaserClient {
	return &paserClient{cc}
}

func (c *paserClient) Paser(ctx context.Context, in *PaserReq, opts ...grpc.CallOption) (*PaserReply, error) {
	out := new(PaserReply)
	err := c.cc.Invoke(ctx, "/paser.service.v1.Paser/Paser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaserServer is the server API for Paser service.
// All implementations must embed UnimplementedPaserServer
// for forward compatibility
type PaserServer interface {
	Paser(context.Context, *PaserReq) (*PaserReply, error)
	mustEmbedUnimplementedPaserServer()
}

// UnimplementedPaserServer must be embedded to have forward compatible implementations.
type UnimplementedPaserServer struct {
}

func (UnimplementedPaserServer) Paser(context.Context, *PaserReq) (*PaserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paser not implemented")
}
func (UnimplementedPaserServer) mustEmbedUnimplementedPaserServer() {}

// UnsafePaserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaserServer will
// result in compilation errors.
type UnsafePaserServer interface {
	mustEmbedUnimplementedPaserServer()
}

func RegisterPaserServer(s grpc.ServiceRegistrar, srv PaserServer) {
	s.RegisterService(&Paser_ServiceDesc, srv)
}

func _Paser_Paser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaserServer).Paser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paser.service.v1.Paser/Paser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaserServer).Paser(ctx, req.(*PaserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Paser_ServiceDesc is the grpc.ServiceDesc for Paser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Paser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "paser.service.v1.Paser",
	HandlerType: (*PaserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Paser",
			Handler:    _Paser_Paser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "paser/service/v1/paser.proto",
}
