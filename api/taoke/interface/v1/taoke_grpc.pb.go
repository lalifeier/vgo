// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: v1/taoke.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TaoKeClient is the client API for TaoKe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaoKeClient interface {
	GetCarouseList(ctx context.Context, in *GetCarouseListReq, opts ...grpc.CallOption) (*GetCarouseListResp, error)
	GetSuperCategory(ctx context.Context, in *GetSuperCategoryReq, opts ...grpc.CallOption) (*GetSuperCategoryResp, error)
}

type taoKeClient struct {
	cc grpc.ClientConnInterface
}

func NewTaoKeClient(cc grpc.ClientConnInterface) TaoKeClient {
	return &taoKeClient{cc}
}

func (c *taoKeClient) GetCarouseList(ctx context.Context, in *GetCarouseListReq, opts ...grpc.CallOption) (*GetCarouseListResp, error) {
	out := new(GetCarouseListResp)
	err := c.cc.Invoke(ctx, "/api.taoke.interface.v1.TaoKe/GetCarouseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taoKeClient) GetSuperCategory(ctx context.Context, in *GetSuperCategoryReq, opts ...grpc.CallOption) (*GetSuperCategoryResp, error) {
	out := new(GetSuperCategoryResp)
	err := c.cc.Invoke(ctx, "/api.taoke.interface.v1.TaoKe/GetSuperCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaoKeServer is the server API for TaoKe service.
// All implementations must embed UnimplementedTaoKeServer
// for forward compatibility
type TaoKeServer interface {
	GetCarouseList(context.Context, *GetCarouseListReq) (*GetCarouseListResp, error)
	GetSuperCategory(context.Context, *GetSuperCategoryReq) (*GetSuperCategoryResp, error)
	mustEmbedUnimplementedTaoKeServer()
}

// UnimplementedTaoKeServer must be embedded to have forward compatible implementations.
type UnimplementedTaoKeServer struct {
}

func (UnimplementedTaoKeServer) GetCarouseList(context.Context, *GetCarouseListReq) (*GetCarouseListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarouseList not implemented")
}
func (UnimplementedTaoKeServer) GetSuperCategory(context.Context, *GetSuperCategoryReq) (*GetSuperCategoryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuperCategory not implemented")
}
func (UnimplementedTaoKeServer) mustEmbedUnimplementedTaoKeServer() {}

// UnsafeTaoKeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaoKeServer will
// result in compilation errors.
type UnsafeTaoKeServer interface {
	mustEmbedUnimplementedTaoKeServer()
}

func RegisterTaoKeServer(s grpc.ServiceRegistrar, srv TaoKeServer) {
	s.RegisterService(&TaoKe_ServiceDesc, srv)
}

func _TaoKe_GetCarouseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarouseListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoKeServer).GetCarouseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.taoke.interface.v1.TaoKe/GetCarouseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoKeServer).GetCarouseList(ctx, req.(*GetCarouseListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaoKe_GetSuperCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSuperCategoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaoKeServer).GetSuperCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.taoke.interface.v1.TaoKe/GetSuperCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaoKeServer).GetSuperCategory(ctx, req.(*GetSuperCategoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TaoKe_ServiceDesc is the grpc.ServiceDesc for TaoKe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaoKe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.taoke.interface.v1.TaoKe",
	HandlerType: (*TaoKeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCarouseList",
			Handler:    _TaoKe_GetCarouseList_Handler,
		},
		{
			MethodName: "GetSuperCategory",
			Handler:    _TaoKe_GetSuperCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/taoke.proto",
}
