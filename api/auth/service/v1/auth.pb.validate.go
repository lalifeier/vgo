// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/auth.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *System) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// SystemValidationError is the validation error returned by System.Validate if
// the designated constraints aren't met.
type SystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemValidationError) ErrorName() string { return "SystemValidationError" }

// Error satisfies the builtin error interface
func (e SystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemValidationError{}

// Validate checks the field values on CreateSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateSystemReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateSystemReqValidationError is the validation error returned by
// CreateSystemReq.Validate if the designated constraints aren't met.
type CreateSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemReqValidationError) ErrorName() string { return "CreateSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemReqValidationError{}

// Validate checks the field values on CreateSystemResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateSystemResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateSystemRespValidationError is the validation error returned by
// CreateSystemResp.Validate if the designated constraints aren't met.
type CreateSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSystemRespValidationError) ErrorName() string { return "CreateSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSystemRespValidationError{}

// Validate checks the field values on UpdateSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateSystemReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpdateSystemReqValidationError is the validation error returned by
// UpdateSystemReq.Validate if the designated constraints aren't met.
type UpdateSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemReqValidationError) ErrorName() string { return "UpdateSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemReqValidationError{}

// Validate checks the field values on UpdateSystemResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateSystemResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateSystemRespValidationError is the validation error returned by
// UpdateSystemResp.Validate if the designated constraints aren't met.
type UpdateSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSystemRespValidationError) ErrorName() string { return "UpdateSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSystemRespValidationError{}

// Validate checks the field values on DeleteSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteSystemReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteSystemReqValidationError is the validation error returned by
// DeleteSystemReq.Validate if the designated constraints aren't met.
type DeleteSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemReqValidationError) ErrorName() string { return "DeleteSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemReqValidationError{}

// Validate checks the field values on DeleteSystemResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteSystemResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteSystemRespValidationError is the validation error returned by
// DeleteSystemResp.Validate if the designated constraints aren't met.
type DeleteSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSystemRespValidationError) ErrorName() string { return "DeleteSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSystemRespValidationError{}

// Validate checks the field values on GetSystemReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetSystemReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetSystemReqValidationError is the validation error returned by
// GetSystemReq.Validate if the designated constraints aren't met.
type GetSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemReqValidationError) ErrorName() string { return "GetSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e GetSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemReqValidationError{}

// Validate checks the field values on GetSystemResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetSystemResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetSystemRespValidationError is the validation error returned by
// GetSystemResp.Validate if the designated constraints aren't met.
type GetSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSystemRespValidationError) ErrorName() string { return "GetSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e GetSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSystemRespValidationError{}

// Validate checks the field values on ListSystemReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListSystemReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListSystemReqValidationError is the validation error returned by
// ListSystemReq.Validate if the designated constraints aren't met.
type ListSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemReqValidationError) ErrorName() string { return "ListSystemReqValidationError" }

// Error satisfies the builtin error interface
func (e ListSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemReqValidationError{}

// Validate checks the field values on ListSystemResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListSystemResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSystemRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSystemRespValidationError is the validation error returned by
// ListSystemResp.Validate if the designated constraints aren't met.
type ListSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSystemRespValidationError) ErrorName() string { return "ListSystemRespValidationError" }

// Error satisfies the builtin error interface
func (e ListSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSystemRespValidationError{}

// Validate checks the field values on PageListSystemReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PageListSystemReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// PageListSystemReqValidationError is the validation error returned by
// PageListSystemReq.Validate if the designated constraints aren't met.
type PageListSystemReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListSystemReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListSystemReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListSystemReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListSystemReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListSystemReqValidationError) ErrorName() string {
	return "PageListSystemReqValidationError"
}

// Error satisfies the builtin error interface
func (e PageListSystemReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListSystemReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListSystemReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListSystemReqValidationError{}

// Validate checks the field values on PageListSystemResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *PageListSystemResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListSystemRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	return nil
}

// PageListSystemRespValidationError is the validation error returned by
// PageListSystemResp.Validate if the designated constraints aren't met.
type PageListSystemRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListSystemRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListSystemRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListSystemRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListSystemRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListSystemRespValidationError) ErrorName() string {
	return "PageListSystemRespValidationError"
}

// Error satisfies the builtin error interface
func (e PageListSystemRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListSystemResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListSystemRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListSystemRespValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Role) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on CreateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateRoleReqValidationError is the validation error returned by
// CreateRoleReq.Validate if the designated constraints aren't met.
type CreateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleReqValidationError) ErrorName() string { return "CreateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleReqValidationError{}

// Validate checks the field values on CreateRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateRoleResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateRoleRespValidationError is the validation error returned by
// CreateRoleResp.Validate if the designated constraints aren't met.
type CreateRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRespValidationError) ErrorName() string { return "CreateRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRespValidationError{}

// Validate checks the field values on UpdateRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpdateRoleReqValidationError is the validation error returned by
// UpdateRoleReq.Validate if the designated constraints aren't met.
type UpdateRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleReqValidationError) ErrorName() string { return "UpdateRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleReqValidationError{}

// Validate checks the field values on UpdateRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateRoleResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateRoleRespValidationError is the validation error returned by
// UpdateRoleResp.Validate if the designated constraints aren't met.
type UpdateRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRoleRespValidationError) ErrorName() string { return "UpdateRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRoleRespValidationError{}

// Validate checks the field values on DeleteRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteRoleReqValidationError is the validation error returned by
// DeleteRoleReq.Validate if the designated constraints aren't met.
type DeleteRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleReqValidationError) ErrorName() string { return "DeleteRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleReqValidationError{}

// Validate checks the field values on DeleteRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteRoleResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteRoleRespValidationError is the validation error returned by
// DeleteRoleResp.Validate if the designated constraints aren't met.
type DeleteRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRespValidationError) ErrorName() string { return "DeleteRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRespValidationError{}

// Validate checks the field values on GetRoleReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetRoleReqValidationError is the validation error returned by
// GetRoleReq.Validate if the designated constraints aren't met.
type GetRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleReqValidationError) ErrorName() string { return "GetRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleReqValidationError{}

// Validate checks the field values on GetRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetRoleResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetRoleRespValidationError is the validation error returned by
// GetRoleResp.Validate if the designated constraints aren't met.
type GetRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRespValidationError) ErrorName() string { return "GetRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRespValidationError{}

// Validate checks the field values on ListRoleReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListRoleReqValidationError is the validation error returned by
// ListRoleReq.Validate if the designated constraints aren't met.
type ListRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleReqValidationError) ErrorName() string { return "ListRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleReqValidationError{}

// Validate checks the field values on ListRoleResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListRoleResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRoleRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRoleRespValidationError is the validation error returned by
// ListRoleResp.Validate if the designated constraints aren't met.
type ListRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRoleRespValidationError) ErrorName() string { return "ListRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e ListRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRoleRespValidationError{}

// Validate checks the field values on PageListRoleReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PageListRoleReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// PageListRoleReqValidationError is the validation error returned by
// PageListRoleReq.Validate if the designated constraints aren't met.
type PageListRoleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListRoleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListRoleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListRoleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListRoleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListRoleReqValidationError) ErrorName() string { return "PageListRoleReqValidationError" }

// Error satisfies the builtin error interface
func (e PageListRoleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListRoleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListRoleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListRoleReqValidationError{}

// Validate checks the field values on PageListRoleResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PageListRoleResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListRoleRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	return nil
}

// PageListRoleRespValidationError is the validation error returned by
// PageListRoleResp.Validate if the designated constraints aren't met.
type PageListRoleRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListRoleRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListRoleRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListRoleRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListRoleRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListRoleRespValidationError) ErrorName() string { return "PageListRoleRespValidationError" }

// Error satisfies the builtin error interface
func (e PageListRoleRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListRoleResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListRoleRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListRoleRespValidationError{}

// Validate checks the field values on Menu with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Menu) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// MenuValidationError is the validation error returned by Menu.Validate if the
// designated constraints aren't met.
type MenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuValidationError) ErrorName() string { return "MenuValidationError" }

// Error satisfies the builtin error interface
func (e MenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuValidationError{}

// Validate checks the field values on CreateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateMenuReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateMenuReqValidationError is the validation error returned by
// CreateMenuReq.Validate if the designated constraints aren't met.
type CreateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuReqValidationError) ErrorName() string { return "CreateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuReqValidationError{}

// Validate checks the field values on CreateMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateMenuResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateMenuRespValidationError is the validation error returned by
// CreateMenuResp.Validate if the designated constraints aren't met.
type CreateMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMenuRespValidationError) ErrorName() string { return "CreateMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMenuRespValidationError{}

// Validate checks the field values on UpdateMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateMenuReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// UpdateMenuReqValidationError is the validation error returned by
// UpdateMenuReq.Validate if the designated constraints aren't met.
type UpdateMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuReqValidationError) ErrorName() string { return "UpdateMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuReqValidationError{}

// Validate checks the field values on UpdateMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateMenuResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateMenuRespValidationError is the validation error returned by
// UpdateMenuResp.Validate if the designated constraints aren't met.
type UpdateMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMenuRespValidationError) ErrorName() string { return "UpdateMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMenuRespValidationError{}

// Validate checks the field values on DeleteMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteMenuReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteMenuReqValidationError is the validation error returned by
// DeleteMenuReq.Validate if the designated constraints aren't met.
type DeleteMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuReqValidationError) ErrorName() string { return "DeleteMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuReqValidationError{}

// Validate checks the field values on DeleteMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DeleteMenuResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteMenuRespValidationError is the validation error returned by
// DeleteMenuResp.Validate if the designated constraints aren't met.
type DeleteMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMenuRespValidationError) ErrorName() string { return "DeleteMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMenuRespValidationError{}

// Validate checks the field values on GetMenuReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetMenuReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetMenuReqValidationError is the validation error returned by
// GetMenuReq.Validate if the designated constraints aren't met.
type GetMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuReqValidationError) ErrorName() string { return "GetMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuReqValidationError{}

// Validate checks the field values on GetMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetMenuResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetMenuRespValidationError is the validation error returned by
// GetMenuResp.Validate if the designated constraints aren't met.
type GetMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMenuRespValidationError) ErrorName() string { return "GetMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e GetMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMenuRespValidationError{}

// Validate checks the field values on ListMenuReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListMenuReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMenuReqValidationError is the validation error returned by
// ListMenuReq.Validate if the designated constraints aren't met.
type ListMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuReqValidationError) ErrorName() string { return "ListMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuReqValidationError{}

// Validate checks the field values on ListMenuResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListMenuResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMenuRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMenuRespValidationError is the validation error returned by
// ListMenuResp.Validate if the designated constraints aren't met.
type ListMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMenuRespValidationError) ErrorName() string { return "ListMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e ListMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMenuRespValidationError{}

// Validate checks the field values on PageListMenuReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PageListMenuReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// PageListMenuReqValidationError is the validation error returned by
// PageListMenuReq.Validate if the designated constraints aren't met.
type PageListMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListMenuReqValidationError) ErrorName() string { return "PageListMenuReqValidationError" }

// Error satisfies the builtin error interface
func (e PageListMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListMenuReqValidationError{}

// Validate checks the field values on PageListMenuResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *PageListMenuResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PageListMenuRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	return nil
}

// PageListMenuRespValidationError is the validation error returned by
// PageListMenuResp.Validate if the designated constraints aren't met.
type PageListMenuRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageListMenuRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageListMenuRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageListMenuRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageListMenuRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageListMenuRespValidationError) ErrorName() string { return "PageListMenuRespValidationError" }

// Error satisfies the builtin error interface
func (e PageListMenuRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageListMenuResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageListMenuRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageListMenuRespValidationError{}
