syntax = "proto3";

package api.auth.service.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/lalifeier/vvgo-mall/api/auth/service/v1;v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info : {title : "auth";
version : "1.0";
}
;
}
;

service Auth {
  rpc GetCaptcha(GetCaptchaReq) returns (GetCaptchaResp) {
    option (google.api.http) = {
      get : "/api/getCaptcha"
    };
  }

  rpc VerifyCaptcha(VerifyCaptchaReq) returns (VerifyCaptchaResp) {
    option (google.api.http) = {
      post : "/api/verifyCaptcha"
      body : "*"
    };
  }

  // rpc Authorize(AuthorizeReq) returns (AuthorizeResp) {
  //   option (google.api.http) = {
  //     post : "/api/authorize"
  //     body : "*"
  //   };
  // }

  // rpc Token(TokenReq) returns (TokenResp) {
  //   option (google.api.http) = {
  //     post : "/api/token"
  //     body : "*"
  //   };
  // }

  // rpc Verify(VerifyReq) returns (VerifyResp) {
  //   option (google.api.http) = {
  //     get : "/api/verify"
  //   };
  // }

  // rpc RefreshToken(RefreshTokenReq) returns (RefreshTokenResp) {
  //   option (google.api.http) = {
  //     post : "/api/refresh_token"
  //     body : "*"
  //   };
  // }

  // rpc Logout(LogoutReq) returns (LogoutResp) {
  //   option (google.api.http) = {
  //     get : "/api/logout"
  //   };
  // }
}

message GetCaptchaReq {}
message GetCaptchaResp {
  string captcha_id = 1;
  string img_bytes = 2;
}

message VerifyCaptchaReq {
  string captcha_id = 1;
  string captcha_code = 2;
}
message VerifyCaptchaResp {}

message AuthorizeReq {
  string client_id = 1;
  string response_type = 2;
  string scope = 3;
  string state = 4;
  string redirect_uri = 5;
}
message AuthorizeResp {}

message TokenReq {
  string grant_type = 1;
  string code = 2;
  string client_id = 3;
}
message TokenResp {
  string access_token = 1;
  int64 expires_in = 2;
  string refresh_token = 3;
  string scope = 4;
  string token_type = 5;
}

// Token : Bearer access_token
message VerifyReq {}
message VerifyResp {
  string client_id = 1;
  string domain = 2;
  int64 expires_in = 3;
  string scope = 4;
  string user_id = 5;
}

message RefreshTokenReq {
  string grant_type = 1;
  string refresh_token = 2;
}
message RefreshTokenResp {
  string access_token = 1;
  int64 expires_in = 2;
  string refresh_token = 3;
  string scope = 4;
  string token_type = 5;
}

message LogoutReq { string redirect_uri = 1; }
message LogoutResp {}
