// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/paser.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on PaserReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PaserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// PaserReqValidationError is the validation error returned by
// PaserReq.Validate if the designated constraints aren't met.
type PaserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaserReqValidationError) ErrorName() string { return "PaserReqValidationError" }

// Error satisfies the builtin error interface
func (e PaserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaserReqValidationError{}

// Validate checks the field values on Part with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Part) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Size

	// no validation rules for Url

	// no validation rules for Ext

	return nil
}

// PartValidationError is the validation error returned by Part.Validate if the
// designated constraints aren't met.
type PartValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PartValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PartValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PartValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PartValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PartValidationError) ErrorName() string { return "PartValidationError" }

// Error satisfies the builtin error interface
func (e PartValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPart.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PartValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PartValidationError{}

// Validate checks the field values on Stream with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Stream) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Quality

	for idx, item := range m.GetParts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamValidationError{
					field:  fmt.Sprintf("Parts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Size

	// no validation rules for Ext

	return nil
}

// StreamValidationError is the validation error returned by Stream.Validate if
// the designated constraints aren't met.
type StreamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamValidationError) ErrorName() string { return "StreamValidationError" }

// Error satisfies the builtin error interface
func (e StreamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStream.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamValidationError{}

// Validate checks the field values on PaserReply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PaserReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Site

	// no validation rules for Title

	// no validation rules for Type

	for key, val := range m.GetStreams() {
		_ = val

		// no validation rules for Streams[key]

		if v, ok := interface{}(val).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaserReplyValidationError{
					field:  fmt.Sprintf("Streams[%v]", key),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Url

	return nil
}

// PaserReplyValidationError is the validation error returned by
// PaserReply.Validate if the designated constraints aren't met.
type PaserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaserReplyValidationError) ErrorName() string { return "PaserReplyValidationError" }

// Error satisfies the builtin error interface
func (e PaserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaserReplyValidationError{}
