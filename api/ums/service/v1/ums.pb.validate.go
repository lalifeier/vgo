// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/ums.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on RegisterReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// RegisterReqValidationError is the validation error returned by
// RegisterReq.Validate if the designated constraints aren't met.
type RegisterReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterReqValidationError) ErrorName() string { return "RegisterReqValidationError" }

// Error satisfies the builtin error interface
func (e RegisterReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterReqValidationError{}

// Validate checks the field values on RegisterResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *RegisterResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// RegisterRespValidationError is the validation error returned by
// RegisterResp.Validate if the designated constraints aren't met.
type RegisterRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRespValidationError) ErrorName() string { return "RegisterRespValidationError" }

// Error satisfies the builtin error interface
func (e RegisterRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRespValidationError{}

// Validate checks the field values on LoginReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Code

	// no validation rules for Type

	return nil
}

// LoginReqValidationError is the validation error returned by
// LoginReq.Validate if the designated constraints aren't met.
type LoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginReqValidationError) ErrorName() string { return "LoginReqValidationError" }

// Error satisfies the builtin error interface
func (e LoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginReqValidationError{}

// Validate checks the field values on LoginResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LoginResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LoginRespValidationError is the validation error returned by
// LoginResp.Validate if the designated constraints aren't met.
type LoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRespValidationError) ErrorName() string { return "LoginRespValidationError" }

// Error satisfies the builtin error interface
func (e LoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRespValidationError{}

// Validate checks the field values on LogoutReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LogoutReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LogoutReqValidationError is the validation error returned by
// LogoutReq.Validate if the designated constraints aren't met.
type LogoutReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutReqValidationError) ErrorName() string { return "LogoutReqValidationError" }

// Error satisfies the builtin error interface
func (e LogoutReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutReqValidationError{}

// Validate checks the field values on LogoutResp with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LogoutResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// LogoutRespValidationError is the validation error returned by
// LogoutResp.Validate if the designated constraints aren't met.
type LogoutRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRespValidationError) ErrorName() string { return "LogoutRespValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRespValidationError{}

// Validate checks the field values on AccountUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccountUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	return nil
}

// AccountUserValidationError is the validation error returned by
// AccountUser.Validate if the designated constraints aren't met.
type AccountUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccountUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccountUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccountUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccountUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccountUserValidationError) ErrorName() string { return "AccountUserValidationError" }

// Error satisfies the builtin error interface
func (e AccountUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccountUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccountUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccountUserValidationError{}

// Validate checks the field values on CreateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccountUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	return nil
}

// CreateAccountUserReqValidationError is the validation error returned by
// CreateAccountUserReq.Validate if the designated constraints aren't met.
type CreateAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountUserReqValidationError) ErrorName() string {
	return "CreateAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountUserReqValidationError{}

// Validate checks the field values on CreateAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccountUserResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateAccountUserRespValidationError is the validation error returned by
// CreateAccountUserResp.Validate if the designated constraints aren't met.
type CreateAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountUserRespValidationError) ErrorName() string {
	return "CreateAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountUserRespValidationError{}

// Validate checks the field values on UpdateAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAccountUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	return nil
}

// UpdateAccountUserReqValidationError is the validation error returned by
// UpdateAccountUserReq.Validate if the designated constraints aren't met.
type UpdateAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountUserReqValidationError) ErrorName() string {
	return "UpdateAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountUserReqValidationError{}

// Validate checks the field values on DeleteAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAccountUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteAccountUserReqValidationError is the validation error returned by
// DeleteAccountUserReq.Validate if the designated constraints aren't met.
type DeleteAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountUserReqValidationError) ErrorName() string {
	return "DeleteAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountUserReqValidationError{}

// Validate checks the field values on GetAccountUserReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAccountUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetAccountUserReqValidationError is the validation error returned by
// GetAccountUserReq.Validate if the designated constraints aren't met.
type GetAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUserReqValidationError) ErrorName() string {
	return "GetAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUserReqValidationError{}

// Validate checks the field values on GetAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountUserResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Email

	// no validation rules for Phone

	return nil
}

// GetAccountUserRespValidationError is the validation error returned by
// GetAccountUserResp.Validate if the designated constraints aren't met.
type GetAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUserRespValidationError) ErrorName() string {
	return "GetAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUserRespValidationError{}

// Validate checks the field values on ListAccountUserReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAccountUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PageNum

	// no validation rules for PageSize

	return nil
}

// ListAccountUserReqValidationError is the validation error returned by
// ListAccountUserReq.Validate if the designated constraints aren't met.
type ListAccountUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountUserReqValidationError) ErrorName() string {
	return "ListAccountUserReqValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountUserReqValidationError{}

// Validate checks the field values on ListAccountUserResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAccountUserResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	// no validation rules for CurrentPage

	// no validation rules for PageSize

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAccountUserRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAccountUserRespValidationError is the validation error returned by
// ListAccountUserResp.Validate if the designated constraints aren't met.
type ListAccountUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountUserRespValidationError) ErrorName() string {
	return "ListAccountUserRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountUserRespValidationError{}
