// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AccountHTTPServer interface {
	AccountInfo(context.Context, *AccountInfoRequest) (*AccountInfoReply, error)
	CreateAccountUser(context.Context, *AccountUserRequest) (*AccountUser, error)
	DeleteAccountUser(context.Context, *DeleteAccountUserRequest) (*emptypb.Empty, error)
	ForgetPassword(context.Context, *ForgetPasswordRequest) (*emptypb.Empty, error)
	GetAccountUser(context.Context, *GetAccountUserRequest) (*AccountUser, error)
	ListAccountUser(context.Context, *AccountUserListRequest) (*AccountUserList, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*emptypb.Empty, error)
	UpdateAccountUser(context.Context, *AccountUserRequest) (*AccountUser, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/account/register", _Account_Register0_HTTP_Handler(srv))
	r.POST("/v1/account/login", _Account_Login0_HTTP_Handler(srv))
	r.POST("/v1/account/logout", _Account_Logout0_HTTP_Handler(srv))
	r.GET("/v1/account/info", _Account_AccountInfo0_HTTP_Handler(srv))
	r.POST("/v1/account/reset-password", _Account_ResetPassword0_HTTP_Handler(srv))
	r.POST("/v1/account/forget-password", _Account_ForgetPassword0_HTTP_Handler(srv))
	r.POST("/v1/account_user", _Account_CreateAccountUser0_HTTP_Handler(srv))
	r.PUT("/v1/account_user/{id}", _Account_UpdateAccountUser0_HTTP_Handler(srv))
	r.DELETE("/v1/account_user/{id}", _Account_DeleteAccountUser0_HTTP_Handler(srv))
	r.GET("/v1/account_user/{id}", _Account_GetAccountUser0_HTTP_Handler(srv))
	r.GET("/v1/account_user", _Account_ListAccountUser0_HTTP_Handler(srv))
}

func _Account_Register0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _Account_Login0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _Account_Logout0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _Account_AccountInfo0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/AccountInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AccountInfo(ctx, req.(*AccountInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Account_ResetPassword0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ResetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/ResetPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ResetPassword(ctx, req.(*ResetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Account_ForgetPassword0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ForgetPasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/ForgetPassword")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ForgetPassword(ctx, req.(*ForgetPasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Account_CreateAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/CreateAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccountUser(ctx, req.(*AccountUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountUser)
		return ctx.Result(200, reply)
	}
}

func _Account_UpdateAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/UpdateAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccountUser(ctx, req.(*AccountUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountUser)
		return ctx.Result(200, reply)
	}
}

func _Account_DeleteAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAccountUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/DeleteAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccountUser(ctx, req.(*DeleteAccountUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Account_GetAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/GetAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountUser(ctx, req.(*GetAccountUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountUser)
		return ctx.Result(200, reply)
	}
}

func _Account_ListAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AccountUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.account.service.v1.Account/ListAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccountUser(ctx, req.(*AccountUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AccountUserList)
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	AccountInfo(ctx context.Context, req *AccountInfoRequest, opts ...http.CallOption) (rsp *AccountInfoReply, err error)
	CreateAccountUser(ctx context.Context, req *AccountUserRequest, opts ...http.CallOption) (rsp *AccountUser, err error)
	DeleteAccountUser(ctx context.Context, req *DeleteAccountUserRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	ForgetPassword(ctx context.Context, req *ForgetPasswordRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAccountUser(ctx context.Context, req *GetAccountUserRequest, opts ...http.CallOption) (rsp *AccountUser, err error)
	ListAccountUser(ctx context.Context, req *AccountUserListRequest, opts ...http.CallOption) (rsp *AccountUserList, err error)
	Login(ctx context.Context, req *LoginRequest, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	ResetPassword(ctx context.Context, req *ResetPasswordRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	UpdateAccountUser(ctx context.Context, req *AccountUserRequest, opts ...http.CallOption) (rsp *AccountUser, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) AccountInfo(ctx context.Context, in *AccountInfoRequest, opts ...http.CallOption) (*AccountInfoReply, error) {
	var out AccountInfoReply
	pattern := "/v1/account/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/AccountInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) CreateAccountUser(ctx context.Context, in *AccountUserRequest, opts ...http.CallOption) (*AccountUser, error) {
	var out AccountUser
	pattern := "/v1/account_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/CreateAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) DeleteAccountUser(ctx context.Context, in *DeleteAccountUserRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/account_user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/DeleteAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ForgetPassword(ctx context.Context, in *ForgetPasswordRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/account/forget-password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/ForgetPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) GetAccountUser(ctx context.Context, in *GetAccountUserRequest, opts ...http.CallOption) (*AccountUser, error) {
	var out AccountUser
	pattern := "/v1/account_user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/GetAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ListAccountUser(ctx context.Context, in *AccountUserListRequest, opts ...http.CallOption) (*AccountUserList, error) {
	var out AccountUserList
	pattern := "/v1/account_user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/ListAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Login(ctx context.Context, in *LoginRequest, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/v1/account/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/v1/account/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/v1/account/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/account/reset-password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/ResetPassword"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) UpdateAccountUser(ctx context.Context, in *AccountUserRequest, opts ...http.CallOption) (*AccountUser, error) {
	var out AccountUser
	pattern := "/v1/account_user/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.account.service.v1.Account/UpdateAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
