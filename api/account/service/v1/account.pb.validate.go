// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/account.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateAccountUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccountUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for Username

	// no validation rules for Password

	return nil
}

// CreateAccountUserRequestValidationError is the validation error returned by
// CreateAccountUserRequest.Validate if the designated constraints aren't met.
type CreateAccountUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountUserRequestValidationError) ErrorName() string {
	return "CreateAccountUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountUserRequestValidationError{}

// Validate checks the field values on CreateAccountUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccountUserReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// CreateAccountUserReplyValidationError is the validation error returned by
// CreateAccountUserReply.Validate if the designated constraints aren't met.
type CreateAccountUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountUserReplyValidationError) ErrorName() string {
	return "CreateAccountUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountUserReplyValidationError{}

// Validate checks the field values on UpdateAccountUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAccountUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateAccountUserRequestValidationError is the validation error returned by
// UpdateAccountUserRequest.Validate if the designated constraints aren't met.
type UpdateAccountUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountUserRequestValidationError) ErrorName() string {
	return "UpdateAccountUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountUserRequestValidationError{}

// Validate checks the field values on UpdateAccountUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAccountUserReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateAccountUserReplyValidationError is the validation error returned by
// UpdateAccountUserReply.Validate if the designated constraints aren't met.
type UpdateAccountUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountUserReplyValidationError) ErrorName() string {
	return "UpdateAccountUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountUserReplyValidationError{}

// Validate checks the field values on DeleteAccountUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAccountUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteAccountUserRequestValidationError is the validation error returned by
// DeleteAccountUserRequest.Validate if the designated constraints aren't met.
type DeleteAccountUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountUserRequestValidationError) ErrorName() string {
	return "DeleteAccountUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountUserRequestValidationError{}

// Validate checks the field values on DeleteAccountUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAccountUserReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteAccountUserReplyValidationError is the validation error returned by
// DeleteAccountUserReply.Validate if the designated constraints aren't met.
type DeleteAccountUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountUserReplyValidationError) ErrorName() string {
	return "DeleteAccountUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountUserReplyValidationError{}

// Validate checks the field values on GetAccountUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetAccountUserRequestValidationError is the validation error returned by
// GetAccountUserRequest.Validate if the designated constraints aren't met.
type GetAccountUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUserRequestValidationError) ErrorName() string {
	return "GetAccountUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUserRequestValidationError{}

// Validate checks the field values on GetAccountUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountUserReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetAccountUserReplyValidationError is the validation error returned by
// GetAccountUserReply.Validate if the designated constraints aren't met.
type GetAccountUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountUserReplyValidationError) ErrorName() string {
	return "GetAccountUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountUserReplyValidationError{}

// Validate checks the field values on ListAccountUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAccountUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAccountUserRequestValidationError is the validation error returned by
// ListAccountUserRequest.Validate if the designated constraints aren't met.
type ListAccountUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountUserRequestValidationError) ErrorName() string {
	return "ListAccountUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountUserRequestValidationError{}

// Validate checks the field values on ListAccountUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAccountUserReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAccountUserReplyValidationError is the validation error returned by
// ListAccountUserReply.Validate if the designated constraints aren't met.
type ListAccountUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountUserReplyValidationError) ErrorName() string {
	return "ListAccountUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountUserReplyValidationError{}

// Validate checks the field values on CreateAccountPlatformRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccountPlatformRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uid

	// no validation rules for PlatformId

	// no validation rules for PlatformToken

	// no validation rules for Type

	// no validation rules for Nickname

	// no validation rules for Avatar

	return nil
}

// CreateAccountPlatformRequestValidationError is the validation error returned
// by CreateAccountPlatformRequest.Validate if the designated constraints
// aren't met.
type CreateAccountPlatformRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountPlatformRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountPlatformRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountPlatformRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountPlatformRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountPlatformRequestValidationError) ErrorName() string {
	return "CreateAccountPlatformRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountPlatformRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountPlatformRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountPlatformRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountPlatformRequestValidationError{}

// Validate checks the field values on CreateAccountPlatformReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateAccountPlatformReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateAccountPlatformReplyValidationError is the validation error returned
// by CreateAccountPlatformReply.Validate if the designated constraints aren't met.
type CreateAccountPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountPlatformReplyValidationError) ErrorName() string {
	return "CreateAccountPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountPlatformReplyValidationError{}

// Validate checks the field values on UpdateAccountPlatformRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAccountPlatformRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateAccountPlatformRequestValidationError is the validation error returned
// by UpdateAccountPlatformRequest.Validate if the designated constraints
// aren't met.
type UpdateAccountPlatformRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountPlatformRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountPlatformRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountPlatformRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountPlatformRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountPlatformRequestValidationError) ErrorName() string {
	return "UpdateAccountPlatformRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountPlatformRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountPlatformRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountPlatformRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountPlatformRequestValidationError{}

// Validate checks the field values on UpdateAccountPlatformReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAccountPlatformReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateAccountPlatformReplyValidationError is the validation error returned
// by UpdateAccountPlatformReply.Validate if the designated constraints aren't met.
type UpdateAccountPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAccountPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAccountPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAccountPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAccountPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAccountPlatformReplyValidationError) ErrorName() string {
	return "UpdateAccountPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAccountPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAccountPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAccountPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAccountPlatformReplyValidationError{}

// Validate checks the field values on DeleteAccountPlatformRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAccountPlatformRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteAccountPlatformRequestValidationError is the validation error returned
// by DeleteAccountPlatformRequest.Validate if the designated constraints
// aren't met.
type DeleteAccountPlatformRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountPlatformRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountPlatformRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountPlatformRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountPlatformRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountPlatformRequestValidationError) ErrorName() string {
	return "DeleteAccountPlatformRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountPlatformRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountPlatformRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountPlatformRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountPlatformRequestValidationError{}

// Validate checks the field values on DeleteAccountPlatformReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteAccountPlatformReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteAccountPlatformReplyValidationError is the validation error returned
// by DeleteAccountPlatformReply.Validate if the designated constraints aren't met.
type DeleteAccountPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAccountPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAccountPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAccountPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAccountPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAccountPlatformReplyValidationError) ErrorName() string {
	return "DeleteAccountPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAccountPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAccountPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAccountPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAccountPlatformReplyValidationError{}

// Validate checks the field values on GetAccountPlatformRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountPlatformRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetAccountPlatformRequestValidationError is the validation error returned by
// GetAccountPlatformRequest.Validate if the designated constraints aren't met.
type GetAccountPlatformRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountPlatformRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountPlatformRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountPlatformRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountPlatformRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountPlatformRequestValidationError) ErrorName() string {
	return "GetAccountPlatformRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountPlatformRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountPlatformRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountPlatformRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountPlatformRequestValidationError{}

// Validate checks the field values on GetAccountPlatformReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAccountPlatformReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetAccountPlatformReplyValidationError is the validation error returned by
// GetAccountPlatformReply.Validate if the designated constraints aren't met.
type GetAccountPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountPlatformReplyValidationError) ErrorName() string {
	return "GetAccountPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountPlatformReplyValidationError{}

// Validate checks the field values on ListAccountPlatformRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAccountPlatformRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAccountPlatformRequestValidationError is the validation error returned
// by ListAccountPlatformRequest.Validate if the designated constraints aren't met.
type ListAccountPlatformRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountPlatformRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountPlatformRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountPlatformRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountPlatformRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountPlatformRequestValidationError) ErrorName() string {
	return "ListAccountPlatformRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountPlatformRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountPlatformRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountPlatformRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountPlatformRequestValidationError{}

// Validate checks the field values on ListAccountPlatformReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAccountPlatformReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAccountPlatformReplyValidationError is the validation error returned by
// ListAccountPlatformReply.Validate if the designated constraints aren't met.
type ListAccountPlatformReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAccountPlatformReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAccountPlatformReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAccountPlatformReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAccountPlatformReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAccountPlatformReplyValidationError) ErrorName() string {
	return "ListAccountPlatformReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListAccountPlatformReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAccountPlatformReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAccountPlatformReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAccountPlatformReplyValidationError{}
