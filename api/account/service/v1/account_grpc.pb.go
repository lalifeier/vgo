// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: v1/account.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountClient is the client API for Account service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	CreateAccountUser(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*AccountUser, error)
	UpdateAccountUser(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*AccountUser, error)
	DeleteAccountUser(ctx context.Context, in *DeleteAccountUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAccountUser(ctx context.Context, in *GetAccountUserReq, opts ...grpc.CallOption) (*AccountUser, error)
	ListAccountUser(ctx context.Context, in *ListAccountUserReq, opts ...grpc.CallOption) (*ListAccountUserResp, error)
	PageListAccountUser(ctx context.Context, in *PageListAccountUserReq, opts ...grpc.CallOption) (*PageListAccountUserResp, error)
	CreateStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*Staff, error)
	UpdateStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*Staff, error)
	DeleteStaff(ctx context.Context, in *DeleteStaffReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetStaff(ctx context.Context, in *GetStaffReq, opts ...grpc.CallOption) (*Staff, error)
	ListStaff(ctx context.Context, in *ListStaffReq, opts ...grpc.CallOption) (*ListStaffResp, error)
	PageListStaff(ctx context.Context, in *PageListStaffReq, opts ...grpc.CallOption) (*PageListStaffResp, error)
}

type accountClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountClient(cc grpc.ClientConnInterface) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CreateAccountUser(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*AccountUser, error) {
	out := new(AccountUser)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/CreateAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateAccountUser(ctx context.Context, in *AccountUser, opts ...grpc.CallOption) (*AccountUser, error) {
	out := new(AccountUser)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/UpdateAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DeleteAccountUser(ctx context.Context, in *DeleteAccountUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/DeleteAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetAccountUser(ctx context.Context, in *GetAccountUserReq, opts ...grpc.CallOption) (*AccountUser, error) {
	out := new(AccountUser)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/GetAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ListAccountUser(ctx context.Context, in *ListAccountUserReq, opts ...grpc.CallOption) (*ListAccountUserResp, error) {
	out := new(ListAccountUserResp)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/ListAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) PageListAccountUser(ctx context.Context, in *PageListAccountUserReq, opts ...grpc.CallOption) (*PageListAccountUserResp, error) {
	out := new(PageListAccountUserResp)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/PageListAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) CreateStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*Staff, error) {
	out := new(Staff)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/CreateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) UpdateStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*Staff, error) {
	out := new(Staff)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/UpdateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) DeleteStaff(ctx context.Context, in *DeleteStaffReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/DeleteStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetStaff(ctx context.Context, in *GetStaffReq, opts ...grpc.CallOption) (*Staff, error) {
	out := new(Staff)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/GetStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) ListStaff(ctx context.Context, in *ListStaffReq, opts ...grpc.CallOption) (*ListStaffResp, error) {
	out := new(ListStaffResp)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/ListStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) PageListStaff(ctx context.Context, in *PageListStaffReq, opts ...grpc.CallOption) (*PageListStaffResp, error) {
	out := new(PageListStaffResp)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.Account/PageListStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServer is the server API for Account service.
// All implementations must embed UnimplementedAccountServer
// for forward compatibility
type AccountServer interface {
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	CreateAccountUser(context.Context, *AccountUser) (*AccountUser, error)
	UpdateAccountUser(context.Context, *AccountUser) (*AccountUser, error)
	DeleteAccountUser(context.Context, *DeleteAccountUserReq) (*emptypb.Empty, error)
	GetAccountUser(context.Context, *GetAccountUserReq) (*AccountUser, error)
	ListAccountUser(context.Context, *ListAccountUserReq) (*ListAccountUserResp, error)
	PageListAccountUser(context.Context, *PageListAccountUserReq) (*PageListAccountUserResp, error)
	CreateStaff(context.Context, *Staff) (*Staff, error)
	UpdateStaff(context.Context, *Staff) (*Staff, error)
	DeleteStaff(context.Context, *DeleteStaffReq) (*emptypb.Empty, error)
	GetStaff(context.Context, *GetStaffReq) (*Staff, error)
	ListStaff(context.Context, *ListStaffReq) (*ListStaffResp, error)
	PageListStaff(context.Context, *PageListStaffReq) (*PageListStaffResp, error)
	mustEmbedUnimplementedAccountServer()
}

// UnimplementedAccountServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServer struct {
}

func (UnimplementedAccountServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAccountServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAccountServer) CreateAccountUser(context.Context, *AccountUser) (*AccountUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountUser not implemented")
}
func (UnimplementedAccountServer) UpdateAccountUser(context.Context, *AccountUser) (*AccountUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountUser not implemented")
}
func (UnimplementedAccountServer) DeleteAccountUser(context.Context, *DeleteAccountUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountUser not implemented")
}
func (UnimplementedAccountServer) GetAccountUser(context.Context, *GetAccountUserReq) (*AccountUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUser not implemented")
}
func (UnimplementedAccountServer) ListAccountUser(context.Context, *ListAccountUserReq) (*ListAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountUser not implemented")
}
func (UnimplementedAccountServer) PageListAccountUser(context.Context, *PageListAccountUserReq) (*PageListAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListAccountUser not implemented")
}
func (UnimplementedAccountServer) CreateStaff(context.Context, *Staff) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaff not implemented")
}
func (UnimplementedAccountServer) UpdateStaff(context.Context, *Staff) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (UnimplementedAccountServer) DeleteStaff(context.Context, *DeleteStaffReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaff not implemented")
}
func (UnimplementedAccountServer) GetStaff(context.Context, *GetStaffReq) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaff not implemented")
}
func (UnimplementedAccountServer) ListStaff(context.Context, *ListStaffReq) (*ListStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaff not implemented")
}
func (UnimplementedAccountServer) PageListStaff(context.Context, *PageListStaffReq) (*PageListStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListStaff not implemented")
}
func (UnimplementedAccountServer) mustEmbedUnimplementedAccountServer() {}

// UnsafeAccountServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServer will
// result in compilation errors.
type UnsafeAccountServer interface {
	mustEmbedUnimplementedAccountServer()
}

func RegisterAccountServer(s grpc.ServiceRegistrar, srv AccountServer) {
	s.RegisterService(&Account_ServiceDesc, srv)
}

func _Account_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CreateAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/CreateAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateAccountUser(ctx, req.(*AccountUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/UpdateAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateAccountUser(ctx, req.(*AccountUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DeleteAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DeleteAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/DeleteAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DeleteAccountUser(ctx, req.(*DeleteAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/GetAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetAccountUser(ctx, req.(*GetAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ListAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ListAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/ListAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ListAccountUser(ctx, req.(*ListAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_PageListAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).PageListAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/PageListAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).PageListAccountUser(ctx, req.(*PageListAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_CreateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Staff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).CreateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/CreateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).CreateStaff(ctx, req.(*Staff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Staff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/UpdateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).UpdateStaff(ctx, req.(*Staff))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_DeleteStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).DeleteStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/DeleteStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).DeleteStaff(ctx, req.(*DeleteStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/GetStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetStaff(ctx, req.(*GetStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_ListStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ListStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/ListStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ListStaff(ctx, req.(*ListStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_PageListStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).PageListStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.Account/PageListStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).PageListStaff(ctx, req.(*PageListStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Account_ServiceDesc is the grpc.ServiceDesc for Account service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Account_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.account.service.v1.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Account_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Account_Login_Handler,
		},
		{
			MethodName: "CreateAccountUser",
			Handler:    _Account_CreateAccountUser_Handler,
		},
		{
			MethodName: "UpdateAccountUser",
			Handler:    _Account_UpdateAccountUser_Handler,
		},
		{
			MethodName: "DeleteAccountUser",
			Handler:    _Account_DeleteAccountUser_Handler,
		},
		{
			MethodName: "GetAccountUser",
			Handler:    _Account_GetAccountUser_Handler,
		},
		{
			MethodName: "ListAccountUser",
			Handler:    _Account_ListAccountUser_Handler,
		},
		{
			MethodName: "PageListAccountUser",
			Handler:    _Account_PageListAccountUser_Handler,
		},
		{
			MethodName: "CreateStaff",
			Handler:    _Account_CreateStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _Account_UpdateStaff_Handler,
		},
		{
			MethodName: "DeleteStaff",
			Handler:    _Account_DeleteStaff_Handler,
		},
		{
			MethodName: "GetStaff",
			Handler:    _Account_GetStaff_Handler,
		},
		{
			MethodName: "ListStaff",
			Handler:    _Account_ListStaff_Handler,
		},
		{
			MethodName: "PageListStaff",
			Handler:    _Account_PageListStaff_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/account.proto",
}
