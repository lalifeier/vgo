// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: v1/shop.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopClient is the client API for Shop service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopClient interface {
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error)
	ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error)
	PageListUser(ctx context.Context, in *PageListUserReq, opts ...grpc.CallOption) (*PageListUserResp, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error)
	CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error)
	DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error)
	ListRole(ctx context.Context, in *ListRoleReq, opts ...grpc.CallOption) (*ListRoleResp, error)
	PageListRole(ctx context.Context, in *PageListRoleReq, opts ...grpc.CallOption) (*PageListRoleResp, error)
	GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*GetRoleResp, error)
	CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuResp, error)
	UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error)
	DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuResp, error)
	ListMenu(ctx context.Context, in *ListMenuReq, opts ...grpc.CallOption) (*ListMenuResp, error)
	PageListMenu(ctx context.Context, in *PageListMenuReq, opts ...grpc.CallOption) (*PageListMenuResp, error)
	GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*GetMenuResp, error)
	CreateDictData(ctx context.Context, in *CreateDictDataReq, opts ...grpc.CallOption) (*CreateDictDataResp, error)
	UpdateDictData(ctx context.Context, in *UpdateDictDataReq, opts ...grpc.CallOption) (*UpdateDictDataResp, error)
	DeleteDictData(ctx context.Context, in *DeleteDictDataReq, opts ...grpc.CallOption) (*DeleteDictDataResp, error)
	ListDictData(ctx context.Context, in *ListDictDataReq, opts ...grpc.CallOption) (*ListDictDataResp, error)
	PageListDictData(ctx context.Context, in *PageListDictDataReq, opts ...grpc.CallOption) (*PageListDictDataResp, error)
	GetDictData(ctx context.Context, in *GetDictDataReq, opts ...grpc.CallOption) (*GetDictDataResp, error)
	CreateAccountUser(ctx context.Context, in *CreateAccountUserReq, opts ...grpc.CallOption) (*CreateAccountUserResp, error)
	UpdateAccountUser(ctx context.Context, in *UpdateAccountUserReq, opts ...grpc.CallOption) (*UpdateAccountUserResp, error)
	DeleteAccountUser(ctx context.Context, in *DeleteAccountUserReq, opts ...grpc.CallOption) (*DeleteAccountUserResp, error)
	ListAccountUser(ctx context.Context, in *ListAccountUserReq, opts ...grpc.CallOption) (*ListAccountUserResp, error)
	PageListAccountUser(ctx context.Context, in *PageListAccountUserReq, opts ...grpc.CallOption) (*PageListAccountUserResp, error)
	GetAccountUser(ctx context.Context, in *GetAccountUserReq, opts ...grpc.CallOption) (*GetAccountUserResp, error)
	CreateStaff(ctx context.Context, in *CreateStaffReq, opts ...grpc.CallOption) (*CreateStaffResp, error)
	UpdateStaff(ctx context.Context, in *UpdateStaffReq, opts ...grpc.CallOption) (*UpdateStaffResp, error)
	DeleteStaff(ctx context.Context, in *DeleteStaffReq, opts ...grpc.CallOption) (*DeleteStaffResp, error)
	ListStaff(ctx context.Context, in *ListStaffReq, opts ...grpc.CallOption) (*ListStaffResp, error)
	PageListStaff(ctx context.Context, in *PageListStaffReq, opts ...grpc.CallOption) (*PageListStaffResp, error)
	GetStaff(ctx context.Context, in *GetStaffReq, opts ...grpc.CallOption) (*GetStaffResp, error)
	CreateSystem(ctx context.Context, in *CreateSystemReq, opts ...grpc.CallOption) (*CreateSystemResp, error)
	UpdateSystem(ctx context.Context, in *UpdateSystemReq, opts ...grpc.CallOption) (*UpdateSystemResp, error)
	DeleteSystem(ctx context.Context, in *DeleteSystemReq, opts ...grpc.CallOption) (*DeleteSystemResp, error)
	ListSystem(ctx context.Context, in *ListSystemReq, opts ...grpc.CallOption) (*ListSystemResp, error)
	PageListSystem(ctx context.Context, in *PageListSystemReq, opts ...grpc.CallOption) (*PageListSystemResp, error)
	GetSystem(ctx context.Context, in *GetSystemReq, opts ...grpc.CallOption) (*GetSystemResp, error)
}

type shopClient struct {
	cc grpc.ClientConnInterface
}

func NewShopClient(cc grpc.ClientConnInterface) ShopClient {
	return &shopClient{cc}
}

func (c *shopClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserResp, error) {
	out := new(CreateUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserResp, error) {
	out := new(UpdateUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserResp, error) {
	out := new(DeleteUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ListUser(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*ListUserResp, error) {
	out := new(ListUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) PageListUser(ctx context.Context, in *PageListUserReq, opts ...grpc.CallOption) (*PageListUserResp, error) {
	out := new(PageListUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/PageListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserResp, error) {
	out := new(GetUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error) {
	out := new(CreateRoleResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	out := new(UpdateRoleResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...grpc.CallOption) (*DeleteRoleResp, error) {
	out := new(DeleteRoleResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ListRole(ctx context.Context, in *ListRoleReq, opts ...grpc.CallOption) (*ListRoleResp, error) {
	out := new(ListRoleResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/ListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) PageListRole(ctx context.Context, in *PageListRoleReq, opts ...grpc.CallOption) (*PageListRoleResp, error) {
	out := new(PageListRoleResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/PageListRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetRole(ctx context.Context, in *GetRoleReq, opts ...grpc.CallOption) (*GetRoleResp, error) {
	out := new(GetRoleResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...grpc.CallOption) (*CreateMenuResp, error) {
	out := new(CreateMenuResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/CreateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...grpc.CallOption) (*UpdateMenuResp, error) {
	out := new(UpdateMenuResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/UpdateMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...grpc.CallOption) (*DeleteMenuResp, error) {
	out := new(DeleteMenuResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/DeleteMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ListMenu(ctx context.Context, in *ListMenuReq, opts ...grpc.CallOption) (*ListMenuResp, error) {
	out := new(ListMenuResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/ListMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) PageListMenu(ctx context.Context, in *PageListMenuReq, opts ...grpc.CallOption) (*PageListMenuResp, error) {
	out := new(PageListMenuResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/PageListMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetMenu(ctx context.Context, in *GetMenuReq, opts ...grpc.CallOption) (*GetMenuResp, error) {
	out := new(GetMenuResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/GetMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) CreateDictData(ctx context.Context, in *CreateDictDataReq, opts ...grpc.CallOption) (*CreateDictDataResp, error) {
	out := new(CreateDictDataResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/CreateDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateDictData(ctx context.Context, in *UpdateDictDataReq, opts ...grpc.CallOption) (*UpdateDictDataResp, error) {
	out := new(UpdateDictDataResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/UpdateDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteDictData(ctx context.Context, in *DeleteDictDataReq, opts ...grpc.CallOption) (*DeleteDictDataResp, error) {
	out := new(DeleteDictDataResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/DeleteDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ListDictData(ctx context.Context, in *ListDictDataReq, opts ...grpc.CallOption) (*ListDictDataResp, error) {
	out := new(ListDictDataResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/ListDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) PageListDictData(ctx context.Context, in *PageListDictDataReq, opts ...grpc.CallOption) (*PageListDictDataResp, error) {
	out := new(PageListDictDataResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/PageListDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetDictData(ctx context.Context, in *GetDictDataReq, opts ...grpc.CallOption) (*GetDictDataResp, error) {
	out := new(GetDictDataResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/GetDictData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) CreateAccountUser(ctx context.Context, in *CreateAccountUserReq, opts ...grpc.CallOption) (*CreateAccountUserResp, error) {
	out := new(CreateAccountUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/CreateAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateAccountUser(ctx context.Context, in *UpdateAccountUserReq, opts ...grpc.CallOption) (*UpdateAccountUserResp, error) {
	out := new(UpdateAccountUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/UpdateAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteAccountUser(ctx context.Context, in *DeleteAccountUserReq, opts ...grpc.CallOption) (*DeleteAccountUserResp, error) {
	out := new(DeleteAccountUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/DeleteAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ListAccountUser(ctx context.Context, in *ListAccountUserReq, opts ...grpc.CallOption) (*ListAccountUserResp, error) {
	out := new(ListAccountUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/ListAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) PageListAccountUser(ctx context.Context, in *PageListAccountUserReq, opts ...grpc.CallOption) (*PageListAccountUserResp, error) {
	out := new(PageListAccountUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/PageListAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetAccountUser(ctx context.Context, in *GetAccountUserReq, opts ...grpc.CallOption) (*GetAccountUserResp, error) {
	out := new(GetAccountUserResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/GetAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) CreateStaff(ctx context.Context, in *CreateStaffReq, opts ...grpc.CallOption) (*CreateStaffResp, error) {
	out := new(CreateStaffResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/CreateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateStaff(ctx context.Context, in *UpdateStaffReq, opts ...grpc.CallOption) (*UpdateStaffResp, error) {
	out := new(UpdateStaffResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/UpdateStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteStaff(ctx context.Context, in *DeleteStaffReq, opts ...grpc.CallOption) (*DeleteStaffResp, error) {
	out := new(DeleteStaffResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/DeleteStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ListStaff(ctx context.Context, in *ListStaffReq, opts ...grpc.CallOption) (*ListStaffResp, error) {
	out := new(ListStaffResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/ListStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) PageListStaff(ctx context.Context, in *PageListStaffReq, opts ...grpc.CallOption) (*PageListStaffResp, error) {
	out := new(PageListStaffResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/PageListStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetStaff(ctx context.Context, in *GetStaffReq, opts ...grpc.CallOption) (*GetStaffResp, error) {
	out := new(GetStaffResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/GetStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) CreateSystem(ctx context.Context, in *CreateSystemReq, opts ...grpc.CallOption) (*CreateSystemResp, error) {
	out := new(CreateSystemResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/CreateSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) UpdateSystem(ctx context.Context, in *UpdateSystemReq, opts ...grpc.CallOption) (*UpdateSystemResp, error) {
	out := new(UpdateSystemResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/UpdateSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) DeleteSystem(ctx context.Context, in *DeleteSystemReq, opts ...grpc.CallOption) (*DeleteSystemResp, error) {
	out := new(DeleteSystemResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/DeleteSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) ListSystem(ctx context.Context, in *ListSystemReq, opts ...grpc.CallOption) (*ListSystemResp, error) {
	out := new(ListSystemResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/ListSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) PageListSystem(ctx context.Context, in *PageListSystemReq, opts ...grpc.CallOption) (*PageListSystemResp, error) {
	out := new(PageListSystemResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/PageListSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopClient) GetSystem(ctx context.Context, in *GetSystemReq, opts ...grpc.CallOption) (*GetSystemResp, error) {
	out := new(GetSystemResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Shop/GetSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServer is the server API for Shop service.
// All implementations must embed UnimplementedShopServer
// for forward compatibility
type ShopServer interface {
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error)
	ListUser(context.Context, *ListUserReq) (*ListUserResp, error)
	PageListUser(context.Context, *PageListUserReq) (*PageListUserResp, error)
	GetUser(context.Context, *GetUserReq) (*GetUserResp, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error)
	ListRole(context.Context, *ListRoleReq) (*ListRoleResp, error)
	PageListRole(context.Context, *PageListRoleReq) (*PageListRoleResp, error)
	GetRole(context.Context, *GetRoleReq) (*GetRoleResp, error)
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuResp, error)
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error)
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuResp, error)
	ListMenu(context.Context, *ListMenuReq) (*ListMenuResp, error)
	PageListMenu(context.Context, *PageListMenuReq) (*PageListMenuResp, error)
	GetMenu(context.Context, *GetMenuReq) (*GetMenuResp, error)
	CreateDictData(context.Context, *CreateDictDataReq) (*CreateDictDataResp, error)
	UpdateDictData(context.Context, *UpdateDictDataReq) (*UpdateDictDataResp, error)
	DeleteDictData(context.Context, *DeleteDictDataReq) (*DeleteDictDataResp, error)
	ListDictData(context.Context, *ListDictDataReq) (*ListDictDataResp, error)
	PageListDictData(context.Context, *PageListDictDataReq) (*PageListDictDataResp, error)
	GetDictData(context.Context, *GetDictDataReq) (*GetDictDataResp, error)
	CreateAccountUser(context.Context, *CreateAccountUserReq) (*CreateAccountUserResp, error)
	UpdateAccountUser(context.Context, *UpdateAccountUserReq) (*UpdateAccountUserResp, error)
	DeleteAccountUser(context.Context, *DeleteAccountUserReq) (*DeleteAccountUserResp, error)
	ListAccountUser(context.Context, *ListAccountUserReq) (*ListAccountUserResp, error)
	PageListAccountUser(context.Context, *PageListAccountUserReq) (*PageListAccountUserResp, error)
	GetAccountUser(context.Context, *GetAccountUserReq) (*GetAccountUserResp, error)
	CreateStaff(context.Context, *CreateStaffReq) (*CreateStaffResp, error)
	UpdateStaff(context.Context, *UpdateStaffReq) (*UpdateStaffResp, error)
	DeleteStaff(context.Context, *DeleteStaffReq) (*DeleteStaffResp, error)
	ListStaff(context.Context, *ListStaffReq) (*ListStaffResp, error)
	PageListStaff(context.Context, *PageListStaffReq) (*PageListStaffResp, error)
	GetStaff(context.Context, *GetStaffReq) (*GetStaffResp, error)
	CreateSystem(context.Context, *CreateSystemReq) (*CreateSystemResp, error)
	UpdateSystem(context.Context, *UpdateSystemReq) (*UpdateSystemResp, error)
	DeleteSystem(context.Context, *DeleteSystemReq) (*DeleteSystemResp, error)
	ListSystem(context.Context, *ListSystemReq) (*ListSystemResp, error)
	PageListSystem(context.Context, *PageListSystemReq) (*PageListSystemResp, error)
	GetSystem(context.Context, *GetSystemReq) (*GetSystemResp, error)
	mustEmbedUnimplementedShopServer()
}

// UnimplementedShopServer must be embedded to have forward compatible implementations.
type UnimplementedShopServer struct {
}

func (UnimplementedShopServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedShopServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedShopServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedShopServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedShopServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedShopServer) ListUser(context.Context, *ListUserReq) (*ListUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedShopServer) PageListUser(context.Context, *PageListUserReq) (*PageListUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListUser not implemented")
}
func (UnimplementedShopServer) GetUser(context.Context, *GetUserReq) (*GetUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedShopServer) CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedShopServer) UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedShopServer) DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedShopServer) ListRole(context.Context, *ListRoleReq) (*ListRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRole not implemented")
}
func (UnimplementedShopServer) PageListRole(context.Context, *PageListRoleReq) (*PageListRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListRole not implemented")
}
func (UnimplementedShopServer) GetRole(context.Context, *GetRoleReq) (*GetRoleResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedShopServer) CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenu not implemented")
}
func (UnimplementedShopServer) UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenu not implemented")
}
func (UnimplementedShopServer) DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenu not implemented")
}
func (UnimplementedShopServer) ListMenu(context.Context, *ListMenuReq) (*ListMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenu not implemented")
}
func (UnimplementedShopServer) PageListMenu(context.Context, *PageListMenuReq) (*PageListMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListMenu not implemented")
}
func (UnimplementedShopServer) GetMenu(context.Context, *GetMenuReq) (*GetMenuResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedShopServer) CreateDictData(context.Context, *CreateDictDataReq) (*CreateDictDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDictData not implemented")
}
func (UnimplementedShopServer) UpdateDictData(context.Context, *UpdateDictDataReq) (*UpdateDictDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDictData not implemented")
}
func (UnimplementedShopServer) DeleteDictData(context.Context, *DeleteDictDataReq) (*DeleteDictDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDictData not implemented")
}
func (UnimplementedShopServer) ListDictData(context.Context, *ListDictDataReq) (*ListDictDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDictData not implemented")
}
func (UnimplementedShopServer) PageListDictData(context.Context, *PageListDictDataReq) (*PageListDictDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListDictData not implemented")
}
func (UnimplementedShopServer) GetDictData(context.Context, *GetDictDataReq) (*GetDictDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictData not implemented")
}
func (UnimplementedShopServer) CreateAccountUser(context.Context, *CreateAccountUserReq) (*CreateAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountUser not implemented")
}
func (UnimplementedShopServer) UpdateAccountUser(context.Context, *UpdateAccountUserReq) (*UpdateAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountUser not implemented")
}
func (UnimplementedShopServer) DeleteAccountUser(context.Context, *DeleteAccountUserReq) (*DeleteAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountUser not implemented")
}
func (UnimplementedShopServer) ListAccountUser(context.Context, *ListAccountUserReq) (*ListAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountUser not implemented")
}
func (UnimplementedShopServer) PageListAccountUser(context.Context, *PageListAccountUserReq) (*PageListAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListAccountUser not implemented")
}
func (UnimplementedShopServer) GetAccountUser(context.Context, *GetAccountUserReq) (*GetAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountUser not implemented")
}
func (UnimplementedShopServer) CreateStaff(context.Context, *CreateStaffReq) (*CreateStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaff not implemented")
}
func (UnimplementedShopServer) UpdateStaff(context.Context, *UpdateStaffReq) (*UpdateStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (UnimplementedShopServer) DeleteStaff(context.Context, *DeleteStaffReq) (*DeleteStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaff not implemented")
}
func (UnimplementedShopServer) ListStaff(context.Context, *ListStaffReq) (*ListStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaff not implemented")
}
func (UnimplementedShopServer) PageListStaff(context.Context, *PageListStaffReq) (*PageListStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListStaff not implemented")
}
func (UnimplementedShopServer) GetStaff(context.Context, *GetStaffReq) (*GetStaffResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaff not implemented")
}
func (UnimplementedShopServer) CreateSystem(context.Context, *CreateSystemReq) (*CreateSystemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystem not implemented")
}
func (UnimplementedShopServer) UpdateSystem(context.Context, *UpdateSystemReq) (*UpdateSystemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSystem not implemented")
}
func (UnimplementedShopServer) DeleteSystem(context.Context, *DeleteSystemReq) (*DeleteSystemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystem not implemented")
}
func (UnimplementedShopServer) ListSystem(context.Context, *ListSystemReq) (*ListSystemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSystem not implemented")
}
func (UnimplementedShopServer) PageListSystem(context.Context, *PageListSystemReq) (*PageListSystemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListSystem not implemented")
}
func (UnimplementedShopServer) GetSystem(context.Context, *GetSystemReq) (*GetSystemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystem not implemented")
}
func (UnimplementedShopServer) mustEmbedUnimplementedShopServer() {}

// UnsafeShopServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServer will
// result in compilation errors.
type UnsafeShopServer interface {
	mustEmbedUnimplementedShopServer()
}

func RegisterShopServer(s grpc.ServiceRegistrar, srv ShopServer) {
	s.RegisterService(&Shop_ServiceDesc, srv)
}

func _Shop_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ListUser(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_PageListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).PageListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/PageListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).PageListUser(ctx, req.(*PageListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).CreateRole(ctx, req.(*CreateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteRole(ctx, req.(*DeleteRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/ListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ListRole(ctx, req.(*ListRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_PageListRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).PageListRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/PageListRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).PageListRole(ctx, req.(*PageListRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetRole(ctx, req.(*GetRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_CreateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).CreateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/CreateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).CreateMenu(ctx, req.(*CreateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/UpdateMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateMenu(ctx, req.(*UpdateMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/DeleteMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteMenu(ctx, req.(*DeleteMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/ListMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ListMenu(ctx, req.(*ListMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_PageListMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).PageListMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/PageListMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).PageListMenu(ctx, req.(*PageListMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/GetMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetMenu(ctx, req.(*GetMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_CreateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).CreateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/CreateDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).CreateDictData(ctx, req.(*CreateDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/UpdateDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateDictData(ctx, req.(*UpdateDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/DeleteDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteDictData(ctx, req.(*DeleteDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ListDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ListDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/ListDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ListDictData(ctx, req.(*ListDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_PageListDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).PageListDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/PageListDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).PageListDictData(ctx, req.(*PageListDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetDictData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetDictData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/GetDictData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetDictData(ctx, req.(*GetDictDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_CreateAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).CreateAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/CreateAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).CreateAccountUser(ctx, req.(*CreateAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/UpdateAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateAccountUser(ctx, req.(*UpdateAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/DeleteAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteAccountUser(ctx, req.(*DeleteAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ListAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ListAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/ListAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ListAccountUser(ctx, req.(*ListAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_PageListAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).PageListAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/PageListAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).PageListAccountUser(ctx, req.(*PageListAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/GetAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetAccountUser(ctx, req.(*GetAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_CreateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).CreateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/CreateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).CreateStaff(ctx, req.(*CreateStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/UpdateStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateStaff(ctx, req.(*UpdateStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/DeleteStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteStaff(ctx, req.(*DeleteStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ListStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ListStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/ListStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ListStaff(ctx, req.(*ListStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_PageListStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).PageListStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/PageListStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).PageListStaff(ctx, req.(*PageListStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/GetStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetStaff(ctx, req.(*GetStaffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_CreateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).CreateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/CreateSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).CreateSystem(ctx, req.(*CreateSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_UpdateSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).UpdateSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/UpdateSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).UpdateSystem(ctx, req.(*UpdateSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_DeleteSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).DeleteSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/DeleteSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).DeleteSystem(ctx, req.(*DeleteSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_ListSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).ListSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/ListSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).ListSystem(ctx, req.(*ListSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_PageListSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).PageListSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/PageListSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).PageListSystem(ctx, req.(*PageListSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shop_GetSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServer).GetSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Shop/GetSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServer).GetSystem(ctx, req.(*GetSystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Shop_ServiceDesc is the grpc.ServiceDesc for Shop service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shop_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shop.admin.v1.Shop",
	HandlerType: (*ShopServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Shop_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Shop_Login_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Shop_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Shop_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Shop_DeleteUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _Shop_ListUser_Handler,
		},
		{
			MethodName: "PageListUser",
			Handler:    _Shop_PageListUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Shop_GetUser_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Shop_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Shop_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Shop_DeleteRole_Handler,
		},
		{
			MethodName: "ListRole",
			Handler:    _Shop_ListRole_Handler,
		},
		{
			MethodName: "PageListRole",
			Handler:    _Shop_PageListRole_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Shop_GetRole_Handler,
		},
		{
			MethodName: "CreateMenu",
			Handler:    _Shop_CreateMenu_Handler,
		},
		{
			MethodName: "UpdateMenu",
			Handler:    _Shop_UpdateMenu_Handler,
		},
		{
			MethodName: "DeleteMenu",
			Handler:    _Shop_DeleteMenu_Handler,
		},
		{
			MethodName: "ListMenu",
			Handler:    _Shop_ListMenu_Handler,
		},
		{
			MethodName: "PageListMenu",
			Handler:    _Shop_PageListMenu_Handler,
		},
		{
			MethodName: "GetMenu",
			Handler:    _Shop_GetMenu_Handler,
		},
		{
			MethodName: "CreateDictData",
			Handler:    _Shop_CreateDictData_Handler,
		},
		{
			MethodName: "UpdateDictData",
			Handler:    _Shop_UpdateDictData_Handler,
		},
		{
			MethodName: "DeleteDictData",
			Handler:    _Shop_DeleteDictData_Handler,
		},
		{
			MethodName: "ListDictData",
			Handler:    _Shop_ListDictData_Handler,
		},
		{
			MethodName: "PageListDictData",
			Handler:    _Shop_PageListDictData_Handler,
		},
		{
			MethodName: "GetDictData",
			Handler:    _Shop_GetDictData_Handler,
		},
		{
			MethodName: "CreateAccountUser",
			Handler:    _Shop_CreateAccountUser_Handler,
		},
		{
			MethodName: "UpdateAccountUser",
			Handler:    _Shop_UpdateAccountUser_Handler,
		},
		{
			MethodName: "DeleteAccountUser",
			Handler:    _Shop_DeleteAccountUser_Handler,
		},
		{
			MethodName: "ListAccountUser",
			Handler:    _Shop_ListAccountUser_Handler,
		},
		{
			MethodName: "PageListAccountUser",
			Handler:    _Shop_PageListAccountUser_Handler,
		},
		{
			MethodName: "GetAccountUser",
			Handler:    _Shop_GetAccountUser_Handler,
		},
		{
			MethodName: "CreateStaff",
			Handler:    _Shop_CreateStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _Shop_UpdateStaff_Handler,
		},
		{
			MethodName: "DeleteStaff",
			Handler:    _Shop_DeleteStaff_Handler,
		},
		{
			MethodName: "ListStaff",
			Handler:    _Shop_ListStaff_Handler,
		},
		{
			MethodName: "PageListStaff",
			Handler:    _Shop_PageListStaff_Handler,
		},
		{
			MethodName: "GetStaff",
			Handler:    _Shop_GetStaff_Handler,
		},
		{
			MethodName: "CreateSystem",
			Handler:    _Shop_CreateSystem_Handler,
		},
		{
			MethodName: "UpdateSystem",
			Handler:    _Shop_UpdateSystem_Handler,
		},
		{
			MethodName: "DeleteSystem",
			Handler:    _Shop_DeleteSystem_Handler,
		},
		{
			MethodName: "ListSystem",
			Handler:    _Shop_ListSystem_Handler,
		},
		{
			MethodName: "PageListSystem",
			Handler:    _Shop_PageListSystem_Handler,
		},
		{
			MethodName: "GetSystem",
			Handler:    _Shop_GetSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/shop.proto",
}
