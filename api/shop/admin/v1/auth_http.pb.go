// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AuthHTTPServer interface {
	CreateMenu(context.Context, *CreateMenuReq) (*CreateMenuResp, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error)
	CreateSystem(context.Context, *CreateSystemReq) (*CreateSystemResp, error)
	DeleteMenu(context.Context, *DeleteMenuReq) (*DeleteMenuResp, error)
	DeleteRole(context.Context, *DeleteRoleReq) (*DeleteRoleResp, error)
	DeleteSystem(context.Context, *DeleteSystemReq) (*DeleteSystemResp, error)
	GetMenu(context.Context, *GetMenuReq) (*GetMenuResp, error)
	GetRole(context.Context, *GetRoleReq) (*GetRoleResp, error)
	GetSystem(context.Context, *GetSystemReq) (*GetSystemResp, error)
	ListMenu(context.Context, *ListMenuReq) (*ListMenuResp, error)
	ListRole(context.Context, *ListRoleReq) (*ListRoleResp, error)
	ListSystem(context.Context, *ListSystemReq) (*ListSystemResp, error)
	PageListMenu(context.Context, *PageListMenuReq) (*PageListMenuResp, error)
	PageListRole(context.Context, *PageListRoleReq) (*PageListRoleResp, error)
	PageListSystem(context.Context, *PageListSystemReq) (*PageListSystemResp, error)
	UpdateMenu(context.Context, *UpdateMenuReq) (*UpdateMenuResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	UpdateSystem(context.Context, *UpdateSystemReq) (*UpdateSystemResp, error)
}

func RegisterAuthHTTPServer(s *http.Server, srv AuthHTTPServer) {
	r := s.Route("/")
	r.POST("/api/account_user", _Auth_CreateSystem0_HTTP_Handler(srv))
	r.PUT("/api/system/{id}", _Auth_UpdateSystem0_HTTP_Handler(srv))
	r.DELETE("/api/system/{id}", _Auth_DeleteSystem0_HTTP_Handler(srv))
	r.GET("/api/system/{id}", _Auth_GetSystem0_HTTP_Handler(srv))
	r.GET("/api/systems", _Auth_ListSystem0_HTTP_Handler(srv))
	r.GET("/api/system", _Auth_PageListSystem0_HTTP_Handler(srv))
	r.POST("/api/role", _Auth_CreateRole0_HTTP_Handler(srv))
	r.PUT("/api/role/{id}", _Auth_UpdateRole0_HTTP_Handler(srv))
	r.DELETE("/api/role/{id}", _Auth_DeleteRole0_HTTP_Handler(srv))
	r.GET("/api/role/{id}", _Auth_GetRole0_HTTP_Handler(srv))
	r.GET("/api/roles", _Auth_ListRole0_HTTP_Handler(srv))
	r.GET("/api/role", _Auth_PageListRole0_HTTP_Handler(srv))
	r.POST("/api/menu", _Auth_CreateMenu0_HTTP_Handler(srv))
	r.PUT("/api/menu/{id}", _Auth_UpdateMenu0_HTTP_Handler(srv))
	r.DELETE("/api/menu/{id}", _Auth_DeleteMenu0_HTTP_Handler(srv))
	r.GET("/api/menu/{id}", _Auth_GetMenu0_HTTP_Handler(srv))
	r.GET("/api/menus", _Auth_ListMenu0_HTTP_Handler(srv))
	r.GET("/api/menu", _Auth_PageListMenu0_HTTP_Handler(srv))
}

func _Auth_CreateSystem0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateSystemReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/CreateSystem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateSystem(ctx, req.(*CreateSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateSystemResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdateSystem0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateSystemReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/UpdateSystem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateSystem(ctx, req.(*UpdateSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateSystemResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteSystem0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteSystemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/DeleteSystem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteSystem(ctx, req.(*DeleteSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteSystemResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetSystem0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetSystemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/GetSystem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSystem(ctx, req.(*GetSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetSystemResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListSystem0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListSystemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/ListSystem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListSystem(ctx, req.(*ListSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListSystemResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_PageListSystem0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListSystemReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/PageListSystem")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListSystem(ctx, req.(*PageListSystemReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListSystemResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_CreateRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/CreateRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRole(ctx, req.(*CreateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRoleResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdateRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRoleReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/UpdateRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRole(ctx, req.(*UpdateRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRoleResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/DeleteRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRole(ctx, req.(*DeleteRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRoleResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/GetRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRole(ctx, req.(*GetRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRoleResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/ListRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRole(ctx, req.(*ListRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRoleResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_PageListRole0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListRoleReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/PageListRole")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListRole(ctx, req.(*PageListRoleReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListRoleResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_CreateMenu0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/CreateMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateMenu(ctx, req.(*CreateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateMenuResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_UpdateMenu0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMenuReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/UpdateMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMenu(ctx, req.(*UpdateMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMenuResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_DeleteMenu0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/DeleteMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMenu(ctx, req.(*DeleteMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteMenuResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_GetMenu0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/GetMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMenu(ctx, req.(*GetMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMenuResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_ListMenu0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/ListMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMenu(ctx, req.(*ListMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListMenuResp)
		return ctx.Result(200, reply)
	}
}

func _Auth_PageListMenu0_HTTP_Handler(srv AuthHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListMenuReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Auth/PageListMenu")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListMenu(ctx, req.(*PageListMenuReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListMenuResp)
		return ctx.Result(200, reply)
	}
}

type AuthHTTPClient interface {
	CreateMenu(ctx context.Context, req *CreateMenuReq, opts ...http.CallOption) (rsp *CreateMenuResp, err error)
	CreateRole(ctx context.Context, req *CreateRoleReq, opts ...http.CallOption) (rsp *CreateRoleResp, err error)
	CreateSystem(ctx context.Context, req *CreateSystemReq, opts ...http.CallOption) (rsp *CreateSystemResp, err error)
	DeleteMenu(ctx context.Context, req *DeleteMenuReq, opts ...http.CallOption) (rsp *DeleteMenuResp, err error)
	DeleteRole(ctx context.Context, req *DeleteRoleReq, opts ...http.CallOption) (rsp *DeleteRoleResp, err error)
	DeleteSystem(ctx context.Context, req *DeleteSystemReq, opts ...http.CallOption) (rsp *DeleteSystemResp, err error)
	GetMenu(ctx context.Context, req *GetMenuReq, opts ...http.CallOption) (rsp *GetMenuResp, err error)
	GetRole(ctx context.Context, req *GetRoleReq, opts ...http.CallOption) (rsp *GetRoleResp, err error)
	GetSystem(ctx context.Context, req *GetSystemReq, opts ...http.CallOption) (rsp *GetSystemResp, err error)
	ListMenu(ctx context.Context, req *ListMenuReq, opts ...http.CallOption) (rsp *ListMenuResp, err error)
	ListRole(ctx context.Context, req *ListRoleReq, opts ...http.CallOption) (rsp *ListRoleResp, err error)
	ListSystem(ctx context.Context, req *ListSystemReq, opts ...http.CallOption) (rsp *ListSystemResp, err error)
	PageListMenu(ctx context.Context, req *PageListMenuReq, opts ...http.CallOption) (rsp *PageListMenuResp, err error)
	PageListRole(ctx context.Context, req *PageListRoleReq, opts ...http.CallOption) (rsp *PageListRoleResp, err error)
	PageListSystem(ctx context.Context, req *PageListSystemReq, opts ...http.CallOption) (rsp *PageListSystemResp, err error)
	UpdateMenu(ctx context.Context, req *UpdateMenuReq, opts ...http.CallOption) (rsp *UpdateMenuResp, err error)
	UpdateRole(ctx context.Context, req *UpdateRoleReq, opts ...http.CallOption) (rsp *UpdateRoleResp, err error)
	UpdateSystem(ctx context.Context, req *UpdateSystemReq, opts ...http.CallOption) (rsp *UpdateSystemResp, err error)
}

type AuthHTTPClientImpl struct {
	cc *http.Client
}

func NewAuthHTTPClient(client *http.Client) AuthHTTPClient {
	return &AuthHTTPClientImpl{client}
}

func (c *AuthHTTPClientImpl) CreateMenu(ctx context.Context, in *CreateMenuReq, opts ...http.CallOption) (*CreateMenuResp, error) {
	var out CreateMenuResp
	pattern := "/api/menu"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/CreateMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) CreateRole(ctx context.Context, in *CreateRoleReq, opts ...http.CallOption) (*CreateRoleResp, error) {
	var out CreateRoleResp
	pattern := "/api/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/CreateRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) CreateSystem(ctx context.Context, in *CreateSystemReq, opts ...http.CallOption) (*CreateSystemResp, error) {
	var out CreateSystemResp
	pattern := "/api/account_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/CreateSystem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteMenu(ctx context.Context, in *DeleteMenuReq, opts ...http.CallOption) (*DeleteMenuResp, error) {
	var out DeleteMenuResp
	pattern := "/api/menu/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/DeleteMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteRole(ctx context.Context, in *DeleteRoleReq, opts ...http.CallOption) (*DeleteRoleResp, error) {
	var out DeleteRoleResp
	pattern := "/api/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/DeleteRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) DeleteSystem(ctx context.Context, in *DeleteSystemReq, opts ...http.CallOption) (*DeleteSystemResp, error) {
	var out DeleteSystemResp
	pattern := "/api/system/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/DeleteSystem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetMenu(ctx context.Context, in *GetMenuReq, opts ...http.CallOption) (*GetMenuResp, error) {
	var out GetMenuResp
	pattern := "/api/menu/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/GetMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetRole(ctx context.Context, in *GetRoleReq, opts ...http.CallOption) (*GetRoleResp, error) {
	var out GetRoleResp
	pattern := "/api/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/GetRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) GetSystem(ctx context.Context, in *GetSystemReq, opts ...http.CallOption) (*GetSystemResp, error) {
	var out GetSystemResp
	pattern := "/api/system/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/GetSystem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListMenu(ctx context.Context, in *ListMenuReq, opts ...http.CallOption) (*ListMenuResp, error) {
	var out ListMenuResp
	pattern := "/api/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/ListMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListRole(ctx context.Context, in *ListRoleReq, opts ...http.CallOption) (*ListRoleResp, error) {
	var out ListRoleResp
	pattern := "/api/roles"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/ListRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) ListSystem(ctx context.Context, in *ListSystemReq, opts ...http.CallOption) (*ListSystemResp, error) {
	var out ListSystemResp
	pattern := "/api/systems"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/ListSystem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) PageListMenu(ctx context.Context, in *PageListMenuReq, opts ...http.CallOption) (*PageListMenuResp, error) {
	var out PageListMenuResp
	pattern := "/api/menu"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/PageListMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) PageListRole(ctx context.Context, in *PageListRoleReq, opts ...http.CallOption) (*PageListRoleResp, error) {
	var out PageListRoleResp
	pattern := "/api/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/PageListRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) PageListSystem(ctx context.Context, in *PageListSystemReq, opts ...http.CallOption) (*PageListSystemResp, error) {
	var out PageListSystemResp
	pattern := "/api/system"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/PageListSystem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) UpdateMenu(ctx context.Context, in *UpdateMenuReq, opts ...http.CallOption) (*UpdateMenuResp, error) {
	var out UpdateMenuResp
	pattern := "/api/menu/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/UpdateMenu"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...http.CallOption) (*UpdateRoleResp, error) {
	var out UpdateRoleResp
	pattern := "/api/role/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/UpdateRole"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AuthHTTPClientImpl) UpdateSystem(ctx context.Context, in *UpdateSystemReq, opts ...http.CallOption) (*UpdateSystemResp, error) {
	var out UpdateSystemResp
	pattern := "/api/system/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Auth/UpdateSystem"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
