// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AccountHTTPServer interface {
	CreateAccountUser(context.Context, *CreateAccountUserReq) (*CreateAccountUserResp, error)
	CreateStaff(context.Context, *CreateStaffReq) (*CreateStaffResp, error)
	DeleteAccountUser(context.Context, *DeleteAccountUserReq) (*DeleteAccountUserResp, error)
	DeleteStaff(context.Context, *DeleteStaffReq) (*DeleteStaffResp, error)
	GetAccountUser(context.Context, *GetAccountUserReq) (*GetAccountUserResp, error)
	GetStaff(context.Context, *GetStaffReq) (*GetStaffResp, error)
	ListAccountUser(context.Context, *ListAccountUserReq) (*ListAccountUserResp, error)
	ListStaff(context.Context, *ListStaffReq) (*ListStaffResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	PageListAccountUser(context.Context, *PageListAccountUserReq) (*PageListAccountUserResp, error)
	PageListStaff(context.Context, *PageListStaffReq) (*PageListStaffResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	UpdateAccountUser(context.Context, *UpdateAccountUserReq) (*UpdateAccountUserResp, error)
	UpdateStaff(context.Context, *UpdateStaffReq) (*UpdateStaffResp, error)
}

func RegisterAccountHTTPServer(s *http.Server, srv AccountHTTPServer) {
	r := s.Route("/")
	r.POST("/api/register", _Account_Register0_HTTP_Handler(srv))
	r.POST("/api/login", _Account_Login0_HTTP_Handler(srv))
	r.POST("/api/account_user", _Account_CreateAccountUser0_HTTP_Handler(srv))
	r.PUT("/api/account_user/{id}", _Account_UpdateAccountUser0_HTTP_Handler(srv))
	r.DELETE("/api/account_user/{id}", _Account_DeleteAccountUser0_HTTP_Handler(srv))
	r.GET("/api/account_user/list", _Account_ListAccountUser0_HTTP_Handler(srv))
	r.GET("/api/account_user", _Account_PageListAccountUser0_HTTP_Handler(srv))
	r.GET("/api/account_user/{id}", _Account_GetAccountUser0_HTTP_Handler(srv))
	r.POST("/api/staff", _Account_CreateStaff0_HTTP_Handler(srv))
	r.PUT("/api/staff/{id}", _Account_UpdateStaff0_HTTP_Handler(srv))
	r.DELETE("/api/staff/{id}", _Account_DeleteStaff0_HTTP_Handler(srv))
	r.GET("/api/staff/list", _Account_ListStaff0_HTTP_Handler(srv))
	r.GET("/api/staff", _Account_PageListStaff0_HTTP_Handler(srv))
	r.GET("/api/staff/{id}", _Account_GetStaff0_HTTP_Handler(srv))
}

func _Account_Register0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterResp)
		return ctx.Result(200, reply)
	}
}

func _Account_Login0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginResp)
		return ctx.Result(200, reply)
	}
}

func _Account_CreateAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAccountUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/CreateAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccountUser(ctx, req.(*CreateAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _Account_UpdateAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/UpdateAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccountUser(ctx, req.(*UpdateAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _Account_DeleteAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/DeleteAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccountUser(ctx, req.(*DeleteAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _Account_ListAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/ListAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccountUser(ctx, req.(*ListAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _Account_PageListAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/PageListAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListAccountUser(ctx, req.(*PageListAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _Account_GetAccountUser0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/GetAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountUser(ctx, req.(*GetAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _Account_CreateStaff0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateStaffReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/CreateStaff")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateStaff(ctx, req.(*CreateStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateStaffResp)
		return ctx.Result(200, reply)
	}
}

func _Account_UpdateStaff0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateStaffReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/UpdateStaff")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateStaff(ctx, req.(*UpdateStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateStaffResp)
		return ctx.Result(200, reply)
	}
}

func _Account_DeleteStaff0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteStaffReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/DeleteStaff")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteStaff(ctx, req.(*DeleteStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteStaffResp)
		return ctx.Result(200, reply)
	}
}

func _Account_ListStaff0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListStaffReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/ListStaff")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListStaff(ctx, req.(*ListStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListStaffResp)
		return ctx.Result(200, reply)
	}
}

func _Account_PageListStaff0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PageListStaffReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/PageListStaff")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PageListStaff(ctx, req.(*PageListStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PageListStaffResp)
		return ctx.Result(200, reply)
	}
}

func _Account_GetStaff0_HTTP_Handler(srv AccountHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetStaffReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Account/GetStaff")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetStaff(ctx, req.(*GetStaffReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetStaffResp)
		return ctx.Result(200, reply)
	}
}

type AccountHTTPClient interface {
	CreateAccountUser(ctx context.Context, req *CreateAccountUserReq, opts ...http.CallOption) (rsp *CreateAccountUserResp, err error)
	CreateStaff(ctx context.Context, req *CreateStaffReq, opts ...http.CallOption) (rsp *CreateStaffResp, err error)
	DeleteAccountUser(ctx context.Context, req *DeleteAccountUserReq, opts ...http.CallOption) (rsp *DeleteAccountUserResp, err error)
	DeleteStaff(ctx context.Context, req *DeleteStaffReq, opts ...http.CallOption) (rsp *DeleteStaffResp, err error)
	GetAccountUser(ctx context.Context, req *GetAccountUserReq, opts ...http.CallOption) (rsp *GetAccountUserResp, err error)
	GetStaff(ctx context.Context, req *GetStaffReq, opts ...http.CallOption) (rsp *GetStaffResp, err error)
	ListAccountUser(ctx context.Context, req *ListAccountUserReq, opts ...http.CallOption) (rsp *ListAccountUserResp, err error)
	ListStaff(ctx context.Context, req *ListStaffReq, opts ...http.CallOption) (rsp *ListStaffResp, err error)
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginResp, err error)
	PageListAccountUser(ctx context.Context, req *PageListAccountUserReq, opts ...http.CallOption) (rsp *PageListAccountUserResp, err error)
	PageListStaff(ctx context.Context, req *PageListStaffReq, opts ...http.CallOption) (rsp *PageListStaffResp, err error)
	Register(ctx context.Context, req *RegisterReq, opts ...http.CallOption) (rsp *RegisterResp, err error)
	UpdateAccountUser(ctx context.Context, req *UpdateAccountUserReq, opts ...http.CallOption) (rsp *UpdateAccountUserResp, err error)
	UpdateStaff(ctx context.Context, req *UpdateStaffReq, opts ...http.CallOption) (rsp *UpdateStaffResp, err error)
}

type AccountHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountHTTPClient(client *http.Client) AccountHTTPClient {
	return &AccountHTTPClientImpl{client}
}

func (c *AccountHTTPClientImpl) CreateAccountUser(ctx context.Context, in *CreateAccountUserReq, opts ...http.CallOption) (*CreateAccountUserResp, error) {
	var out CreateAccountUserResp
	pattern := "/api/account_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/CreateAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) CreateStaff(ctx context.Context, in *CreateStaffReq, opts ...http.CallOption) (*CreateStaffResp, error) {
	var out CreateStaffResp
	pattern := "/api/staff"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/CreateStaff"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) DeleteAccountUser(ctx context.Context, in *DeleteAccountUserReq, opts ...http.CallOption) (*DeleteAccountUserResp, error) {
	var out DeleteAccountUserResp
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/DeleteAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) DeleteStaff(ctx context.Context, in *DeleteStaffReq, opts ...http.CallOption) (*DeleteStaffResp, error) {
	var out DeleteStaffResp
	pattern := "/api/staff/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/DeleteStaff"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) GetAccountUser(ctx context.Context, in *GetAccountUserReq, opts ...http.CallOption) (*GetAccountUserResp, error) {
	var out GetAccountUserResp
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/GetAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) GetStaff(ctx context.Context, in *GetStaffReq, opts ...http.CallOption) (*GetStaffResp, error) {
	var out GetStaffResp
	pattern := "/api/staff/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/GetStaff"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ListAccountUser(ctx context.Context, in *ListAccountUserReq, opts ...http.CallOption) (*ListAccountUserResp, error) {
	var out ListAccountUserResp
	pattern := "/api/account_user/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/ListAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) ListStaff(ctx context.Context, in *ListStaffReq, opts ...http.CallOption) (*ListStaffResp, error) {
	var out ListStaffResp
	pattern := "/api/staff/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/ListStaff"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginResp, error) {
	var out LoginResp
	pattern := "/api/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) PageListAccountUser(ctx context.Context, in *PageListAccountUserReq, opts ...http.CallOption) (*PageListAccountUserResp, error) {
	var out PageListAccountUserResp
	pattern := "/api/account_user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/PageListAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) PageListStaff(ctx context.Context, in *PageListStaffReq, opts ...http.CallOption) (*PageListStaffResp, error) {
	var out PageListStaffResp
	pattern := "/api/staff"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/PageListStaff"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) Register(ctx context.Context, in *RegisterReq, opts ...http.CallOption) (*RegisterResp, error) {
	var out RegisterResp
	pattern := "/api/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) UpdateAccountUser(ctx context.Context, in *UpdateAccountUserReq, opts ...http.CallOption) (*UpdateAccountUserResp, error) {
	var out UpdateAccountUserResp
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/UpdateAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountHTTPClientImpl) UpdateStaff(ctx context.Context, in *UpdateStaffReq, opts ...http.CallOption) (*UpdateStaffResp, error) {
	var out UpdateStaffResp
	pattern := "/api/staff/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Account/UpdateStaff"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
