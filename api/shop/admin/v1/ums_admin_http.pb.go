// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type UmsHTTPServer interface {
	CreateAccountUser(context.Context, *CreateAccountUserReq) (*CreateAccountUserResp, error)
	DeleteAccountUser(context.Context, *DeleteAccountUserReq) (*emptypb.Empty, error)
	GetAccountUser(context.Context, *GetAccountUserReq) (*GetAccountUserResp, error)
	ListAccountUser(context.Context, *ListAccountUserReq) (*ListAccountUserResp, error)
	UpdateAccountUser(context.Context, *UpdateAccountUserReq) (*emptypb.Empty, error)
}

func RegisterUmsHTTPServer(s *http.Server, srv UmsHTTPServer) {
	r := s.Route("/")
	r.POST("/api/account_user", _Ums_CreateAccountUser0_HTTP_Handler(srv))
	r.PUT("/api/account_user/{id}", _Ums_UpdateAccountUser0_HTTP_Handler(srv))
	r.DELETE("/api/account_user/{id}", _Ums_DeleteAccountUser0_HTTP_Handler(srv))
	r.GET("/api/account_user/{id}", _Ums_GetAccountUser0_HTTP_Handler(srv))
	r.GET("/api/account_user", _Ums_ListAccountUser0_HTTP_Handler(srv))
}

func _Ums_CreateAccountUser0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAccountUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Ums/CreateAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAccountUser(ctx, req.(*CreateAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_UpdateAccountUser0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountUserReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Ums/UpdateAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccountUser(ctx, req.(*UpdateAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Ums_DeleteAccountUser0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Ums/DeleteAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAccountUser(ctx, req.(*DeleteAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _Ums_GetAccountUser0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Ums/GetAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountUser(ctx, req.(*GetAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountUserResp)
		return ctx.Result(200, reply)
	}
}

func _Ums_ListAccountUser0_HTTP_Handler(srv UmsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountUserReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/api.shop.admin.v1.Ums/ListAccountUser")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccountUser(ctx, req.(*ListAccountUserReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAccountUserResp)
		return ctx.Result(200, reply)
	}
}

type UmsHTTPClient interface {
	CreateAccountUser(ctx context.Context, req *CreateAccountUserReq, opts ...http.CallOption) (rsp *CreateAccountUserResp, err error)
	DeleteAccountUser(ctx context.Context, req *DeleteAccountUserReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetAccountUser(ctx context.Context, req *GetAccountUserReq, opts ...http.CallOption) (rsp *GetAccountUserResp, err error)
	ListAccountUser(ctx context.Context, req *ListAccountUserReq, opts ...http.CallOption) (rsp *ListAccountUserResp, err error)
	UpdateAccountUser(ctx context.Context, req *UpdateAccountUserReq, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type UmsHTTPClientImpl struct {
	cc *http.Client
}

func NewUmsHTTPClient(client *http.Client) UmsHTTPClient {
	return &UmsHTTPClientImpl{client}
}

func (c *UmsHTTPClientImpl) CreateAccountUser(ctx context.Context, in *CreateAccountUserReq, opts ...http.CallOption) (*CreateAccountUserResp, error) {
	var out CreateAccountUserResp
	pattern := "/api/account_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Ums/CreateAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) DeleteAccountUser(ctx context.Context, in *DeleteAccountUserReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Ums/DeleteAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) GetAccountUser(ctx context.Context, in *GetAccountUserReq, opts ...http.CallOption) (*GetAccountUserResp, error) {
	var out GetAccountUserResp
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Ums/GetAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) ListAccountUser(ctx context.Context, in *ListAccountUserReq, opts ...http.CallOption) (*ListAccountUserResp, error) {
	var out ListAccountUserResp
	pattern := "/api/account_user"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Ums/ListAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UmsHTTPClientImpl) UpdateAccountUser(ctx context.Context, in *UpdateAccountUserReq, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/account_user/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/api.shop.admin.v1.Ums/UpdateAccountUser"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
