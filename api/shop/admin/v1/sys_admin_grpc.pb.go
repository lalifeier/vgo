// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: v1/sys_admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SysClient is the client API for Sys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysClient interface {
	CreateDict(ctx context.Context, in *CreateDictReq, opts ...grpc.CallOption) (*CreateDictResp, error)
	UpdateDict(ctx context.Context, in *UpdateDictReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteDict(ctx context.Context, in *DeleteDictReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDict(ctx context.Context, in *ListDictReq, opts ...grpc.CallOption) (*ListDictResp, error)
	PageListDict(ctx context.Context, in *PageListDictReq, opts ...grpc.CallOption) (*PageListDictResp, error)
	GetDict(ctx context.Context, in *GetDictReq, opts ...grpc.CallOption) (*GetDictResp, error)
}

type sysClient struct {
	cc grpc.ClientConnInterface
}

func NewSysClient(cc grpc.ClientConnInterface) SysClient {
	return &sysClient{cc}
}

func (c *sysClient) CreateDict(ctx context.Context, in *CreateDictReq, opts ...grpc.CallOption) (*CreateDictResp, error) {
	out := new(CreateDictResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Sys/CreateDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) UpdateDict(ctx context.Context, in *UpdateDictReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Sys/UpdateDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) DeleteDict(ctx context.Context, in *DeleteDictReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Sys/DeleteDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) ListDict(ctx context.Context, in *ListDictReq, opts ...grpc.CallOption) (*ListDictResp, error) {
	out := new(ListDictResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Sys/ListDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) PageListDict(ctx context.Context, in *PageListDictReq, opts ...grpc.CallOption) (*PageListDictResp, error) {
	out := new(PageListDictResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Sys/PageListDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysClient) GetDict(ctx context.Context, in *GetDictReq, opts ...grpc.CallOption) (*GetDictResp, error) {
	out := new(GetDictResp)
	err := c.cc.Invoke(ctx, "/api.shop.admin.v1.Sys/GetDict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysServer is the server API for Sys service.
// All implementations must embed UnimplementedSysServer
// for forward compatibility
type SysServer interface {
	CreateDict(context.Context, *CreateDictReq) (*CreateDictResp, error)
	UpdateDict(context.Context, *UpdateDictReq) (*emptypb.Empty, error)
	DeleteDict(context.Context, *DeleteDictReq) (*emptypb.Empty, error)
	ListDict(context.Context, *ListDictReq) (*ListDictResp, error)
	PageListDict(context.Context, *PageListDictReq) (*PageListDictResp, error)
	GetDict(context.Context, *GetDictReq) (*GetDictResp, error)
	mustEmbedUnimplementedSysServer()
}

// UnimplementedSysServer must be embedded to have forward compatible implementations.
type UnimplementedSysServer struct {
}

func (UnimplementedSysServer) CreateDict(context.Context, *CreateDictReq) (*CreateDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDict not implemented")
}
func (UnimplementedSysServer) UpdateDict(context.Context, *UpdateDictReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDict not implemented")
}
func (UnimplementedSysServer) DeleteDict(context.Context, *DeleteDictReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDict not implemented")
}
func (UnimplementedSysServer) ListDict(context.Context, *ListDictReq) (*ListDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDict not implemented")
}
func (UnimplementedSysServer) PageListDict(context.Context, *PageListDictReq) (*PageListDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageListDict not implemented")
}
func (UnimplementedSysServer) GetDict(context.Context, *GetDictReq) (*GetDictResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDict not implemented")
}
func (UnimplementedSysServer) mustEmbedUnimplementedSysServer() {}

// UnsafeSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysServer will
// result in compilation errors.
type UnsafeSysServer interface {
	mustEmbedUnimplementedSysServer()
}

func RegisterSysServer(s grpc.ServiceRegistrar, srv SysServer) {
	s.RegisterService(&Sys_ServiceDesc, srv)
}

func _Sys_CreateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).CreateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Sys/CreateDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).CreateDict(ctx, req.(*CreateDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_UpdateDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).UpdateDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Sys/UpdateDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).UpdateDict(ctx, req.(*UpdateDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_DeleteDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).DeleteDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Sys/DeleteDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).DeleteDict(ctx, req.(*DeleteDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_ListDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).ListDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Sys/ListDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).ListDict(ctx, req.(*ListDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_PageListDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageListDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).PageListDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Sys/PageListDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).PageListDict(ctx, req.(*PageListDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sys_GetDict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysServer).GetDict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shop.admin.v1.Sys/GetDict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysServer).GetDict(ctx, req.(*GetDictReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sys_ServiceDesc is the grpc.ServiceDesc for Sys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shop.admin.v1.Sys",
	HandlerType: (*SysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDict",
			Handler:    _Sys_CreateDict_Handler,
		},
		{
			MethodName: "UpdateDict",
			Handler:    _Sys_UpdateDict_Handler,
		},
		{
			MethodName: "DeleteDict",
			Handler:    _Sys_DeleteDict_Handler,
		},
		{
			MethodName: "ListDict",
			Handler:    _Sys_ListDict_Handler,
		},
		{
			MethodName: "PageListDict",
			Handler:    _Sys_PageListDict_Handler,
		},
		{
			MethodName: "GetDict",
			Handler:    _Sys_GetDict_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/sys_admin.proto",
}
