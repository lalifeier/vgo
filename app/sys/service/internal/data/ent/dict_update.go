// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lalifeier/vvgo/app/sys/service/internal/data/ent/dict"
	"github.com/lalifeier/vvgo/app/sys/service/internal/data/ent/predicate"
)

// DictUpdate is the builder for updating Dict entities.
type DictUpdate struct {
	config
	hooks    []Hook
	mutation *DictMutation
}

// Where appends a list predicates to the DictUpdate builder.
func (du *DictUpdate) Where(ps ...predicate.Dict) *DictUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetCreateAt sets the "create_at" field.
func (du *DictUpdate) SetCreateAt(t time.Time) *DictUpdate {
	du.mutation.SetCreateAt(t)
	return du
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (du *DictUpdate) SetNillableCreateAt(t *time.Time) *DictUpdate {
	if t != nil {
		du.SetCreateAt(*t)
	}
	return du
}

// SetCreateBy sets the "create_by" field.
func (du *DictUpdate) SetCreateBy(i int64) *DictUpdate {
	du.mutation.ResetCreateBy()
	du.mutation.SetCreateBy(i)
	return du
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (du *DictUpdate) SetNillableCreateBy(i *int64) *DictUpdate {
	if i != nil {
		du.SetCreateBy(*i)
	}
	return du
}

// AddCreateBy adds i to the "create_by" field.
func (du *DictUpdate) AddCreateBy(i int64) *DictUpdate {
	du.mutation.AddCreateBy(i)
	return du
}

// SetUpdateAt sets the "update_at" field.
func (du *DictUpdate) SetUpdateAt(t time.Time) *DictUpdate {
	du.mutation.SetUpdateAt(t)
	return du
}

// SetUpdateBy sets the "update_by" field.
func (du *DictUpdate) SetUpdateBy(i int64) *DictUpdate {
	du.mutation.ResetUpdateBy()
	du.mutation.SetUpdateBy(i)
	return du
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (du *DictUpdate) SetNillableUpdateBy(i *int64) *DictUpdate {
	if i != nil {
		du.SetUpdateBy(*i)
	}
	return du
}

// AddUpdateBy adds i to the "update_by" field.
func (du *DictUpdate) AddUpdateBy(i int64) *DictUpdate {
	du.mutation.AddUpdateBy(i)
	return du
}

// SetType sets the "type" field.
func (du *DictUpdate) SetType(s string) *DictUpdate {
	du.mutation.SetType(s)
	return du
}

// SetNillableType sets the "type" field if the given value is not nil.
func (du *DictUpdate) SetNillableType(s *string) *DictUpdate {
	if s != nil {
		du.SetType(*s)
	}
	return du
}

// SetLabel sets the "label" field.
func (du *DictUpdate) SetLabel(s string) *DictUpdate {
	du.mutation.SetLabel(s)
	return du
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (du *DictUpdate) SetNillableLabel(s *string) *DictUpdate {
	if s != nil {
		du.SetLabel(*s)
	}
	return du
}

// SetValue sets the "value" field.
func (du *DictUpdate) SetValue(s string) *DictUpdate {
	du.mutation.SetValue(s)
	return du
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (du *DictUpdate) SetNillableValue(s *string) *DictUpdate {
	if s != nil {
		du.SetValue(*s)
	}
	return du
}

// SetStatus sets the "status" field.
func (du *DictUpdate) SetStatus(i int8) *DictUpdate {
	du.mutation.ResetStatus()
	du.mutation.SetStatus(i)
	return du
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (du *DictUpdate) SetNillableStatus(i *int8) *DictUpdate {
	if i != nil {
		du.SetStatus(*i)
	}
	return du
}

// AddStatus adds i to the "status" field.
func (du *DictUpdate) AddStatus(i int8) *DictUpdate {
	du.mutation.AddStatus(i)
	return du
}

// SetRemark sets the "remark" field.
func (du *DictUpdate) SetRemark(s string) *DictUpdate {
	du.mutation.SetRemark(s)
	return du
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (du *DictUpdate) SetNillableRemark(s *string) *DictUpdate {
	if s != nil {
		du.SetRemark(*s)
	}
	return du
}

// SetSort sets the "sort" field.
func (du *DictUpdate) SetSort(i int8) *DictUpdate {
	du.mutation.ResetSort()
	du.mutation.SetSort(i)
	return du
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (du *DictUpdate) SetNillableSort(i *int8) *DictUpdate {
	if i != nil {
		du.SetSort(*i)
	}
	return du
}

// AddSort adds i to the "sort" field.
func (du *DictUpdate) AddSort(i int8) *DictUpdate {
	du.mutation.AddSort(i)
	return du
}

// SetIsDefault sets the "is_default" field.
func (du *DictUpdate) SetIsDefault(i int8) *DictUpdate {
	du.mutation.ResetIsDefault()
	du.mutation.SetIsDefault(i)
	return du
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (du *DictUpdate) SetNillableIsDefault(i *int8) *DictUpdate {
	if i != nil {
		du.SetIsDefault(*i)
	}
	return du
}

// AddIsDefault adds i to the "is_default" field.
func (du *DictUpdate) AddIsDefault(i int8) *DictUpdate {
	du.mutation.AddIsDefault(i)
	return du
}

// SetIsDeleted sets the "is_deleted" field.
func (du *DictUpdate) SetIsDeleted(i int8) *DictUpdate {
	du.mutation.ResetIsDeleted()
	du.mutation.SetIsDeleted(i)
	return du
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (du *DictUpdate) SetNillableIsDeleted(i *int8) *DictUpdate {
	if i != nil {
		du.SetIsDeleted(*i)
	}
	return du
}

// AddIsDeleted adds i to the "is_deleted" field.
func (du *DictUpdate) AddIsDeleted(i int8) *DictUpdate {
	du.mutation.AddIsDeleted(i)
	return du
}

// Mutation returns the DictMutation object of the builder.
func (du *DictUpdate) Mutation() *DictMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DictUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := du.defaults(); err != nil {
		return 0, err
	}
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			if du.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DictUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DictUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DictUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (du *DictUpdate) defaults() error {
	if _, ok := du.mutation.UpdateAt(); !ok {
		if dict.UpdateDefaultUpdateAt == nil {
			return fmt.Errorf("ent: uninitialized dict.UpdateDefaultUpdateAt (forgotten import ent/runtime?)")
		}
		v := dict.UpdateDefaultUpdateAt()
		du.mutation.SetUpdateAt(v)
	}
	return nil
}

func (du *DictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dict.Table,
			Columns: dict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: dict.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dict.FieldCreateAt,
		})
	}
	if value, ok := du.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dict.FieldCreateBy,
		})
	}
	if value, ok := du.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dict.FieldCreateBy,
		})
	}
	if value, ok := du.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dict.FieldUpdateAt,
		})
	}
	if value, ok := du.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dict.FieldUpdateBy,
		})
	}
	if value, ok := du.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dict.FieldUpdateBy,
		})
	}
	if value, ok := du.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dict.FieldType,
		})
	}
	if value, ok := du.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dict.FieldLabel,
		})
	}
	if value, ok := du.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dict.FieldValue,
		})
	}
	if value, ok := du.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldStatus,
		})
	}
	if value, ok := du.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldStatus,
		})
	}
	if value, ok := du.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dict.FieldRemark,
		})
	}
	if value, ok := du.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldSort,
		})
	}
	if value, ok := du.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldSort,
		})
	}
	if value, ok := du.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldIsDefault,
		})
	}
	if value, ok := du.mutation.AddedIsDefault(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldIsDefault,
		})
	}
	if value, ok := du.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldIsDeleted,
		})
	}
	if value, ok := du.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldIsDeleted,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DictUpdateOne is the builder for updating a single Dict entity.
type DictUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictMutation
}

// SetCreateAt sets the "create_at" field.
func (duo *DictUpdateOne) SetCreateAt(t time.Time) *DictUpdateOne {
	duo.mutation.SetCreateAt(t)
	return duo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableCreateAt(t *time.Time) *DictUpdateOne {
	if t != nil {
		duo.SetCreateAt(*t)
	}
	return duo
}

// SetCreateBy sets the "create_by" field.
func (duo *DictUpdateOne) SetCreateBy(i int64) *DictUpdateOne {
	duo.mutation.ResetCreateBy()
	duo.mutation.SetCreateBy(i)
	return duo
}

// SetNillableCreateBy sets the "create_by" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableCreateBy(i *int64) *DictUpdateOne {
	if i != nil {
		duo.SetCreateBy(*i)
	}
	return duo
}

// AddCreateBy adds i to the "create_by" field.
func (duo *DictUpdateOne) AddCreateBy(i int64) *DictUpdateOne {
	duo.mutation.AddCreateBy(i)
	return duo
}

// SetUpdateAt sets the "update_at" field.
func (duo *DictUpdateOne) SetUpdateAt(t time.Time) *DictUpdateOne {
	duo.mutation.SetUpdateAt(t)
	return duo
}

// SetUpdateBy sets the "update_by" field.
func (duo *DictUpdateOne) SetUpdateBy(i int64) *DictUpdateOne {
	duo.mutation.ResetUpdateBy()
	duo.mutation.SetUpdateBy(i)
	return duo
}

// SetNillableUpdateBy sets the "update_by" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableUpdateBy(i *int64) *DictUpdateOne {
	if i != nil {
		duo.SetUpdateBy(*i)
	}
	return duo
}

// AddUpdateBy adds i to the "update_by" field.
func (duo *DictUpdateOne) AddUpdateBy(i int64) *DictUpdateOne {
	duo.mutation.AddUpdateBy(i)
	return duo
}

// SetType sets the "type" field.
func (duo *DictUpdateOne) SetType(s string) *DictUpdateOne {
	duo.mutation.SetType(s)
	return duo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableType(s *string) *DictUpdateOne {
	if s != nil {
		duo.SetType(*s)
	}
	return duo
}

// SetLabel sets the "label" field.
func (duo *DictUpdateOne) SetLabel(s string) *DictUpdateOne {
	duo.mutation.SetLabel(s)
	return duo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableLabel(s *string) *DictUpdateOne {
	if s != nil {
		duo.SetLabel(*s)
	}
	return duo
}

// SetValue sets the "value" field.
func (duo *DictUpdateOne) SetValue(s string) *DictUpdateOne {
	duo.mutation.SetValue(s)
	return duo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableValue(s *string) *DictUpdateOne {
	if s != nil {
		duo.SetValue(*s)
	}
	return duo
}

// SetStatus sets the "status" field.
func (duo *DictUpdateOne) SetStatus(i int8) *DictUpdateOne {
	duo.mutation.ResetStatus()
	duo.mutation.SetStatus(i)
	return duo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableStatus(i *int8) *DictUpdateOne {
	if i != nil {
		duo.SetStatus(*i)
	}
	return duo
}

// AddStatus adds i to the "status" field.
func (duo *DictUpdateOne) AddStatus(i int8) *DictUpdateOne {
	duo.mutation.AddStatus(i)
	return duo
}

// SetRemark sets the "remark" field.
func (duo *DictUpdateOne) SetRemark(s string) *DictUpdateOne {
	duo.mutation.SetRemark(s)
	return duo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableRemark(s *string) *DictUpdateOne {
	if s != nil {
		duo.SetRemark(*s)
	}
	return duo
}

// SetSort sets the "sort" field.
func (duo *DictUpdateOne) SetSort(i int8) *DictUpdateOne {
	duo.mutation.ResetSort()
	duo.mutation.SetSort(i)
	return duo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableSort(i *int8) *DictUpdateOne {
	if i != nil {
		duo.SetSort(*i)
	}
	return duo
}

// AddSort adds i to the "sort" field.
func (duo *DictUpdateOne) AddSort(i int8) *DictUpdateOne {
	duo.mutation.AddSort(i)
	return duo
}

// SetIsDefault sets the "is_default" field.
func (duo *DictUpdateOne) SetIsDefault(i int8) *DictUpdateOne {
	duo.mutation.ResetIsDefault()
	duo.mutation.SetIsDefault(i)
	return duo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableIsDefault(i *int8) *DictUpdateOne {
	if i != nil {
		duo.SetIsDefault(*i)
	}
	return duo
}

// AddIsDefault adds i to the "is_default" field.
func (duo *DictUpdateOne) AddIsDefault(i int8) *DictUpdateOne {
	duo.mutation.AddIsDefault(i)
	return duo
}

// SetIsDeleted sets the "is_deleted" field.
func (duo *DictUpdateOne) SetIsDeleted(i int8) *DictUpdateOne {
	duo.mutation.ResetIsDeleted()
	duo.mutation.SetIsDeleted(i)
	return duo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (duo *DictUpdateOne) SetNillableIsDeleted(i *int8) *DictUpdateOne {
	if i != nil {
		duo.SetIsDeleted(*i)
	}
	return duo
}

// AddIsDeleted adds i to the "is_deleted" field.
func (duo *DictUpdateOne) AddIsDeleted(i int8) *DictUpdateOne {
	duo.mutation.AddIsDeleted(i)
	return duo
}

// Mutation returns the DictMutation object of the builder.
func (duo *DictUpdateOne) Mutation() *DictMutation {
	return duo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DictUpdateOne) Select(field string, fields ...string) *DictUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Dict entity.
func (duo *DictUpdateOne) Save(ctx context.Context) (*Dict, error) {
	var (
		err  error
		node *Dict
	)
	if err := duo.defaults(); err != nil {
		return nil, err
	}
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			if duo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DictUpdateOne) SaveX(ctx context.Context) *Dict {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DictUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DictUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (duo *DictUpdateOne) defaults() error {
	if _, ok := duo.mutation.UpdateAt(); !ok {
		if dict.UpdateDefaultUpdateAt == nil {
			return fmt.Errorf("ent: uninitialized dict.UpdateDefaultUpdateAt (forgotten import ent/runtime?)")
		}
		v := dict.UpdateDefaultUpdateAt()
		duo.mutation.SetUpdateAt(v)
	}
	return nil
}

func (duo *DictUpdateOne) sqlSave(ctx context.Context) (_node *Dict, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dict.Table,
			Columns: dict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: dict.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Dict.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dict.FieldID)
		for _, f := range fields {
			if !dict.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dict.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dict.FieldCreateAt,
		})
	}
	if value, ok := duo.mutation.CreateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dict.FieldCreateBy,
		})
	}
	if value, ok := duo.mutation.AddedCreateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dict.FieldCreateBy,
		})
	}
	if value, ok := duo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dict.FieldUpdateAt,
		})
	}
	if value, ok := duo.mutation.UpdateBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dict.FieldUpdateBy,
		})
	}
	if value, ok := duo.mutation.AddedUpdateBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dict.FieldUpdateBy,
		})
	}
	if value, ok := duo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dict.FieldType,
		})
	}
	if value, ok := duo.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dict.FieldLabel,
		})
	}
	if value, ok := duo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dict.FieldValue,
		})
	}
	if value, ok := duo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldStatus,
		})
	}
	if value, ok := duo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldStatus,
		})
	}
	if value, ok := duo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dict.FieldRemark,
		})
	}
	if value, ok := duo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldSort,
		})
	}
	if value, ok := duo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldSort,
		})
	}
	if value, ok := duo.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldIsDefault,
		})
	}
	if value, ok := duo.mutation.AddedIsDefault(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldIsDefault,
		})
	}
	if value, ok := duo.mutation.IsDeleted(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldIsDeleted,
		})
	}
	if value, ok := duo.mutation.AddedIsDeleted(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dict.FieldIsDeleted,
		})
	}
	_node = &Dict{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dict.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
