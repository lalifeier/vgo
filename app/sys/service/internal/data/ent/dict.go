// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/lalifeier/vvgo/app/sys/service/internal/data/ent/dict"
)

// Dict is the model entity for the Dict schema.
type Dict struct {
	config `json:"-"`
	// ID of the ent.
	// 字典数据id
	ID int64 `json:"id,omitempty"`
	// DictTypeID holds the value of the "dict_type_id" field.
	// 字典类型id
	DictTypeID int64 `json:"dict_type_id,omitempty"`
	// Type holds the value of the "type" field.
	// 字典类型
	Type string `json:"type,omitempty"`
	// Label holds the value of the "label" field.
	// 字典标签
	Label string `json:"label,omitempty"`
	// Value holds the value of the "value" field.
	// 字典键值
	Value string `json:"value,omitempty"`
	// Status holds the value of the "status" field.
	// 状态 0:禁用 1:启用
	Status int8 `json:"status,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
	// Sort holds the value of the "sort" field.
	// 排序
	Sort int8 `json:"sort,omitempty"`
	// IsDefault holds the value of the "is_default" field.
	// 是否默认值 0:否 1:是
	IsDefault int8 `json:"is_default,omitempty"`
	// CreateAt holds the value of the "create_at" field.
	// 创建时间
	CreateAt int32 `json:"create_at,omitempty"`
	// CreateBy holds the value of the "create_by" field.
	// 更新人
	CreateBy int32 `json:"create_by,omitempty"`
	// UpdateAt holds the value of the "update_at" field.
	// 更新时间
	UpdateAt int32 `json:"update_at,omitempty"`
	// UpdateBy holds the value of the "update_by" field.
	// 更新人
	UpdateBy int32 `json:"update_by,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dict) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dict.FieldID, dict.FieldDictTypeID, dict.FieldStatus, dict.FieldSort, dict.FieldIsDefault, dict.FieldCreateAt, dict.FieldCreateBy, dict.FieldUpdateAt, dict.FieldUpdateBy:
			values[i] = new(sql.NullInt64)
		case dict.FieldType, dict.FieldLabel, dict.FieldValue, dict.FieldRemark:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dict", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dict fields.
func (d *Dict) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dict.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int64(value.Int64)
		case dict.FieldDictTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field dict_type_id", values[i])
			} else if value.Valid {
				d.DictTypeID = value.Int64
			}
		case dict.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				d.Type = value.String
			}
		case dict.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				d.Label = value.String
			}
		case dict.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				d.Value = value.String
			}
		case dict.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				d.Status = int8(value.Int64)
			}
		case dict.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				d.Remark = value.String
			}
		case dict.FieldSort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sort", values[i])
			} else if value.Valid {
				d.Sort = int8(value.Int64)
			}
		case dict.FieldIsDefault:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_default", values[i])
			} else if value.Valid {
				d.IsDefault = int8(value.Int64)
			}
		case dict.FieldCreateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_at", values[i])
			} else if value.Valid {
				d.CreateAt = int32(value.Int64)
			}
		case dict.FieldCreateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_by", values[i])
			} else if value.Valid {
				d.CreateBy = int32(value.Int64)
			}
		case dict.FieldUpdateAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_at", values[i])
			} else if value.Valid {
				d.UpdateAt = int32(value.Int64)
			}
		case dict.FieldUpdateBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_by", values[i])
			} else if value.Valid {
				d.UpdateBy = int32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Dict.
// Note that you need to call Dict.Unwrap() before calling this method if this Dict
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dict) Update() *DictUpdateOne {
	return (&DictClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dict entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dict) Unwrap() *Dict {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dict is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dict) String() string {
	var builder strings.Builder
	builder.WriteString("Dict(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", dict_type_id=")
	builder.WriteString(fmt.Sprintf("%v", d.DictTypeID))
	builder.WriteString(", type=")
	builder.WriteString(d.Type)
	builder.WriteString(", label=")
	builder.WriteString(d.Label)
	builder.WriteString(", value=")
	builder.WriteString(d.Value)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", d.Status))
	builder.WriteString(", remark=")
	builder.WriteString(d.Remark)
	builder.WriteString(", sort=")
	builder.WriteString(fmt.Sprintf("%v", d.Sort))
	builder.WriteString(", is_default=")
	builder.WriteString(fmt.Sprintf("%v", d.IsDefault))
	builder.WriteString(", create_at=")
	builder.WriteString(fmt.Sprintf("%v", d.CreateAt))
	builder.WriteString(", create_by=")
	builder.WriteString(fmt.Sprintf("%v", d.CreateBy))
	builder.WriteString(", update_at=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdateAt))
	builder.WriteString(", update_by=")
	builder.WriteString(fmt.Sprintf("%v", d.UpdateBy))
	builder.WriteByte(')')
	return builder.String()
}

// Dicts is a parsable slice of Dict.
type Dicts []*Dict

func (d Dicts) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
