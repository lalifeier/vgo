// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lalifeier/vvgo-mall/app/account/service/internal/data/ent/predicate"
	"github.com/lalifeier/vvgo-mall/app/account/service/internal/data/ent/staff"
)

// StaffUpdate is the builder for updating Staff entities.
type StaffUpdate struct {
	config
	hooks    []Hook
	mutation *StaffMutation
}

// Where appends a list predicates to the StaffUpdate builder.
func (su *StaffUpdate) Where(ps ...predicate.Staff) *StaffUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUID sets the "uid" field.
func (su *StaffUpdate) SetUID(i int64) *StaffUpdate {
	su.mutation.ResetUID()
	su.mutation.SetUID(i)
	return su
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (su *StaffUpdate) SetNillableUID(i *int64) *StaffUpdate {
	if i != nil {
		su.SetUID(*i)
	}
	return su
}

// AddUID adds i to the "uid" field.
func (su *StaffUpdate) AddUID(i int64) *StaffUpdate {
	su.mutation.AddUID(i)
	return su
}

// SetName sets the "name" field.
func (su *StaffUpdate) SetName(s string) *StaffUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StaffUpdate) SetNillableName(s *string) *StaffUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetPhone sets the "phone" field.
func (su *StaffUpdate) SetPhone(s string) *StaffUpdate {
	su.mutation.SetPhone(s)
	return su
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (su *StaffUpdate) SetNillablePhone(s *string) *StaffUpdate {
	if s != nil {
		su.SetPhone(*s)
	}
	return su
}

// SetEmail sets the "email" field.
func (su *StaffUpdate) SetEmail(s string) *StaffUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (su *StaffUpdate) SetNillableEmail(s *string) *StaffUpdate {
	if s != nil {
		su.SetEmail(*s)
	}
	return su
}

// SetNickname sets the "nickname" field.
func (su *StaffUpdate) SetNickname(s string) *StaffUpdate {
	su.mutation.SetNickname(s)
	return su
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (su *StaffUpdate) SetNillableNickname(s *string) *StaffUpdate {
	if s != nil {
		su.SetNickname(*s)
	}
	return su
}

// SetAvatar sets the "avatar" field.
func (su *StaffUpdate) SetAvatar(s string) *StaffUpdate {
	su.mutation.SetAvatar(s)
	return su
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (su *StaffUpdate) SetNillableAvatar(s *string) *StaffUpdate {
	if s != nil {
		su.SetAvatar(*s)
	}
	return su
}

// SetGender sets the "gender" field.
func (su *StaffUpdate) SetGender(i int8) *StaffUpdate {
	su.mutation.ResetGender()
	su.mutation.SetGender(i)
	return su
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (su *StaffUpdate) SetNillableGender(i *int8) *StaffUpdate {
	if i != nil {
		su.SetGender(*i)
	}
	return su
}

// AddGender adds i to the "gender" field.
func (su *StaffUpdate) AddGender(i int8) *StaffUpdate {
	su.mutation.AddGender(i)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StaffUpdate) SetCreatedAt(t time.Time) *StaffUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StaffUpdate) SetNillableCreatedAt(t *time.Time) *StaffUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetCreatedBy sets the "created_by" field.
func (su *StaffUpdate) SetCreatedBy(i int64) *StaffUpdate {
	su.mutation.ResetCreatedBy()
	su.mutation.SetCreatedBy(i)
	return su
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (su *StaffUpdate) SetNillableCreatedBy(i *int64) *StaffUpdate {
	if i != nil {
		su.SetCreatedBy(*i)
	}
	return su
}

// AddCreatedBy adds i to the "created_by" field.
func (su *StaffUpdate) AddCreatedBy(i int64) *StaffUpdate {
	su.mutation.AddCreatedBy(i)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StaffUpdate) SetUpdatedAt(t time.Time) *StaffUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *StaffUpdate) SetUpdatedBy(i int64) *StaffUpdate {
	su.mutation.ResetUpdatedBy()
	su.mutation.SetUpdatedBy(i)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *StaffUpdate) SetNillableUpdatedBy(i *int64) *StaffUpdate {
	if i != nil {
		su.SetUpdatedBy(*i)
	}
	return su
}

// AddUpdatedBy adds i to the "updated_by" field.
func (su *StaffUpdate) AddUpdatedBy(i int64) *StaffUpdate {
	su.mutation.AddUpdatedBy(i)
	return su
}

// Mutation returns the StaffMutation object of the builder.
func (su *StaffUpdate) Mutation() *StaffMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StaffUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StaffUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StaffUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StaffUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StaffUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := staff.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

func (su *StaffUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staff.Table,
			Columns: staff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: staff.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldUID,
		})
	}
	if value, ok := su.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldUID,
		})
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldName,
		})
	}
	if value, ok := su.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldPhone,
		})
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldEmail,
		})
	}
	if value, ok := su.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldNickname,
		})
	}
	if value, ok := su.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldAvatar,
		})
	}
	if value, ok := su.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staff.FieldGender,
		})
	}
	if value, ok := su.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staff.FieldGender,
		})
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staff.FieldCreatedAt,
		})
	}
	if value, ok := su.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldCreatedBy,
		})
	}
	if value, ok := su.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldCreatedBy,
		})
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staff.FieldUpdatedAt,
		})
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldUpdatedBy,
		})
	}
	if value, ok := su.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldUpdatedBy,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// StaffUpdateOne is the builder for updating a single Staff entity.
type StaffUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StaffMutation
}

// SetUID sets the "uid" field.
func (suo *StaffUpdateOne) SetUID(i int64) *StaffUpdateOne {
	suo.mutation.ResetUID()
	suo.mutation.SetUID(i)
	return suo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableUID(i *int64) *StaffUpdateOne {
	if i != nil {
		suo.SetUID(*i)
	}
	return suo
}

// AddUID adds i to the "uid" field.
func (suo *StaffUpdateOne) AddUID(i int64) *StaffUpdateOne {
	suo.mutation.AddUID(i)
	return suo
}

// SetName sets the "name" field.
func (suo *StaffUpdateOne) SetName(s string) *StaffUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableName(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetPhone sets the "phone" field.
func (suo *StaffUpdateOne) SetPhone(s string) *StaffUpdateOne {
	suo.mutation.SetPhone(s)
	return suo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillablePhone(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetPhone(*s)
	}
	return suo
}

// SetEmail sets the "email" field.
func (suo *StaffUpdateOne) SetEmail(s string) *StaffUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableEmail(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetEmail(*s)
	}
	return suo
}

// SetNickname sets the "nickname" field.
func (suo *StaffUpdateOne) SetNickname(s string) *StaffUpdateOne {
	suo.mutation.SetNickname(s)
	return suo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableNickname(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetNickname(*s)
	}
	return suo
}

// SetAvatar sets the "avatar" field.
func (suo *StaffUpdateOne) SetAvatar(s string) *StaffUpdateOne {
	suo.mutation.SetAvatar(s)
	return suo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableAvatar(s *string) *StaffUpdateOne {
	if s != nil {
		suo.SetAvatar(*s)
	}
	return suo
}

// SetGender sets the "gender" field.
func (suo *StaffUpdateOne) SetGender(i int8) *StaffUpdateOne {
	suo.mutation.ResetGender()
	suo.mutation.SetGender(i)
	return suo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableGender(i *int8) *StaffUpdateOne {
	if i != nil {
		suo.SetGender(*i)
	}
	return suo
}

// AddGender adds i to the "gender" field.
func (suo *StaffUpdateOne) AddGender(i int8) *StaffUpdateOne {
	suo.mutation.AddGender(i)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StaffUpdateOne) SetCreatedAt(t time.Time) *StaffUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableCreatedAt(t *time.Time) *StaffUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetCreatedBy sets the "created_by" field.
func (suo *StaffUpdateOne) SetCreatedBy(i int64) *StaffUpdateOne {
	suo.mutation.ResetCreatedBy()
	suo.mutation.SetCreatedBy(i)
	return suo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableCreatedBy(i *int64) *StaffUpdateOne {
	if i != nil {
		suo.SetCreatedBy(*i)
	}
	return suo
}

// AddCreatedBy adds i to the "created_by" field.
func (suo *StaffUpdateOne) AddCreatedBy(i int64) *StaffUpdateOne {
	suo.mutation.AddCreatedBy(i)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StaffUpdateOne) SetUpdatedAt(t time.Time) *StaffUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *StaffUpdateOne) SetUpdatedBy(i int64) *StaffUpdateOne {
	suo.mutation.ResetUpdatedBy()
	suo.mutation.SetUpdatedBy(i)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *StaffUpdateOne) SetNillableUpdatedBy(i *int64) *StaffUpdateOne {
	if i != nil {
		suo.SetUpdatedBy(*i)
	}
	return suo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (suo *StaffUpdateOne) AddUpdatedBy(i int64) *StaffUpdateOne {
	suo.mutation.AddUpdatedBy(i)
	return suo
}

// Mutation returns the StaffMutation object of the builder.
func (suo *StaffUpdateOne) Mutation() *StaffMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StaffUpdateOne) Select(field string, fields ...string) *StaffUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Staff entity.
func (suo *StaffUpdateOne) Save(ctx context.Context) (*Staff, error) {
	var (
		err  error
		node *Staff
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StaffMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StaffUpdateOne) SaveX(ctx context.Context) *Staff {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StaffUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StaffUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StaffUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := staff.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

func (suo *StaffUpdateOne) sqlSave(ctx context.Context) (_node *Staff, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   staff.Table,
			Columns: staff.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: staff.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Staff.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, staff.FieldID)
		for _, f := range fields {
			if !staff.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != staff.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldUID,
		})
	}
	if value, ok := suo.mutation.AddedUID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldUID,
		})
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldName,
		})
	}
	if value, ok := suo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldPhone,
		})
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldEmail,
		})
	}
	if value, ok := suo.mutation.Nickname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldNickname,
		})
	}
	if value, ok := suo.mutation.Avatar(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: staff.FieldAvatar,
		})
	}
	if value, ok := suo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staff.FieldGender,
		})
	}
	if value, ok := suo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: staff.FieldGender,
		})
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staff.FieldCreatedAt,
		})
	}
	if value, ok := suo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldCreatedBy,
		})
	}
	if value, ok := suo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldCreatedBy,
		})
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: staff.FieldUpdatedAt,
		})
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldUpdatedBy,
		})
	}
	if value, ok := suo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: staff.FieldUpdatedBy,
		})
	}
	_node = &Staff{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{staff.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
