// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lalifeier/vgo/app/account/service/internal/data/ent/accountplatform"
)

// AccountPlatformCreate is the builder for creating a AccountPlatform entity.
type AccountPlatformCreate struct {
	config
	mutation *AccountPlatformMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (apc *AccountPlatformCreate) SetUID(i int32) *AccountPlatformCreate {
	apc.mutation.SetUID(i)
	return apc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (apc *AccountPlatformCreate) SetNillableUID(i *int32) *AccountPlatformCreate {
	if i != nil {
		apc.SetUID(*i)
	}
	return apc
}

// SetPlatformID sets the "platform_id" field.
func (apc *AccountPlatformCreate) SetPlatformID(s string) *AccountPlatformCreate {
	apc.mutation.SetPlatformID(s)
	return apc
}

// SetNillablePlatformID sets the "platform_id" field if the given value is not nil.
func (apc *AccountPlatformCreate) SetNillablePlatformID(s *string) *AccountPlatformCreate {
	if s != nil {
		apc.SetPlatformID(*s)
	}
	return apc
}

// SetPlatformToken sets the "platform_token" field.
func (apc *AccountPlatformCreate) SetPlatformToken(s string) *AccountPlatformCreate {
	apc.mutation.SetPlatformToken(s)
	return apc
}

// SetNillablePlatformToken sets the "platform_token" field if the given value is not nil.
func (apc *AccountPlatformCreate) SetNillablePlatformToken(s *string) *AccountPlatformCreate {
	if s != nil {
		apc.SetPlatformToken(*s)
	}
	return apc
}

// SetType sets the "type" field.
func (apc *AccountPlatformCreate) SetType(i int8) *AccountPlatformCreate {
	apc.mutation.SetType(i)
	return apc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (apc *AccountPlatformCreate) SetNillableType(i *int8) *AccountPlatformCreate {
	if i != nil {
		apc.SetType(*i)
	}
	return apc
}

// SetNickname sets the "nickname" field.
func (apc *AccountPlatformCreate) SetNickname(s string) *AccountPlatformCreate {
	apc.mutation.SetNickname(s)
	return apc
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (apc *AccountPlatformCreate) SetNillableNickname(s *string) *AccountPlatformCreate {
	if s != nil {
		apc.SetNickname(*s)
	}
	return apc
}

// SetAvatar sets the "avatar" field.
func (apc *AccountPlatformCreate) SetAvatar(s string) *AccountPlatformCreate {
	apc.mutation.SetAvatar(s)
	return apc
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (apc *AccountPlatformCreate) SetNillableAvatar(s *string) *AccountPlatformCreate {
	if s != nil {
		apc.SetAvatar(*s)
	}
	return apc
}

// SetCreateAt sets the "create_at" field.
func (apc *AccountPlatformCreate) SetCreateAt(i int32) *AccountPlatformCreate {
	apc.mutation.SetCreateAt(i)
	return apc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (apc *AccountPlatformCreate) SetNillableCreateAt(i *int32) *AccountPlatformCreate {
	if i != nil {
		apc.SetCreateAt(*i)
	}
	return apc
}

// SetUpdateAt sets the "update_at" field.
func (apc *AccountPlatformCreate) SetUpdateAt(i int32) *AccountPlatformCreate {
	apc.mutation.SetUpdateAt(i)
	return apc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (apc *AccountPlatformCreate) SetNillableUpdateAt(i *int32) *AccountPlatformCreate {
	if i != nil {
		apc.SetUpdateAt(*i)
	}
	return apc
}

// SetID sets the "id" field.
func (apc *AccountPlatformCreate) SetID(i int64) *AccountPlatformCreate {
	apc.mutation.SetID(i)
	return apc
}

// Mutation returns the AccountPlatformMutation object of the builder.
func (apc *AccountPlatformCreate) Mutation() *AccountPlatformMutation {
	return apc.mutation
}

// Save creates the AccountPlatform in the database.
func (apc *AccountPlatformCreate) Save(ctx context.Context) (*AccountPlatform, error) {
	var (
		err  error
		node *AccountPlatform
	)
	apc.defaults()
	if len(apc.hooks) == 0 {
		if err = apc.check(); err != nil {
			return nil, err
		}
		node, err = apc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountPlatformMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = apc.check(); err != nil {
				return nil, err
			}
			apc.mutation = mutation
			if node, err = apc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(apc.hooks) - 1; i >= 0; i-- {
			if apc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = apc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, apc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (apc *AccountPlatformCreate) SaveX(ctx context.Context) *AccountPlatform {
	v, err := apc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apc *AccountPlatformCreate) Exec(ctx context.Context) error {
	_, err := apc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apc *AccountPlatformCreate) ExecX(ctx context.Context) {
	if err := apc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apc *AccountPlatformCreate) defaults() {
	if _, ok := apc.mutation.UID(); !ok {
		v := accountplatform.DefaultUID
		apc.mutation.SetUID(v)
	}
	if _, ok := apc.mutation.PlatformID(); !ok {
		v := accountplatform.DefaultPlatformID
		apc.mutation.SetPlatformID(v)
	}
	if _, ok := apc.mutation.PlatformToken(); !ok {
		v := accountplatform.DefaultPlatformToken
		apc.mutation.SetPlatformToken(v)
	}
	if _, ok := apc.mutation.GetType(); !ok {
		v := accountplatform.DefaultType
		apc.mutation.SetType(v)
	}
	if _, ok := apc.mutation.Nickname(); !ok {
		v := accountplatform.DefaultNickname
		apc.mutation.SetNickname(v)
	}
	if _, ok := apc.mutation.Avatar(); !ok {
		v := accountplatform.DefaultAvatar
		apc.mutation.SetAvatar(v)
	}
	if _, ok := apc.mutation.CreateAt(); !ok {
		v := accountplatform.DefaultCreateAt
		apc.mutation.SetCreateAt(v)
	}
	if _, ok := apc.mutation.UpdateAt(); !ok {
		v := accountplatform.DefaultUpdateAt
		apc.mutation.SetUpdateAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (apc *AccountPlatformCreate) check() error {
	if _, ok := apc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "uid"`)}
	}
	if _, ok := apc.mutation.PlatformID(); !ok {
		return &ValidationError{Name: "platform_id", err: errors.New(`ent: missing required field "platform_id"`)}
	}
	if _, ok := apc.mutation.PlatformToken(); !ok {
		return &ValidationError{Name: "platform_token", err: errors.New(`ent: missing required field "platform_token"`)}
	}
	if _, ok := apc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if _, ok := apc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "nickname"`)}
	}
	if _, ok := apc.mutation.Avatar(); !ok {
		return &ValidationError{Name: "avatar", err: errors.New(`ent: missing required field "avatar"`)}
	}
	if _, ok := apc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := apc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	return nil
}

func (apc *AccountPlatformCreate) sqlSave(ctx context.Context) (*AccountPlatform, error) {
	_node, _spec := apc.createSpec()
	if err := sqlgraph.CreateNode(ctx, apc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (apc *AccountPlatformCreate) createSpec() (*AccountPlatform, *sqlgraph.CreateSpec) {
	var (
		_node = &AccountPlatform{config: apc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: accountplatform.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: accountplatform.FieldID,
			},
		}
	)
	if id, ok := apc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := apc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: accountplatform.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := apc.mutation.PlatformID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldPlatformID,
		})
		_node.PlatformID = value
	}
	if value, ok := apc.mutation.PlatformToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldPlatformToken,
		})
		_node.PlatformToken = value
	}
	if value, ok := apc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: accountplatform.FieldType,
		})
		_node.Type = value
	}
	if value, ok := apc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := apc.mutation.Avatar(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: accountplatform.FieldAvatar,
		})
		_node.Avatar = value
	}
	if value, ok := apc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: accountplatform.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := apc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: accountplatform.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	return _node, _spec
}

// AccountPlatformCreateBulk is the builder for creating many AccountPlatform entities in bulk.
type AccountPlatformCreateBulk struct {
	config
	builders []*AccountPlatformCreate
}

// Save creates the AccountPlatform entities in the database.
func (apcb *AccountPlatformCreateBulk) Save(ctx context.Context) ([]*AccountPlatform, error) {
	specs := make([]*sqlgraph.CreateSpec, len(apcb.builders))
	nodes := make([]*AccountPlatform, len(apcb.builders))
	mutators := make([]Mutator, len(apcb.builders))
	for i := range apcb.builders {
		func(i int, root context.Context) {
			builder := apcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccountPlatformMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, apcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, apcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, apcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (apcb *AccountPlatformCreateBulk) SaveX(ctx context.Context) []*AccountPlatform {
	v, err := apcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (apcb *AccountPlatformCreateBulk) Exec(ctx context.Context) error {
	_, err := apcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apcb *AccountPlatformCreateBulk) ExecX(ctx context.Context) {
	if err := apcb.Exec(ctx); err != nil {
		panic(err)
	}
}
