// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lalifeier/vvgo-mall/app/account/service/internal/data/ent/staff"
)

// Staff is the model entity for the Staff schema.
type Staff struct {
	config `json:"-"`
	// ID of the ent.
	// 自增id
	ID int64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	// 账号id
	UID int64 `json:"uid,omitempty"`
	// Name holds the value of the "name" field.
	// 员工姓名
	Name string `json:"name,omitempty"`
	// Phone holds the value of the "phone" field.
	// 员工手机号
	Phone string `json:"phone,omitempty"`
	// Email holds the value of the "email" field.
	// 员工邮箱
	Email string `json:"email,omitempty"`
	// Nickname holds the value of the "nickname" field.
	// 员工昵称
	Nickname string `json:"nickname,omitempty"`
	// Avatar holds the value of the "avatar" field.
	// 员工头像(相对路径)
	Avatar string `json:"avatar,omitempty"`
	// Gender holds the value of the "gender" field.
	// 员工性别 1:男性 2:女性
	Gender int8 `json:"gender,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	// 更新人
	CreatedBy int64 `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Staff) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case staff.FieldID, staff.FieldUID, staff.FieldGender, staff.FieldCreatedBy, staff.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case staff.FieldName, staff.FieldPhone, staff.FieldEmail, staff.FieldNickname, staff.FieldAvatar:
			values[i] = new(sql.NullString)
		case staff.FieldCreatedAt, staff.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Staff", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Staff fields.
func (s *Staff) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case staff.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case staff.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				s.UID = value.Int64
			}
		case staff.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case staff.FieldPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone", values[i])
			} else if value.Valid {
				s.Phone = value.String
			}
		case staff.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				s.Email = value.String
			}
		case staff.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				s.Nickname = value.String
			}
		case staff.FieldAvatar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar", values[i])
			} else if value.Valid {
				s.Avatar = value.String
			}
		case staff.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				s.Gender = int8(value.Int64)
			}
		case staff.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case staff.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = value.Int64
			}
		case staff.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case staff.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Staff.
// Note that you need to call Staff.Unwrap() before calling this method if this Staff
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Staff) Update() *StaffUpdateOne {
	return (&StaffClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Staff entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Staff) Unwrap() *Staff {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Staff is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Staff) String() string {
	var builder strings.Builder
	builder.WriteString("Staff(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", uid=")
	builder.WriteString(fmt.Sprintf("%v", s.UID))
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", phone=")
	builder.WriteString(s.Phone)
	builder.WriteString(", email=")
	builder.WriteString(s.Email)
	builder.WriteString(", nickname=")
	builder.WriteString(s.Nickname)
	builder.WriteString(", avatar=")
	builder.WriteString(s.Avatar)
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", s.Gender))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedBy))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// Staffs is a parsable slice of Staff.
type Staffs []*Staff

func (s Staffs) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
