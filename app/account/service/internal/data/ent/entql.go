// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/lalifeier/vvgo-mall/app/account/service/internal/data/ent/accountuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   accountuser.Table,
			Columns: accountuser.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: accountuser.FieldID,
			},
		},
		Type: "AccountUser",
		Fields: map[string]*sqlgraph.FieldSpec{
			accountuser.FieldUsername:      {Type: field.TypeString, Column: accountuser.FieldUsername},
			accountuser.FieldPhone:         {Type: field.TypeString, Column: accountuser.FieldPhone},
			accountuser.FieldEmail:         {Type: field.TypeString, Column: accountuser.FieldEmail},
			accountuser.FieldPassword:      {Type: field.TypeString, Column: accountuser.FieldPassword},
			accountuser.FieldCreateAt:      {Type: field.TypeInt64, Column: accountuser.FieldCreateAt},
			accountuser.FieldCreateIPAt:    {Type: field.TypeString, Column: accountuser.FieldCreateIPAt},
			accountuser.FieldLastLoginAt:   {Type: field.TypeInt64, Column: accountuser.FieldLastLoginAt},
			accountuser.FieldLastLoginIPAt: {Type: field.TypeString, Column: accountuser.FieldLastLoginIPAt},
			accountuser.FieldLoginTimes:    {Type: field.TypeInt64, Column: accountuser.FieldLoginTimes},
			accountuser.FieldStatus:        {Type: field.TypeInt8, Column: accountuser.FieldStatus},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (auq *AccountUserQuery) addPredicate(pred func(s *sql.Selector)) {
	auq.predicates = append(auq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the AccountUserQuery builder.
func (auq *AccountUserQuery) Filter() *AccountUserFilter {
	return &AccountUserFilter{config: auq.config, predicateAdder: auq}
}

// addPredicate implements the predicateAdder interface.
func (m *AccountUserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the AccountUserMutation builder.
func (m *AccountUserMutation) Filter() *AccountUserFilter {
	return &AccountUserFilter{config: m.config, predicateAdder: m}
}

// AccountUserFilter provides a generic filtering capability at runtime for AccountUserQuery.
type AccountUserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *AccountUserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *AccountUserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(accountuser.FieldID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *AccountUserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(accountuser.FieldUsername))
}

// WherePhone applies the entql string predicate on the phone field.
func (f *AccountUserFilter) WherePhone(p entql.StringP) {
	f.Where(p.Field(accountuser.FieldPhone))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *AccountUserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(accountuser.FieldEmail))
}

// WherePassword applies the entql string predicate on the password field.
func (f *AccountUserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(accountuser.FieldPassword))
}

// WhereCreateAt applies the entql int64 predicate on the create_at field.
func (f *AccountUserFilter) WhereCreateAt(p entql.Int64P) {
	f.Where(p.Field(accountuser.FieldCreateAt))
}

// WhereCreateIPAt applies the entql string predicate on the create_ip_at field.
func (f *AccountUserFilter) WhereCreateIPAt(p entql.StringP) {
	f.Where(p.Field(accountuser.FieldCreateIPAt))
}

// WhereLastLoginAt applies the entql int64 predicate on the last_login_at field.
func (f *AccountUserFilter) WhereLastLoginAt(p entql.Int64P) {
	f.Where(p.Field(accountuser.FieldLastLoginAt))
}

// WhereLastLoginIPAt applies the entql string predicate on the last_login_ip_at field.
func (f *AccountUserFilter) WhereLastLoginIPAt(p entql.StringP) {
	f.Where(p.Field(accountuser.FieldLastLoginIPAt))
}

// WhereLoginTimes applies the entql int64 predicate on the login_times field.
func (f *AccountUserFilter) WhereLoginTimes(p entql.Int64P) {
	f.Where(p.Field(accountuser.FieldLoginTimes))
}

// WhereStatus applies the entql int8 predicate on the status field.
func (f *AccountUserFilter) WhereStatus(p entql.Int8P) {
	f.Where(p.Field(accountuser.FieldStatus))
}
