// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/lalifeier/vvgo-mall/app/account/service/internal/biz"
	"github.com/lalifeier/vvgo-mall/gen/api/go/common/conf"
	"github.com/lalifeier/vvgo-mall/app/account/service/internal/data"
	"github.com/lalifeier/vvgo-mall/app/account/service/internal/server"
	"github.com/lalifeier/vvgo-mall/app/account/service/internal/service"
)


// Injectors from wire.go:

// initApp init kratos application.
func wireApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	client := data.NewRedisClient(confData, logger)
	dataData, cleanup, err := data.NewData(confData, client, logger)
	if err != nil {
		return nil, nil, err
	}
	accountUserRepo := data.NewAccountUserRepo(dataData, logger)
	accountUserUseCase := biz.NewAccountUserUseCase(accountUserRepo, logger)
	authUseCase := biz.NewAuthUseCase(accountUserRepo, logger)
	accountService := service.NewAccountService(logger, accountUserUseCase, authUseCase)
	httpServer := server.NewHTTPServer(confServer, logger, accountService)
	grpcServer := server.NewGRPCServer(confServer, logger, accountService)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, httpServer, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
