// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/migrate"

	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/api"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/dictdata"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/dicttype"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/permission"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/role"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/staff"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/user"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/userrole"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Api is the client for interacting with the Api builders.
	Api *ApiClient
	// DictData is the client for interacting with the DictData builders.
	DictData *DictDataClient
	// DictType is the client for interacting with the DictType builders.
	DictType *DictTypeClient
	// Permission is the client for interacting with the Permission builders.
	Permission *PermissionClient
	// Role is the client for interacting with the Role builders.
	Role *RoleClient
	// Staff is the client for interacting with the Staff builders.
	Staff *StaffClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserRole is the client for interacting with the UserRole builders.
	UserRole *UserRoleClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Api = NewApiClient(c.config)
	c.DictData = NewDictDataClient(c.config)
	c.DictType = NewDictTypeClient(c.config)
	c.Permission = NewPermissionClient(c.config)
	c.Role = NewRoleClient(c.config)
	c.Staff = NewStaffClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserRole = NewUserRoleClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Api:        NewApiClient(cfg),
		DictData:   NewDictDataClient(cfg),
		DictType:   NewDictTypeClient(cfg),
		Permission: NewPermissionClient(cfg),
		Role:       NewRoleClient(cfg),
		Staff:      NewStaffClient(cfg),
		User:       NewUserClient(cfg),
		UserRole:   NewUserRoleClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Api:        NewApiClient(cfg),
		DictData:   NewDictDataClient(cfg),
		DictType:   NewDictTypeClient(cfg),
		Permission: NewPermissionClient(cfg),
		Role:       NewRoleClient(cfg),
		Staff:      NewStaffClient(cfg),
		User:       NewUserClient(cfg),
		UserRole:   NewUserRoleClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Api.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Api.Use(hooks...)
	c.DictData.Use(hooks...)
	c.DictType.Use(hooks...)
	c.Permission.Use(hooks...)
	c.Role.Use(hooks...)
	c.Staff.Use(hooks...)
	c.User.Use(hooks...)
	c.UserRole.Use(hooks...)
}

// ApiClient is a client for the Api schema.
type ApiClient struct {
	config
}

// NewApiClient returns a client for the Api from the given config.
func NewApiClient(c config) *ApiClient {
	return &ApiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `api.Hooks(f(g(h())))`.
func (c *ApiClient) Use(hooks ...Hook) {
	c.hooks.Api = append(c.hooks.Api, hooks...)
}

// Create returns a create builder for Api.
func (c *ApiClient) Create() *APICreate {
	mutation := newAPIMutation(c.config, OpCreate)
	return &APICreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Api entities.
func (c *ApiClient) CreateBulk(builders ...*APICreate) *APICreateBulk {
	return &APICreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Api.
func (c *ApiClient) Update() *APIUpdate {
	mutation := newAPIMutation(c.config, OpUpdate)
	return &APIUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ApiClient) UpdateOne(a *Api) *APIUpdateOne {
	mutation := newAPIMutation(c.config, OpUpdateOne, withApi(a))
	return &APIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ApiClient) UpdateOneID(id int64) *APIUpdateOne {
	mutation := newAPIMutation(c.config, OpUpdateOne, withApiID(id))
	return &APIUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Api.
func (c *ApiClient) Delete() *APIDelete {
	mutation := newAPIMutation(c.config, OpDelete)
	return &APIDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ApiClient) DeleteOne(a *Api) *APIDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ApiClient) DeleteOneID(id int64) *APIDeleteOne {
	builder := c.Delete().Where(api.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APIDeleteOne{builder}
}

// Query returns a query builder for Api.
func (c *ApiClient) Query() *APIQuery {
	return &APIQuery{
		config: c.config,
	}
}

// Get returns a Api entity by its id.
func (c *ApiClient) Get(ctx context.Context, id int64) (*Api, error) {
	return c.Query().Where(api.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ApiClient) GetX(ctx context.Context, id int64) *Api {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ApiClient) Hooks() []Hook {
	hooks := c.hooks.Api
	return append(hooks[:len(hooks):len(hooks)], api.Hooks[:]...)
}

// DictDataClient is a client for the DictData schema.
type DictDataClient struct {
	config
}

// NewDictDataClient returns a client for the DictData from the given config.
func NewDictDataClient(c config) *DictDataClient {
	return &DictDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dictdata.Hooks(f(g(h())))`.
func (c *DictDataClient) Use(hooks ...Hook) {
	c.hooks.DictData = append(c.hooks.DictData, hooks...)
}

// Create returns a create builder for DictData.
func (c *DictDataClient) Create() *DictDataCreate {
	mutation := newDictDataMutation(c.config, OpCreate)
	return &DictDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DictData entities.
func (c *DictDataClient) CreateBulk(builders ...*DictDataCreate) *DictDataCreateBulk {
	return &DictDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DictData.
func (c *DictDataClient) Update() *DictDataUpdate {
	mutation := newDictDataMutation(c.config, OpUpdate)
	return &DictDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DictDataClient) UpdateOne(dd *DictData) *DictDataUpdateOne {
	mutation := newDictDataMutation(c.config, OpUpdateOne, withDictData(dd))
	return &DictDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DictDataClient) UpdateOneID(id int64) *DictDataUpdateOne {
	mutation := newDictDataMutation(c.config, OpUpdateOne, withDictDataID(id))
	return &DictDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DictData.
func (c *DictDataClient) Delete() *DictDataDelete {
	mutation := newDictDataMutation(c.config, OpDelete)
	return &DictDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DictDataClient) DeleteOne(dd *DictData) *DictDataDeleteOne {
	return c.DeleteOneID(dd.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DictDataClient) DeleteOneID(id int64) *DictDataDeleteOne {
	builder := c.Delete().Where(dictdata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DictDataDeleteOne{builder}
}

// Query returns a query builder for DictData.
func (c *DictDataClient) Query() *DictDataQuery {
	return &DictDataQuery{
		config: c.config,
	}
}

// Get returns a DictData entity by its id.
func (c *DictDataClient) Get(ctx context.Context, id int64) (*DictData, error) {
	return c.Query().Where(dictdata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DictDataClient) GetX(ctx context.Context, id int64) *DictData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DictDataClient) Hooks() []Hook {
	hooks := c.hooks.DictData
	return append(hooks[:len(hooks):len(hooks)], dictdata.Hooks[:]...)
}

// DictTypeClient is a client for the DictType schema.
type DictTypeClient struct {
	config
}

// NewDictTypeClient returns a client for the DictType from the given config.
func NewDictTypeClient(c config) *DictTypeClient {
	return &DictTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dicttype.Hooks(f(g(h())))`.
func (c *DictTypeClient) Use(hooks ...Hook) {
	c.hooks.DictType = append(c.hooks.DictType, hooks...)
}

// Create returns a create builder for DictType.
func (c *DictTypeClient) Create() *DictTypeCreate {
	mutation := newDictTypeMutation(c.config, OpCreate)
	return &DictTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DictType entities.
func (c *DictTypeClient) CreateBulk(builders ...*DictTypeCreate) *DictTypeCreateBulk {
	return &DictTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DictType.
func (c *DictTypeClient) Update() *DictTypeUpdate {
	mutation := newDictTypeMutation(c.config, OpUpdate)
	return &DictTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DictTypeClient) UpdateOne(dt *DictType) *DictTypeUpdateOne {
	mutation := newDictTypeMutation(c.config, OpUpdateOne, withDictType(dt))
	return &DictTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DictTypeClient) UpdateOneID(id int64) *DictTypeUpdateOne {
	mutation := newDictTypeMutation(c.config, OpUpdateOne, withDictTypeID(id))
	return &DictTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DictType.
func (c *DictTypeClient) Delete() *DictTypeDelete {
	mutation := newDictTypeMutation(c.config, OpDelete)
	return &DictTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DictTypeClient) DeleteOne(dt *DictType) *DictTypeDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DictTypeClient) DeleteOneID(id int64) *DictTypeDeleteOne {
	builder := c.Delete().Where(dicttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DictTypeDeleteOne{builder}
}

// Query returns a query builder for DictType.
func (c *DictTypeClient) Query() *DictTypeQuery {
	return &DictTypeQuery{
		config: c.config,
	}
}

// Get returns a DictType entity by its id.
func (c *DictTypeClient) Get(ctx context.Context, id int64) (*DictType, error) {
	return c.Query().Where(dicttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DictTypeClient) GetX(ctx context.Context, id int64) *DictType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DictTypeClient) Hooks() []Hook {
	hooks := c.hooks.DictType
	return append(hooks[:len(hooks):len(hooks)], dicttype.Hooks[:]...)
}

// PermissionClient is a client for the Permission schema.
type PermissionClient struct {
	config
}

// NewPermissionClient returns a client for the Permission from the given config.
func NewPermissionClient(c config) *PermissionClient {
	return &PermissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `permission.Hooks(f(g(h())))`.
func (c *PermissionClient) Use(hooks ...Hook) {
	c.hooks.Permission = append(c.hooks.Permission, hooks...)
}

// Create returns a create builder for Permission.
func (c *PermissionClient) Create() *PermissionCreate {
	mutation := newPermissionMutation(c.config, OpCreate)
	return &PermissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Permission entities.
func (c *PermissionClient) CreateBulk(builders ...*PermissionCreate) *PermissionCreateBulk {
	return &PermissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Permission.
func (c *PermissionClient) Update() *PermissionUpdate {
	mutation := newPermissionMutation(c.config, OpUpdate)
	return &PermissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PermissionClient) UpdateOne(pe *Permission) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermission(pe))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PermissionClient) UpdateOneID(id int64) *PermissionUpdateOne {
	mutation := newPermissionMutation(c.config, OpUpdateOne, withPermissionID(id))
	return &PermissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Permission.
func (c *PermissionClient) Delete() *PermissionDelete {
	mutation := newPermissionMutation(c.config, OpDelete)
	return &PermissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PermissionClient) DeleteOne(pe *Permission) *PermissionDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PermissionClient) DeleteOneID(id int64) *PermissionDeleteOne {
	builder := c.Delete().Where(permission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PermissionDeleteOne{builder}
}

// Query returns a query builder for Permission.
func (c *PermissionClient) Query() *PermissionQuery {
	return &PermissionQuery{
		config: c.config,
	}
}

// Get returns a Permission entity by its id.
func (c *PermissionClient) Get(ctx context.Context, id int64) (*Permission, error) {
	return c.Query().Where(permission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PermissionClient) GetX(ctx context.Context, id int64) *Permission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PermissionClient) Hooks() []Hook {
	return c.hooks.Permission
}

// RoleClient is a client for the Role schema.
type RoleClient struct {
	config
}

// NewRoleClient returns a client for the Role from the given config.
func NewRoleClient(c config) *RoleClient {
	return &RoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `role.Hooks(f(g(h())))`.
func (c *RoleClient) Use(hooks ...Hook) {
	c.hooks.Role = append(c.hooks.Role, hooks...)
}

// Create returns a create builder for Role.
func (c *RoleClient) Create() *RoleCreate {
	mutation := newRoleMutation(c.config, OpCreate)
	return &RoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Role entities.
func (c *RoleClient) CreateBulk(builders ...*RoleCreate) *RoleCreateBulk {
	return &RoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Role.
func (c *RoleClient) Update() *RoleUpdate {
	mutation := newRoleMutation(c.config, OpUpdate)
	return &RoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoleClient) UpdateOne(r *Role) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRole(r))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoleClient) UpdateOneID(id int64) *RoleUpdateOne {
	mutation := newRoleMutation(c.config, OpUpdateOne, withRoleID(id))
	return &RoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Role.
func (c *RoleClient) Delete() *RoleDelete {
	mutation := newRoleMutation(c.config, OpDelete)
	return &RoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoleClient) DeleteOne(r *Role) *RoleDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoleClient) DeleteOneID(id int64) *RoleDeleteOne {
	builder := c.Delete().Where(role.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoleDeleteOne{builder}
}

// Query returns a query builder for Role.
func (c *RoleClient) Query() *RoleQuery {
	return &RoleQuery{
		config: c.config,
	}
}

// Get returns a Role entity by its id.
func (c *RoleClient) Get(ctx context.Context, id int64) (*Role, error) {
	return c.Query().Where(role.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoleClient) GetX(ctx context.Context, id int64) *Role {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *RoleClient) Hooks() []Hook {
	hooks := c.hooks.Role
	return append(hooks[:len(hooks):len(hooks)], role.Hooks[:]...)
}

// StaffClient is a client for the Staff schema.
type StaffClient struct {
	config
}

// NewStaffClient returns a client for the Staff from the given config.
func NewStaffClient(c config) *StaffClient {
	return &StaffClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `staff.Hooks(f(g(h())))`.
func (c *StaffClient) Use(hooks ...Hook) {
	c.hooks.Staff = append(c.hooks.Staff, hooks...)
}

// Create returns a create builder for Staff.
func (c *StaffClient) Create() *StaffCreate {
	mutation := newStaffMutation(c.config, OpCreate)
	return &StaffCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Staff entities.
func (c *StaffClient) CreateBulk(builders ...*StaffCreate) *StaffCreateBulk {
	return &StaffCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Staff.
func (c *StaffClient) Update() *StaffUpdate {
	mutation := newStaffMutation(c.config, OpUpdate)
	return &StaffUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StaffClient) UpdateOne(s *Staff) *StaffUpdateOne {
	mutation := newStaffMutation(c.config, OpUpdateOne, withStaff(s))
	return &StaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StaffClient) UpdateOneID(id int64) *StaffUpdateOne {
	mutation := newStaffMutation(c.config, OpUpdateOne, withStaffID(id))
	return &StaffUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Staff.
func (c *StaffClient) Delete() *StaffDelete {
	mutation := newStaffMutation(c.config, OpDelete)
	return &StaffDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *StaffClient) DeleteOne(s *Staff) *StaffDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *StaffClient) DeleteOneID(id int64) *StaffDeleteOne {
	builder := c.Delete().Where(staff.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StaffDeleteOne{builder}
}

// Query returns a query builder for Staff.
func (c *StaffClient) Query() *StaffQuery {
	return &StaffQuery{
		config: c.config,
	}
}

// Get returns a Staff entity by its id.
func (c *StaffClient) Get(ctx context.Context, id int64) (*Staff, error) {
	return c.Query().Where(staff.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StaffClient) GetX(ctx context.Context, id int64) *Staff {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StaffClient) Hooks() []Hook {
	return c.hooks.Staff
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int64) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int64) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int64) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int64) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoles queries the roles edge of a User.
func (c *UserClient) QueryRoles(u *User) *RoleQuery {
	query := &RoleQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(role.Table, role.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RolesTable, user.RolesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// UserRoleClient is a client for the UserRole schema.
type UserRoleClient struct {
	config
}

// NewUserRoleClient returns a client for the UserRole from the given config.
func NewUserRoleClient(c config) *UserRoleClient {
	return &UserRoleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userrole.Hooks(f(g(h())))`.
func (c *UserRoleClient) Use(hooks ...Hook) {
	c.hooks.UserRole = append(c.hooks.UserRole, hooks...)
}

// Create returns a create builder for UserRole.
func (c *UserRoleClient) Create() *UserRoleCreate {
	mutation := newUserRoleMutation(c.config, OpCreate)
	return &UserRoleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserRole entities.
func (c *UserRoleClient) CreateBulk(builders ...*UserRoleCreate) *UserRoleCreateBulk {
	return &UserRoleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserRole.
func (c *UserRoleClient) Update() *UserRoleUpdate {
	mutation := newUserRoleMutation(c.config, OpUpdate)
	return &UserRoleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserRoleClient) UpdateOne(ur *UserRole) *UserRoleUpdateOne {
	mutation := newUserRoleMutation(c.config, OpUpdateOne, withUserRole(ur))
	return &UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserRoleClient) UpdateOneID(id int) *UserRoleUpdateOne {
	mutation := newUserRoleMutation(c.config, OpUpdateOne, withUserRoleID(id))
	return &UserRoleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserRole.
func (c *UserRoleClient) Delete() *UserRoleDelete {
	mutation := newUserRoleMutation(c.config, OpDelete)
	return &UserRoleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserRoleClient) DeleteOne(ur *UserRole) *UserRoleDeleteOne {
	return c.DeleteOneID(ur.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserRoleClient) DeleteOneID(id int) *UserRoleDeleteOne {
	builder := c.Delete().Where(userrole.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserRoleDeleteOne{builder}
}

// Query returns a query builder for UserRole.
func (c *UserRoleClient) Query() *UserRoleQuery {
	return &UserRoleQuery{
		config: c.config,
	}
}

// Get returns a UserRole entity by its id.
func (c *UserRoleClient) Get(ctx context.Context, id int) (*UserRole, error) {
	return c.Query().Where(userrole.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserRoleClient) GetX(ctx context.Context, id int) *UserRole {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserRoleClient) Hooks() []Hook {
	return c.hooks.UserRole
}
