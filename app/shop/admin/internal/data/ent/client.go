// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/migrate"

	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/dict"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/dicttype"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Dict is the client for interacting with the Dict builders.
	Dict *DictClient
	// DictType is the client for interacting with the DictType builders.
	DictType *DictTypeClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Dict = NewDictClient(c.config)
	c.DictType = NewDictTypeClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Dict:     NewDictClient(cfg),
		DictType: NewDictTypeClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:   cfg,
		Dict:     NewDictClient(cfg),
		DictType: NewDictTypeClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Dict.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Dict.Use(hooks...)
	c.DictType.Use(hooks...)
}

// DictClient is a client for the Dict schema.
type DictClient struct {
	config
}

// NewDictClient returns a client for the Dict from the given config.
func NewDictClient(c config) *DictClient {
	return &DictClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dict.Hooks(f(g(h())))`.
func (c *DictClient) Use(hooks ...Hook) {
	c.hooks.Dict = append(c.hooks.Dict, hooks...)
}

// Create returns a create builder for Dict.
func (c *DictClient) Create() *DictCreate {
	mutation := newDictMutation(c.config, OpCreate)
	return &DictCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Dict entities.
func (c *DictClient) CreateBulk(builders ...*DictCreate) *DictCreateBulk {
	return &DictCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Dict.
func (c *DictClient) Update() *DictUpdate {
	mutation := newDictMutation(c.config, OpUpdate)
	return &DictUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DictClient) UpdateOne(d *Dict) *DictUpdateOne {
	mutation := newDictMutation(c.config, OpUpdateOne, withDict(d))
	return &DictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DictClient) UpdateOneID(id int64) *DictUpdateOne {
	mutation := newDictMutation(c.config, OpUpdateOne, withDictID(id))
	return &DictUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Dict.
func (c *DictClient) Delete() *DictDelete {
	mutation := newDictMutation(c.config, OpDelete)
	return &DictDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DictClient) DeleteOne(d *Dict) *DictDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DictClient) DeleteOneID(id int64) *DictDeleteOne {
	builder := c.Delete().Where(dict.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DictDeleteOne{builder}
}

// Query returns a query builder for Dict.
func (c *DictClient) Query() *DictQuery {
	return &DictQuery{
		config: c.config,
	}
}

// Get returns a Dict entity by its id.
func (c *DictClient) Get(ctx context.Context, id int64) (*Dict, error) {
	return c.Query().Where(dict.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DictClient) GetX(ctx context.Context, id int64) *Dict {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DictClient) Hooks() []Hook {
	hooks := c.hooks.Dict
	return append(hooks[:len(hooks):len(hooks)], dict.Hooks[:]...)
}

// DictTypeClient is a client for the DictType schema.
type DictTypeClient struct {
	config
}

// NewDictTypeClient returns a client for the DictType from the given config.
func NewDictTypeClient(c config) *DictTypeClient {
	return &DictTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dicttype.Hooks(f(g(h())))`.
func (c *DictTypeClient) Use(hooks ...Hook) {
	c.hooks.DictType = append(c.hooks.DictType, hooks...)
}

// Create returns a create builder for DictType.
func (c *DictTypeClient) Create() *DictTypeCreate {
	mutation := newDictTypeMutation(c.config, OpCreate)
	return &DictTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DictType entities.
func (c *DictTypeClient) CreateBulk(builders ...*DictTypeCreate) *DictTypeCreateBulk {
	return &DictTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DictType.
func (c *DictTypeClient) Update() *DictTypeUpdate {
	mutation := newDictTypeMutation(c.config, OpUpdate)
	return &DictTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DictTypeClient) UpdateOne(dt *DictType) *DictTypeUpdateOne {
	mutation := newDictTypeMutation(c.config, OpUpdateOne, withDictType(dt))
	return &DictTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DictTypeClient) UpdateOneID(id int32) *DictTypeUpdateOne {
	mutation := newDictTypeMutation(c.config, OpUpdateOne, withDictTypeID(id))
	return &DictTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DictType.
func (c *DictTypeClient) Delete() *DictTypeDelete {
	mutation := newDictTypeMutation(c.config, OpDelete)
	return &DictTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DictTypeClient) DeleteOne(dt *DictType) *DictTypeDeleteOne {
	return c.DeleteOneID(dt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DictTypeClient) DeleteOneID(id int32) *DictTypeDeleteOne {
	builder := c.Delete().Where(dicttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DictTypeDeleteOne{builder}
}

// Query returns a query builder for DictType.
func (c *DictTypeClient) Query() *DictTypeQuery {
	return &DictTypeQuery{
		config: c.config,
	}
}

// Get returns a DictType entity by its id.
func (c *DictTypeClient) Get(ctx context.Context, id int32) (*DictType, error) {
	return c.Query().Where(dicttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DictTypeClient) GetX(ctx context.Context, id int32) *DictType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DictTypeClient) Hooks() []Hook {
	hooks := c.hooks.DictType
	return append(hooks[:len(hooks):len(hooks)], dicttype.Hooks[:]...)
}
