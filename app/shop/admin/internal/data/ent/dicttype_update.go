// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/dicttype"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/predicate"
)

// DictTypeUpdate is the builder for updating DictType entities.
type DictTypeUpdate struct {
	config
	hooks    []Hook
	mutation *DictTypeMutation
}

// Where appends a list predicates to the DictTypeUpdate builder.
func (dtu *DictTypeUpdate) Where(ps ...predicate.DictType) *DictTypeUpdate {
	dtu.mutation.Where(ps...)
	return dtu
}

// SetCreatedBy sets the "created_by" field.
func (dtu *DictTypeUpdate) SetCreatedBy(i int64) *DictTypeUpdate {
	dtu.mutation.ResetCreatedBy()
	dtu.mutation.SetCreatedBy(i)
	return dtu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableCreatedBy(i *int64) *DictTypeUpdate {
	if i != nil {
		dtu.SetCreatedBy(*i)
	}
	return dtu
}

// AddCreatedBy adds i to the "created_by" field.
func (dtu *DictTypeUpdate) AddCreatedBy(i int64) *DictTypeUpdate {
	dtu.mutation.AddCreatedBy(i)
	return dtu
}

// SetUpdatedBy sets the "updated_by" field.
func (dtu *DictTypeUpdate) SetUpdatedBy(i int64) *DictTypeUpdate {
	dtu.mutation.ResetUpdatedBy()
	dtu.mutation.SetUpdatedBy(i)
	return dtu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableUpdatedBy(i *int64) *DictTypeUpdate {
	if i != nil {
		dtu.SetUpdatedBy(*i)
	}
	return dtu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dtu *DictTypeUpdate) AddUpdatedBy(i int64) *DictTypeUpdate {
	dtu.mutation.AddUpdatedBy(i)
	return dtu
}

// SetName sets the "name" field.
func (dtu *DictTypeUpdate) SetName(s string) *DictTypeUpdate {
	dtu.mutation.SetName(s)
	return dtu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableName(s *string) *DictTypeUpdate {
	if s != nil {
		dtu.SetName(*s)
	}
	return dtu
}

// SetType sets the "type" field.
func (dtu *DictTypeUpdate) SetType(s string) *DictTypeUpdate {
	dtu.mutation.SetType(s)
	return dtu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableType(s *string) *DictTypeUpdate {
	if s != nil {
		dtu.SetType(*s)
	}
	return dtu
}

// SetStatus sets the "status" field.
func (dtu *DictTypeUpdate) SetStatus(i int8) *DictTypeUpdate {
	dtu.mutation.ResetStatus()
	dtu.mutation.SetStatus(i)
	return dtu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableStatus(i *int8) *DictTypeUpdate {
	if i != nil {
		dtu.SetStatus(*i)
	}
	return dtu
}

// AddStatus adds i to the "status" field.
func (dtu *DictTypeUpdate) AddStatus(i int8) *DictTypeUpdate {
	dtu.mutation.AddStatus(i)
	return dtu
}

// SetRemark sets the "remark" field.
func (dtu *DictTypeUpdate) SetRemark(s string) *DictTypeUpdate {
	dtu.mutation.SetRemark(s)
	return dtu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (dtu *DictTypeUpdate) SetNillableRemark(s *string) *DictTypeUpdate {
	if s != nil {
		dtu.SetRemark(*s)
	}
	return dtu
}

// Mutation returns the DictTypeMutation object of the builder.
func (dtu *DictTypeUpdate) Mutation() *DictTypeMutation {
	return dtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dtu *DictTypeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := dtu.defaults(); err != nil {
		return 0, err
	}
	if len(dtu.hooks) == 0 {
		affected, err = dtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dtu.mutation = mutation
			affected, err = dtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dtu.hooks) - 1; i >= 0; i-- {
			if dtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtu *DictTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := dtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dtu *DictTypeUpdate) Exec(ctx context.Context) error {
	_, err := dtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtu *DictTypeUpdate) ExecX(ctx context.Context) {
	if err := dtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtu *DictTypeUpdate) defaults() error {
	if _, ok := dtu.mutation.UpdatedAt(); !ok {
		if dicttype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dicttype.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dicttype.UpdateDefaultUpdatedAt()
		dtu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (dtu *DictTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dicttype.Table,
			Columns: dicttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: dicttype.FieldID,
			},
		},
	}
	if ps := dtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldCreatedBy,
		})
	}
	if value, ok := dtu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldCreatedBy,
		})
	}
	if value, ok := dtu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dicttype.FieldUpdatedAt,
		})
	}
	if value, ok := dtu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldUpdatedBy,
		})
	}
	if value, ok := dtu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldUpdatedBy,
		})
	}
	if value, ok := dtu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldName,
		})
	}
	if value, ok := dtu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldType,
		})
	}
	if value, ok := dtu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dicttype.FieldStatus,
		})
	}
	if value, ok := dtu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dicttype.FieldStatus,
		})
	}
	if value, ok := dtu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldRemark,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dicttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DictTypeUpdateOne is the builder for updating a single DictType entity.
type DictTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictTypeMutation
}

// SetCreatedBy sets the "created_by" field.
func (dtuo *DictTypeUpdateOne) SetCreatedBy(i int64) *DictTypeUpdateOne {
	dtuo.mutation.ResetCreatedBy()
	dtuo.mutation.SetCreatedBy(i)
	return dtuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableCreatedBy(i *int64) *DictTypeUpdateOne {
	if i != nil {
		dtuo.SetCreatedBy(*i)
	}
	return dtuo
}

// AddCreatedBy adds i to the "created_by" field.
func (dtuo *DictTypeUpdateOne) AddCreatedBy(i int64) *DictTypeUpdateOne {
	dtuo.mutation.AddCreatedBy(i)
	return dtuo
}

// SetUpdatedBy sets the "updated_by" field.
func (dtuo *DictTypeUpdateOne) SetUpdatedBy(i int64) *DictTypeUpdateOne {
	dtuo.mutation.ResetUpdatedBy()
	dtuo.mutation.SetUpdatedBy(i)
	return dtuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableUpdatedBy(i *int64) *DictTypeUpdateOne {
	if i != nil {
		dtuo.SetUpdatedBy(*i)
	}
	return dtuo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dtuo *DictTypeUpdateOne) AddUpdatedBy(i int64) *DictTypeUpdateOne {
	dtuo.mutation.AddUpdatedBy(i)
	return dtuo
}

// SetName sets the "name" field.
func (dtuo *DictTypeUpdateOne) SetName(s string) *DictTypeUpdateOne {
	dtuo.mutation.SetName(s)
	return dtuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableName(s *string) *DictTypeUpdateOne {
	if s != nil {
		dtuo.SetName(*s)
	}
	return dtuo
}

// SetType sets the "type" field.
func (dtuo *DictTypeUpdateOne) SetType(s string) *DictTypeUpdateOne {
	dtuo.mutation.SetType(s)
	return dtuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableType(s *string) *DictTypeUpdateOne {
	if s != nil {
		dtuo.SetType(*s)
	}
	return dtuo
}

// SetStatus sets the "status" field.
func (dtuo *DictTypeUpdateOne) SetStatus(i int8) *DictTypeUpdateOne {
	dtuo.mutation.ResetStatus()
	dtuo.mutation.SetStatus(i)
	return dtuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableStatus(i *int8) *DictTypeUpdateOne {
	if i != nil {
		dtuo.SetStatus(*i)
	}
	return dtuo
}

// AddStatus adds i to the "status" field.
func (dtuo *DictTypeUpdateOne) AddStatus(i int8) *DictTypeUpdateOne {
	dtuo.mutation.AddStatus(i)
	return dtuo
}

// SetRemark sets the "remark" field.
func (dtuo *DictTypeUpdateOne) SetRemark(s string) *DictTypeUpdateOne {
	dtuo.mutation.SetRemark(s)
	return dtuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (dtuo *DictTypeUpdateOne) SetNillableRemark(s *string) *DictTypeUpdateOne {
	if s != nil {
		dtuo.SetRemark(*s)
	}
	return dtuo
}

// Mutation returns the DictTypeMutation object of the builder.
func (dtuo *DictTypeUpdateOne) Mutation() *DictTypeMutation {
	return dtuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dtuo *DictTypeUpdateOne) Select(field string, fields ...string) *DictTypeUpdateOne {
	dtuo.fields = append([]string{field}, fields...)
	return dtuo
}

// Save executes the query and returns the updated DictType entity.
func (dtuo *DictTypeUpdateOne) Save(ctx context.Context) (*DictType, error) {
	var (
		err  error
		node *DictType
	)
	if err := dtuo.defaults(); err != nil {
		return nil, err
	}
	if len(dtuo.hooks) == 0 {
		node, err = dtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dtuo.mutation = mutation
			node, err = dtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dtuo.hooks) - 1; i >= 0; i-- {
			if dtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dtuo *DictTypeUpdateOne) SaveX(ctx context.Context) *DictType {
	node, err := dtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dtuo *DictTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := dtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtuo *DictTypeUpdateOne) ExecX(ctx context.Context) {
	if err := dtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtuo *DictTypeUpdateOne) defaults() error {
	if _, ok := dtuo.mutation.UpdatedAt(); !ok {
		if dicttype.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dicttype.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dicttype.UpdateDefaultUpdatedAt()
		dtuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (dtuo *DictTypeUpdateOne) sqlSave(ctx context.Context) (_node *DictType, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dicttype.Table,
			Columns: dicttype.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: dicttype.FieldID,
			},
		},
	}
	id, ok := dtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DictType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dicttype.FieldID)
		for _, f := range fields {
			if !dicttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dicttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dtuo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldCreatedBy,
		})
	}
	if value, ok := dtuo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldCreatedBy,
		})
	}
	if value, ok := dtuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dicttype.FieldUpdatedAt,
		})
	}
	if value, ok := dtuo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldUpdatedBy,
		})
	}
	if value, ok := dtuo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldUpdatedBy,
		})
	}
	if value, ok := dtuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldName,
		})
	}
	if value, ok := dtuo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldType,
		})
	}
	if value, ok := dtuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dicttype.FieldStatus,
		})
	}
	if value, ok := dtuo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dicttype.FieldStatus,
		})
	}
	if value, ok := dtuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldRemark,
		})
	}
	_node = &DictType{config: dtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dicttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
