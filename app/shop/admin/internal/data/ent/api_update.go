// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/api"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/predicate"
)

// APIUpdate is the builder for updating Api entities.
type APIUpdate struct {
	config
	hooks    []Hook
	mutation *APIMutation
}

// Where appends a list predicates to the APIUpdate builder.
func (au *APIUpdate) Where(ps ...predicate.Api) *APIUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *APIUpdate) SetCreatedAt(t time.Time) *APIUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (au *APIUpdate) SetNillableCreatedAt(t *time.Time) *APIUpdate {
	if t != nil {
		au.SetCreatedAt(*t)
	}
	return au
}

// SetCreatedBy sets the "created_by" field.
func (au *APIUpdate) SetCreatedBy(i int64) *APIUpdate {
	au.mutation.ResetCreatedBy()
	au.mutation.SetCreatedBy(i)
	return au
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (au *APIUpdate) SetNillableCreatedBy(i *int64) *APIUpdate {
	if i != nil {
		au.SetCreatedBy(*i)
	}
	return au
}

// AddCreatedBy adds i to the "created_by" field.
func (au *APIUpdate) AddCreatedBy(i int64) *APIUpdate {
	au.mutation.AddCreatedBy(i)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *APIUpdate) SetUpdatedAt(t time.Time) *APIUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetUpdatedBy sets the "updated_by" field.
func (au *APIUpdate) SetUpdatedBy(i int64) *APIUpdate {
	au.mutation.ResetUpdatedBy()
	au.mutation.SetUpdatedBy(i)
	return au
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (au *APIUpdate) SetNillableUpdatedBy(i *int64) *APIUpdate {
	if i != nil {
		au.SetUpdatedBy(*i)
	}
	return au
}

// AddUpdatedBy adds i to the "updated_by" field.
func (au *APIUpdate) AddUpdatedBy(i int64) *APIUpdate {
	au.mutation.AddUpdatedBy(i)
	return au
}

// SetGroup sets the "group" field.
func (au *APIUpdate) SetGroup(s string) *APIUpdate {
	au.mutation.SetGroup(s)
	return au
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (au *APIUpdate) SetNillableGroup(s *string) *APIUpdate {
	if s != nil {
		au.SetGroup(*s)
	}
	return au
}

// SetName sets the "name" field.
func (au *APIUpdate) SetName(s string) *APIUpdate {
	au.mutation.SetName(s)
	return au
}

// SetNillableName sets the "name" field if the given value is not nil.
func (au *APIUpdate) SetNillableName(s *string) *APIUpdate {
	if s != nil {
		au.SetName(*s)
	}
	return au
}

// SetPath sets the "path" field.
func (au *APIUpdate) SetPath(s string) *APIUpdate {
	au.mutation.SetPath(s)
	return au
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (au *APIUpdate) SetNillablePath(s *string) *APIUpdate {
	if s != nil {
		au.SetPath(*s)
	}
	return au
}

// SetMethod sets the "method" field.
func (au *APIUpdate) SetMethod(s string) *APIUpdate {
	au.mutation.SetMethod(s)
	return au
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (au *APIUpdate) SetNillableMethod(s *string) *APIUpdate {
	if s != nil {
		au.SetMethod(*s)
	}
	return au
}

// SetDesc sets the "desc" field.
func (au *APIUpdate) SetDesc(s string) *APIUpdate {
	au.mutation.SetDesc(s)
	return au
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (au *APIUpdate) SetNillableDesc(s *string) *APIUpdate {
	if s != nil {
		au.SetDesc(*s)
	}
	return au
}

// SetPermission sets the "permission" field.
func (au *APIUpdate) SetPermission(s string) *APIUpdate {
	au.mutation.SetPermission(s)
	return au
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (au *APIUpdate) SetNillablePermission(s *string) *APIUpdate {
	if s != nil {
		au.SetPermission(*s)
	}
	return au
}

// SetStatus sets the "status" field.
func (au *APIUpdate) SetStatus(u uint8) *APIUpdate {
	au.mutation.ResetStatus()
	au.mutation.SetStatus(u)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *APIUpdate) SetNillableStatus(u *uint8) *APIUpdate {
	if u != nil {
		au.SetStatus(*u)
	}
	return au
}

// AddStatus adds u to the "status" field.
func (au *APIUpdate) AddStatus(u int8) *APIUpdate {
	au.mutation.AddStatus(u)
	return au
}

// Mutation returns the APIMutation object of the builder.
func (au *APIUpdate) Mutation() *APIMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *APIUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := au.defaults(); err != nil {
		return 0, err
	}
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *APIUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *APIUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *APIUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *APIUpdate) defaults() error {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		if api.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized api.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := api.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (au *APIUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   api.Table,
			Columns: api.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: api.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := au.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedBy,
		})
	}
	if value, ok := au.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedBy,
		})
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := au.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedBy,
		})
	}
	if value, ok := au.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedBy,
		})
	}
	if value, ok := au.mutation.Group(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldGroup,
		})
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldName,
		})
	}
	if value, ok := au.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPath,
		})
	}
	if value, ok := au.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldMethod,
		})
	}
	if value, ok := au.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldDesc,
		})
	}
	if value, ok := au.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPermission,
		})
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: api.FieldStatus,
		})
	}
	if value, ok := au.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: api.FieldStatus,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// APIUpdateOne is the builder for updating a single Api entity.
type APIUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *APIMutation
}

// SetCreatedAt sets the "created_at" field.
func (auo *APIUpdateOne) SetCreatedAt(t time.Time) *APIUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableCreatedAt(t *time.Time) *APIUpdateOne {
	if t != nil {
		auo.SetCreatedAt(*t)
	}
	return auo
}

// SetCreatedBy sets the "created_by" field.
func (auo *APIUpdateOne) SetCreatedBy(i int64) *APIUpdateOne {
	auo.mutation.ResetCreatedBy()
	auo.mutation.SetCreatedBy(i)
	return auo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableCreatedBy(i *int64) *APIUpdateOne {
	if i != nil {
		auo.SetCreatedBy(*i)
	}
	return auo
}

// AddCreatedBy adds i to the "created_by" field.
func (auo *APIUpdateOne) AddCreatedBy(i int64) *APIUpdateOne {
	auo.mutation.AddCreatedBy(i)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *APIUpdateOne) SetUpdatedAt(t time.Time) *APIUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetUpdatedBy sets the "updated_by" field.
func (auo *APIUpdateOne) SetUpdatedBy(i int64) *APIUpdateOne {
	auo.mutation.ResetUpdatedBy()
	auo.mutation.SetUpdatedBy(i)
	return auo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableUpdatedBy(i *int64) *APIUpdateOne {
	if i != nil {
		auo.SetUpdatedBy(*i)
	}
	return auo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (auo *APIUpdateOne) AddUpdatedBy(i int64) *APIUpdateOne {
	auo.mutation.AddUpdatedBy(i)
	return auo
}

// SetGroup sets the "group" field.
func (auo *APIUpdateOne) SetGroup(s string) *APIUpdateOne {
	auo.mutation.SetGroup(s)
	return auo
}

// SetNillableGroup sets the "group" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableGroup(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetGroup(*s)
	}
	return auo
}

// SetName sets the "name" field.
func (auo *APIUpdateOne) SetName(s string) *APIUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableName(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetName(*s)
	}
	return auo
}

// SetPath sets the "path" field.
func (auo *APIUpdateOne) SetPath(s string) *APIUpdateOne {
	auo.mutation.SetPath(s)
	return auo
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillablePath(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetPath(*s)
	}
	return auo
}

// SetMethod sets the "method" field.
func (auo *APIUpdateOne) SetMethod(s string) *APIUpdateOne {
	auo.mutation.SetMethod(s)
	return auo
}

// SetNillableMethod sets the "method" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableMethod(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetMethod(*s)
	}
	return auo
}

// SetDesc sets the "desc" field.
func (auo *APIUpdateOne) SetDesc(s string) *APIUpdateOne {
	auo.mutation.SetDesc(s)
	return auo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableDesc(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetDesc(*s)
	}
	return auo
}

// SetPermission sets the "permission" field.
func (auo *APIUpdateOne) SetPermission(s string) *APIUpdateOne {
	auo.mutation.SetPermission(s)
	return auo
}

// SetNillablePermission sets the "permission" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillablePermission(s *string) *APIUpdateOne {
	if s != nil {
		auo.SetPermission(*s)
	}
	return auo
}

// SetStatus sets the "status" field.
func (auo *APIUpdateOne) SetStatus(u uint8) *APIUpdateOne {
	auo.mutation.ResetStatus()
	auo.mutation.SetStatus(u)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *APIUpdateOne) SetNillableStatus(u *uint8) *APIUpdateOne {
	if u != nil {
		auo.SetStatus(*u)
	}
	return auo
}

// AddStatus adds u to the "status" field.
func (auo *APIUpdateOne) AddStatus(u int8) *APIUpdateOne {
	auo.mutation.AddStatus(u)
	return auo
}

// Mutation returns the APIMutation object of the builder.
func (auo *APIUpdateOne) Mutation() *APIMutation {
	return auo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *APIUpdateOne) Select(field string, fields ...string) *APIUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Api entity.
func (auo *APIUpdateOne) Save(ctx context.Context) (*Api, error) {
	var (
		err  error
		node *Api
	)
	if err := auo.defaults(); err != nil {
		return nil, err
	}
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*APIMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *APIUpdateOne) SaveX(ctx context.Context) *Api {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *APIUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *APIUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *APIUpdateOne) defaults() error {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		if api.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized api.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := api.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (auo *APIUpdateOne) sqlSave(ctx context.Context) (_node *Api, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   api.Table,
			Columns: api.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: api.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Api.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, api.FieldID)
		for _, f := range fields {
			if !api.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != api.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: api.FieldCreatedAt,
		})
	}
	if value, ok := auo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedBy,
		})
	}
	if value, ok := auo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldCreatedBy,
		})
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: api.FieldUpdatedAt,
		})
	}
	if value, ok := auo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedBy,
		})
	}
	if value, ok := auo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: api.FieldUpdatedBy,
		})
	}
	if value, ok := auo.mutation.Group(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldGroup,
		})
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldName,
		})
	}
	if value, ok := auo.mutation.Path(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPath,
		})
	}
	if value, ok := auo.mutation.Method(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldMethod,
		})
	}
	if value, ok := auo.mutation.Desc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldDesc,
		})
	}
	if value, ok := auo.mutation.Permission(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: api.FieldPermission,
		})
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: api.FieldStatus,
		})
	}
	if value, ok := auo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: api.FieldStatus,
		})
	}
	_node = &Api{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{api.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
