// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/userrole"
)

// UserRole is the model entity for the UserRole schema.
type UserRole struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	// 用户ID
	UserID int64 `json:"user_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	// 角色ID
	RoleID int64 `json:"role_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserRole) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case userrole.FieldID, userrole.FieldUserID, userrole.FieldRoleID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type UserRole", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserRole fields.
func (ur *UserRole) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userrole.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ur.ID = int(value.Int64)
		case userrole.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ur.UserID = value.Int64
			}
		case userrole.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				ur.RoleID = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this UserRole.
// Note that you need to call UserRole.Unwrap() before calling this method if this UserRole
// was returned from a transaction, and the transaction was committed or rolled back.
func (ur *UserRole) Update() *UserRoleUpdateOne {
	return (&UserRoleClient{config: ur.config}).UpdateOne(ur)
}

// Unwrap unwraps the UserRole entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ur *UserRole) Unwrap() *UserRole {
	tx, ok := ur.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserRole is not a transactional entity")
	}
	ur.config.driver = tx.drv
	return ur
}

// String implements the fmt.Stringer.
func (ur *UserRole) String() string {
	var builder strings.Builder
	builder.WriteString("UserRole(")
	builder.WriteString(fmt.Sprintf("id=%v", ur.ID))
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", ur.UserID))
	builder.WriteString(", role_id=")
	builder.WriteString(fmt.Sprintf("%v", ur.RoleID))
	builder.WriteByte(')')
	return builder.String()
}

// UserRoles is a parsable slice of UserRole.
type UserRoles []*UserRole

func (ur UserRoles) config(cfg config) {
	for _i := range ur {
		ur[_i].config = cfg
	}
}
