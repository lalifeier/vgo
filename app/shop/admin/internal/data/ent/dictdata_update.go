// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/dictdata"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/predicate"
)

// DictDataUpdate is the builder for updating DictData entities.
type DictDataUpdate struct {
	config
	hooks    []Hook
	mutation *DictDataMutation
}

// Where appends a list predicates to the DictDataUpdate builder.
func (ddu *DictDataUpdate) Where(ps ...predicate.DictData) *DictDataUpdate {
	ddu.mutation.Where(ps...)
	return ddu
}

// SetCreatedAt sets the "created_at" field.
func (ddu *DictDataUpdate) SetCreatedAt(t time.Time) *DictDataUpdate {
	ddu.mutation.SetCreatedAt(t)
	return ddu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableCreatedAt(t *time.Time) *DictDataUpdate {
	if t != nil {
		ddu.SetCreatedAt(*t)
	}
	return ddu
}

// SetCreatedBy sets the "created_by" field.
func (ddu *DictDataUpdate) SetCreatedBy(i int64) *DictDataUpdate {
	ddu.mutation.ResetCreatedBy()
	ddu.mutation.SetCreatedBy(i)
	return ddu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableCreatedBy(i *int64) *DictDataUpdate {
	if i != nil {
		ddu.SetCreatedBy(*i)
	}
	return ddu
}

// AddCreatedBy adds i to the "created_by" field.
func (ddu *DictDataUpdate) AddCreatedBy(i int64) *DictDataUpdate {
	ddu.mutation.AddCreatedBy(i)
	return ddu
}

// SetUpdatedAt sets the "updated_at" field.
func (ddu *DictDataUpdate) SetUpdatedAt(t time.Time) *DictDataUpdate {
	ddu.mutation.SetUpdatedAt(t)
	return ddu
}

// SetUpdatedBy sets the "updated_by" field.
func (ddu *DictDataUpdate) SetUpdatedBy(i int64) *DictDataUpdate {
	ddu.mutation.ResetUpdatedBy()
	ddu.mutation.SetUpdatedBy(i)
	return ddu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableUpdatedBy(i *int64) *DictDataUpdate {
	if i != nil {
		ddu.SetUpdatedBy(*i)
	}
	return ddu
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ddu *DictDataUpdate) AddUpdatedBy(i int64) *DictDataUpdate {
	ddu.mutation.AddUpdatedBy(i)
	return ddu
}

// SetDictTypeID sets the "dict_type_id" field.
func (ddu *DictDataUpdate) SetDictTypeID(i int64) *DictDataUpdate {
	ddu.mutation.ResetDictTypeID()
	ddu.mutation.SetDictTypeID(i)
	return ddu
}

// SetNillableDictTypeID sets the "dict_type_id" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableDictTypeID(i *int64) *DictDataUpdate {
	if i != nil {
		ddu.SetDictTypeID(*i)
	}
	return ddu
}

// AddDictTypeID adds i to the "dict_type_id" field.
func (ddu *DictDataUpdate) AddDictTypeID(i int64) *DictDataUpdate {
	ddu.mutation.AddDictTypeID(i)
	return ddu
}

// SetLabel sets the "label" field.
func (ddu *DictDataUpdate) SetLabel(s string) *DictDataUpdate {
	ddu.mutation.SetLabel(s)
	return ddu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableLabel(s *string) *DictDataUpdate {
	if s != nil {
		ddu.SetLabel(*s)
	}
	return ddu
}

// SetValue sets the "value" field.
func (ddu *DictDataUpdate) SetValue(s string) *DictDataUpdate {
	ddu.mutation.SetValue(s)
	return ddu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableValue(s *string) *DictDataUpdate {
	if s != nil {
		ddu.SetValue(*s)
	}
	return ddu
}

// SetSort sets the "sort" field.
func (ddu *DictDataUpdate) SetSort(i int8) *DictDataUpdate {
	ddu.mutation.ResetSort()
	ddu.mutation.SetSort(i)
	return ddu
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableSort(i *int8) *DictDataUpdate {
	if i != nil {
		ddu.SetSort(*i)
	}
	return ddu
}

// AddSort adds i to the "sort" field.
func (ddu *DictDataUpdate) AddSort(i int8) *DictDataUpdate {
	ddu.mutation.AddSort(i)
	return ddu
}

// SetStatus sets the "status" field.
func (ddu *DictDataUpdate) SetStatus(i int8) *DictDataUpdate {
	ddu.mutation.ResetStatus()
	ddu.mutation.SetStatus(i)
	return ddu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableStatus(i *int8) *DictDataUpdate {
	if i != nil {
		ddu.SetStatus(*i)
	}
	return ddu
}

// AddStatus adds i to the "status" field.
func (ddu *DictDataUpdate) AddStatus(i int8) *DictDataUpdate {
	ddu.mutation.AddStatus(i)
	return ddu
}

// SetRemark sets the "remark" field.
func (ddu *DictDataUpdate) SetRemark(s string) *DictDataUpdate {
	ddu.mutation.SetRemark(s)
	return ddu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableRemark(s *string) *DictDataUpdate {
	if s != nil {
		ddu.SetRemark(*s)
	}
	return ddu
}

// SetIsDefault sets the "is_default" field.
func (ddu *DictDataUpdate) SetIsDefault(i int8) *DictDataUpdate {
	ddu.mutation.ResetIsDefault()
	ddu.mutation.SetIsDefault(i)
	return ddu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (ddu *DictDataUpdate) SetNillableIsDefault(i *int8) *DictDataUpdate {
	if i != nil {
		ddu.SetIsDefault(*i)
	}
	return ddu
}

// AddIsDefault adds i to the "is_default" field.
func (ddu *DictDataUpdate) AddIsDefault(i int8) *DictDataUpdate {
	ddu.mutation.AddIsDefault(i)
	return ddu
}

// Mutation returns the DictDataMutation object of the builder.
func (ddu *DictDataUpdate) Mutation() *DictDataMutation {
	return ddu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ddu *DictDataUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ddu.defaults(); err != nil {
		return 0, err
	}
	if len(ddu.hooks) == 0 {
		affected, err = ddu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ddu.mutation = mutation
			affected, err = ddu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ddu.hooks) - 1; i >= 0; i-- {
			if ddu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ddu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ddu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ddu *DictDataUpdate) SaveX(ctx context.Context) int {
	affected, err := ddu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ddu *DictDataUpdate) Exec(ctx context.Context) error {
	_, err := ddu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ddu *DictDataUpdate) ExecX(ctx context.Context) {
	if err := ddu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ddu *DictDataUpdate) defaults() error {
	if _, ok := ddu.mutation.UpdatedAt(); !ok {
		if dictdata.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dictdata.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dictdata.UpdateDefaultUpdatedAt()
		ddu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (ddu *DictDataUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dictdata.Table,
			Columns: dictdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: dictdata.FieldID,
			},
		},
	}
	if ps := ddu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ddu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dictdata.FieldCreatedAt,
		})
	}
	if value, ok := ddu.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldCreatedBy,
		})
	}
	if value, ok := ddu.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldCreatedBy,
		})
	}
	if value, ok := ddu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dictdata.FieldUpdatedAt,
		})
	}
	if value, ok := ddu.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldUpdatedBy,
		})
	}
	if value, ok := ddu.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldUpdatedBy,
		})
	}
	if value, ok := ddu.mutation.DictTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldDictTypeID,
		})
	}
	if value, ok := ddu.mutation.AddedDictTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldDictTypeID,
		})
	}
	if value, ok := ddu.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictdata.FieldLabel,
		})
	}
	if value, ok := ddu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictdata.FieldValue,
		})
	}
	if value, ok := ddu.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldSort,
		})
	}
	if value, ok := ddu.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldSort,
		})
	}
	if value, ok := ddu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldStatus,
		})
	}
	if value, ok := ddu.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldStatus,
		})
	}
	if value, ok := ddu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictdata.FieldRemark,
		})
	}
	if value, ok := ddu.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldIsDefault,
		})
	}
	if value, ok := ddu.mutation.AddedIsDefault(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldIsDefault,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ddu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// DictDataUpdateOne is the builder for updating a single DictData entity.
type DictDataUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DictDataMutation
}

// SetCreatedAt sets the "created_at" field.
func (dduo *DictDataUpdateOne) SetCreatedAt(t time.Time) *DictDataUpdateOne {
	dduo.mutation.SetCreatedAt(t)
	return dduo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableCreatedAt(t *time.Time) *DictDataUpdateOne {
	if t != nil {
		dduo.SetCreatedAt(*t)
	}
	return dduo
}

// SetCreatedBy sets the "created_by" field.
func (dduo *DictDataUpdateOne) SetCreatedBy(i int64) *DictDataUpdateOne {
	dduo.mutation.ResetCreatedBy()
	dduo.mutation.SetCreatedBy(i)
	return dduo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableCreatedBy(i *int64) *DictDataUpdateOne {
	if i != nil {
		dduo.SetCreatedBy(*i)
	}
	return dduo
}

// AddCreatedBy adds i to the "created_by" field.
func (dduo *DictDataUpdateOne) AddCreatedBy(i int64) *DictDataUpdateOne {
	dduo.mutation.AddCreatedBy(i)
	return dduo
}

// SetUpdatedAt sets the "updated_at" field.
func (dduo *DictDataUpdateOne) SetUpdatedAt(t time.Time) *DictDataUpdateOne {
	dduo.mutation.SetUpdatedAt(t)
	return dduo
}

// SetUpdatedBy sets the "updated_by" field.
func (dduo *DictDataUpdateOne) SetUpdatedBy(i int64) *DictDataUpdateOne {
	dduo.mutation.ResetUpdatedBy()
	dduo.mutation.SetUpdatedBy(i)
	return dduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableUpdatedBy(i *int64) *DictDataUpdateOne {
	if i != nil {
		dduo.SetUpdatedBy(*i)
	}
	return dduo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (dduo *DictDataUpdateOne) AddUpdatedBy(i int64) *DictDataUpdateOne {
	dduo.mutation.AddUpdatedBy(i)
	return dduo
}

// SetDictTypeID sets the "dict_type_id" field.
func (dduo *DictDataUpdateOne) SetDictTypeID(i int64) *DictDataUpdateOne {
	dduo.mutation.ResetDictTypeID()
	dduo.mutation.SetDictTypeID(i)
	return dduo
}

// SetNillableDictTypeID sets the "dict_type_id" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableDictTypeID(i *int64) *DictDataUpdateOne {
	if i != nil {
		dduo.SetDictTypeID(*i)
	}
	return dduo
}

// AddDictTypeID adds i to the "dict_type_id" field.
func (dduo *DictDataUpdateOne) AddDictTypeID(i int64) *DictDataUpdateOne {
	dduo.mutation.AddDictTypeID(i)
	return dduo
}

// SetLabel sets the "label" field.
func (dduo *DictDataUpdateOne) SetLabel(s string) *DictDataUpdateOne {
	dduo.mutation.SetLabel(s)
	return dduo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableLabel(s *string) *DictDataUpdateOne {
	if s != nil {
		dduo.SetLabel(*s)
	}
	return dduo
}

// SetValue sets the "value" field.
func (dduo *DictDataUpdateOne) SetValue(s string) *DictDataUpdateOne {
	dduo.mutation.SetValue(s)
	return dduo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableValue(s *string) *DictDataUpdateOne {
	if s != nil {
		dduo.SetValue(*s)
	}
	return dduo
}

// SetSort sets the "sort" field.
func (dduo *DictDataUpdateOne) SetSort(i int8) *DictDataUpdateOne {
	dduo.mutation.ResetSort()
	dduo.mutation.SetSort(i)
	return dduo
}

// SetNillableSort sets the "sort" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableSort(i *int8) *DictDataUpdateOne {
	if i != nil {
		dduo.SetSort(*i)
	}
	return dduo
}

// AddSort adds i to the "sort" field.
func (dduo *DictDataUpdateOne) AddSort(i int8) *DictDataUpdateOne {
	dduo.mutation.AddSort(i)
	return dduo
}

// SetStatus sets the "status" field.
func (dduo *DictDataUpdateOne) SetStatus(i int8) *DictDataUpdateOne {
	dduo.mutation.ResetStatus()
	dduo.mutation.SetStatus(i)
	return dduo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableStatus(i *int8) *DictDataUpdateOne {
	if i != nil {
		dduo.SetStatus(*i)
	}
	return dduo
}

// AddStatus adds i to the "status" field.
func (dduo *DictDataUpdateOne) AddStatus(i int8) *DictDataUpdateOne {
	dduo.mutation.AddStatus(i)
	return dduo
}

// SetRemark sets the "remark" field.
func (dduo *DictDataUpdateOne) SetRemark(s string) *DictDataUpdateOne {
	dduo.mutation.SetRemark(s)
	return dduo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableRemark(s *string) *DictDataUpdateOne {
	if s != nil {
		dduo.SetRemark(*s)
	}
	return dduo
}

// SetIsDefault sets the "is_default" field.
func (dduo *DictDataUpdateOne) SetIsDefault(i int8) *DictDataUpdateOne {
	dduo.mutation.ResetIsDefault()
	dduo.mutation.SetIsDefault(i)
	return dduo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (dduo *DictDataUpdateOne) SetNillableIsDefault(i *int8) *DictDataUpdateOne {
	if i != nil {
		dduo.SetIsDefault(*i)
	}
	return dduo
}

// AddIsDefault adds i to the "is_default" field.
func (dduo *DictDataUpdateOne) AddIsDefault(i int8) *DictDataUpdateOne {
	dduo.mutation.AddIsDefault(i)
	return dduo
}

// Mutation returns the DictDataMutation object of the builder.
func (dduo *DictDataUpdateOne) Mutation() *DictDataMutation {
	return dduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dduo *DictDataUpdateOne) Select(field string, fields ...string) *DictDataUpdateOne {
	dduo.fields = append([]string{field}, fields...)
	return dduo
}

// Save executes the query and returns the updated DictData entity.
func (dduo *DictDataUpdateOne) Save(ctx context.Context) (*DictData, error) {
	var (
		err  error
		node *DictData
	)
	if err := dduo.defaults(); err != nil {
		return nil, err
	}
	if len(dduo.hooks) == 0 {
		node, err = dduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictDataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dduo.mutation = mutation
			node, err = dduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dduo.hooks) - 1; i >= 0; i-- {
			if dduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dduo *DictDataUpdateOne) SaveX(ctx context.Context) *DictData {
	node, err := dduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dduo *DictDataUpdateOne) Exec(ctx context.Context) error {
	_, err := dduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dduo *DictDataUpdateOne) ExecX(ctx context.Context) {
	if err := dduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dduo *DictDataUpdateOne) defaults() error {
	if _, ok := dduo.mutation.UpdatedAt(); !ok {
		if dictdata.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dictdata.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dictdata.UpdateDefaultUpdatedAt()
		dduo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (dduo *DictDataUpdateOne) sqlSave(ctx context.Context) (_node *DictData, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dictdata.Table,
			Columns: dictdata.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: dictdata.FieldID,
			},
		},
	}
	id, ok := dduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DictData.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, dictdata.FieldID)
		for _, f := range fields {
			if !dictdata.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != dictdata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dduo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dictdata.FieldCreatedAt,
		})
	}
	if value, ok := dduo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldCreatedBy,
		})
	}
	if value, ok := dduo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldCreatedBy,
		})
	}
	if value, ok := dduo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dictdata.FieldUpdatedAt,
		})
	}
	if value, ok := dduo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldUpdatedBy,
		})
	}
	if value, ok := dduo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldUpdatedBy,
		})
	}
	if value, ok := dduo.mutation.DictTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldDictTypeID,
		})
	}
	if value, ok := dduo.mutation.AddedDictTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dictdata.FieldDictTypeID,
		})
	}
	if value, ok := dduo.mutation.Label(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictdata.FieldLabel,
		})
	}
	if value, ok := dduo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictdata.FieldValue,
		})
	}
	if value, ok := dduo.mutation.Sort(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldSort,
		})
	}
	if value, ok := dduo.mutation.AddedSort(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldSort,
		})
	}
	if value, ok := dduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldStatus,
		})
	}
	if value, ok := dduo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldStatus,
		})
	}
	if value, ok := dduo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dictdata.FieldRemark,
		})
	}
	if value, ok := dduo.mutation.IsDefault(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldIsDefault,
		})
	}
	if value, ok := dduo.mutation.AddedIsDefault(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dictdata.FieldIsDefault,
		})
	}
	_node = &DictData{config: dduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dictdata.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
