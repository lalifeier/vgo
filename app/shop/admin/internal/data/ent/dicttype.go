// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/dicttype"
)

// DictType is the model entity for the DictType schema.
type DictType struct {
	config `json:"-"`
	// ID of the ent.
	// 字典类型id
	ID int64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// 创建时间
	CreatedAt time.Time `json:"created_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	// 更新人
	CreatedBy int64 `json:"created_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// 更新时间
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	// 更新人
	UpdatedBy int64 `json:"updated_by,omitempty"`
	// Name holds the value of the "name" field.
	// 字典名称
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	// 字典类型
	Type string `json:"type,omitempty"`
	// Status holds the value of the "status" field.
	// 状态 0:禁用 1:启用
	Status int8 `json:"status,omitempty"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DictType) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dicttype.FieldID, dicttype.FieldCreatedBy, dicttype.FieldUpdatedBy, dicttype.FieldStatus:
			values[i] = new(sql.NullInt64)
		case dicttype.FieldName, dicttype.FieldType, dicttype.FieldRemark:
			values[i] = new(sql.NullString)
		case dicttype.FieldCreatedAt, dicttype.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DictType", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DictType fields.
func (dt *DictType) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dicttype.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dt.ID = int64(value.Int64)
		case dicttype.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				dt.CreatedAt = value.Time
			}
		case dicttype.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				dt.CreatedBy = value.Int64
			}
		case dicttype.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				dt.UpdatedAt = value.Time
			}
		case dicttype.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				dt.UpdatedBy = value.Int64
			}
		case dicttype.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				dt.Name = value.String
			}
		case dicttype.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				dt.Type = value.String
			}
		case dicttype.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				dt.Status = int8(value.Int64)
			}
		case dicttype.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				dt.Remark = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this DictType.
// Note that you need to call DictType.Unwrap() before calling this method if this DictType
// was returned from a transaction, and the transaction was committed or rolled back.
func (dt *DictType) Update() *DictTypeUpdateOne {
	return (&DictTypeClient{config: dt.config}).UpdateOne(dt)
}

// Unwrap unwraps the DictType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dt *DictType) Unwrap() *DictType {
	tx, ok := dt.config.driver.(*txDriver)
	if !ok {
		panic("ent: DictType is not a transactional entity")
	}
	dt.config.driver = tx.drv
	return dt
}

// String implements the fmt.Stringer.
func (dt *DictType) String() string {
	var builder strings.Builder
	builder.WriteString("DictType(")
	builder.WriteString(fmt.Sprintf("id=%v", dt.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(dt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", created_by=")
	builder.WriteString(fmt.Sprintf("%v", dt.CreatedBy))
	builder.WriteString(", updated_at=")
	builder.WriteString(dt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_by=")
	builder.WriteString(fmt.Sprintf("%v", dt.UpdatedBy))
	builder.WriteString(", name=")
	builder.WriteString(dt.Name)
	builder.WriteString(", type=")
	builder.WriteString(dt.Type)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", dt.Status))
	builder.WriteString(", remark=")
	builder.WriteString(dt.Remark)
	builder.WriteByte(')')
	return builder.String()
}

// DictTypes is a parsable slice of DictType.
type DictTypes []*DictType

func (dt DictTypes) config(cfg config) {
	for _i := range dt {
		dt[_i].config = cfg
	}
}
