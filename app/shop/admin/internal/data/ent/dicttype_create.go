// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lalifeier/vvgo-mall/app/shop/admin/internal/data/ent/dicttype"
)

// DictTypeCreate is the builder for creating a DictType entity.
type DictTypeCreate struct {
	config
	mutation *DictTypeMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dtc *DictTypeCreate) SetCreatedAt(t time.Time) *DictTypeCreate {
	dtc.mutation.SetCreatedAt(t)
	return dtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableCreatedAt(t *time.Time) *DictTypeCreate {
	if t != nil {
		dtc.SetCreatedAt(*t)
	}
	return dtc
}

// SetCreatedBy sets the "created_by" field.
func (dtc *DictTypeCreate) SetCreatedBy(i int64) *DictTypeCreate {
	dtc.mutation.SetCreatedBy(i)
	return dtc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableCreatedBy(i *int64) *DictTypeCreate {
	if i != nil {
		dtc.SetCreatedBy(*i)
	}
	return dtc
}

// SetUpdatedAt sets the "updated_at" field.
func (dtc *DictTypeCreate) SetUpdatedAt(t time.Time) *DictTypeCreate {
	dtc.mutation.SetUpdatedAt(t)
	return dtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableUpdatedAt(t *time.Time) *DictTypeCreate {
	if t != nil {
		dtc.SetUpdatedAt(*t)
	}
	return dtc
}

// SetUpdatedBy sets the "updated_by" field.
func (dtc *DictTypeCreate) SetUpdatedBy(i int64) *DictTypeCreate {
	dtc.mutation.SetUpdatedBy(i)
	return dtc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableUpdatedBy(i *int64) *DictTypeCreate {
	if i != nil {
		dtc.SetUpdatedBy(*i)
	}
	return dtc
}

// SetName sets the "name" field.
func (dtc *DictTypeCreate) SetName(s string) *DictTypeCreate {
	dtc.mutation.SetName(s)
	return dtc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableName(s *string) *DictTypeCreate {
	if s != nil {
		dtc.SetName(*s)
	}
	return dtc
}

// SetType sets the "type" field.
func (dtc *DictTypeCreate) SetType(s string) *DictTypeCreate {
	dtc.mutation.SetType(s)
	return dtc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableType(s *string) *DictTypeCreate {
	if s != nil {
		dtc.SetType(*s)
	}
	return dtc
}

// SetStatus sets the "status" field.
func (dtc *DictTypeCreate) SetStatus(i int8) *DictTypeCreate {
	dtc.mutation.SetStatus(i)
	return dtc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableStatus(i *int8) *DictTypeCreate {
	if i != nil {
		dtc.SetStatus(*i)
	}
	return dtc
}

// SetRemark sets the "remark" field.
func (dtc *DictTypeCreate) SetRemark(s string) *DictTypeCreate {
	dtc.mutation.SetRemark(s)
	return dtc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (dtc *DictTypeCreate) SetNillableRemark(s *string) *DictTypeCreate {
	if s != nil {
		dtc.SetRemark(*s)
	}
	return dtc
}

// SetID sets the "id" field.
func (dtc *DictTypeCreate) SetID(i int64) *DictTypeCreate {
	dtc.mutation.SetID(i)
	return dtc
}

// Mutation returns the DictTypeMutation object of the builder.
func (dtc *DictTypeCreate) Mutation() *DictTypeMutation {
	return dtc.mutation
}

// Save creates the DictType in the database.
func (dtc *DictTypeCreate) Save(ctx context.Context) (*DictType, error) {
	var (
		err  error
		node *DictType
	)
	if err := dtc.defaults(); err != nil {
		return nil, err
	}
	if len(dtc.hooks) == 0 {
		if err = dtc.check(); err != nil {
			return nil, err
		}
		node, err = dtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DictTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dtc.check(); err != nil {
				return nil, err
			}
			dtc.mutation = mutation
			if node, err = dtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(dtc.hooks) - 1; i >= 0; i-- {
			if dtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dtc *DictTypeCreate) SaveX(ctx context.Context) *DictType {
	v, err := dtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtc *DictTypeCreate) Exec(ctx context.Context) error {
	_, err := dtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtc *DictTypeCreate) ExecX(ctx context.Context) {
	if err := dtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dtc *DictTypeCreate) defaults() error {
	if _, ok := dtc.mutation.CreatedAt(); !ok {
		if dicttype.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized dicttype.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := dicttype.DefaultCreatedAt()
		dtc.mutation.SetCreatedAt(v)
	}
	if _, ok := dtc.mutation.CreatedBy(); !ok {
		v := dicttype.DefaultCreatedBy
		dtc.mutation.SetCreatedBy(v)
	}
	if _, ok := dtc.mutation.UpdatedAt(); !ok {
		if dicttype.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized dicttype.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := dicttype.DefaultUpdatedAt()
		dtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dtc.mutation.UpdatedBy(); !ok {
		v := dicttype.DefaultUpdatedBy
		dtc.mutation.SetUpdatedBy(v)
	}
	if _, ok := dtc.mutation.Name(); !ok {
		v := dicttype.DefaultName
		dtc.mutation.SetName(v)
	}
	if _, ok := dtc.mutation.GetType(); !ok {
		v := dicttype.DefaultType
		dtc.mutation.SetType(v)
	}
	if _, ok := dtc.mutation.Status(); !ok {
		v := dicttype.DefaultStatus
		dtc.mutation.SetStatus(v)
	}
	if _, ok := dtc.mutation.Remark(); !ok {
		v := dicttype.DefaultRemark
		dtc.mutation.SetRemark(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dtc *DictTypeCreate) check() error {
	if _, ok := dtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "DictType.created_at"`)}
	}
	if _, ok := dtc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "DictType.created_by"`)}
	}
	if _, ok := dtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "DictType.updated_at"`)}
	}
	if _, ok := dtc.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "DictType.updated_by"`)}
	}
	if _, ok := dtc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "DictType.name"`)}
	}
	if _, ok := dtc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "DictType.type"`)}
	}
	if _, ok := dtc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "DictType.status"`)}
	}
	if _, ok := dtc.mutation.Remark(); !ok {
		return &ValidationError{Name: "remark", err: errors.New(`ent: missing required field "DictType.remark"`)}
	}
	return nil
}

func (dtc *DictTypeCreate) sqlSave(ctx context.Context) (*DictType, error) {
	_node, _spec := dtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (dtc *DictTypeCreate) createSpec() (*DictType, *sqlgraph.CreateSpec) {
	var (
		_node = &DictType{config: dtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dicttype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: dicttype.FieldID,
			},
		}
	)
	if id, ok := dtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dtc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dicttype.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := dtc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := dtc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: dicttype.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := dtc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: dicttype.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := dtc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldName,
		})
		_node.Name = value
	}
	if value, ok := dtc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldType,
		})
		_node.Type = value
	}
	if value, ok := dtc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: dicttype.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := dtc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dicttype.FieldRemark,
		})
		_node.Remark = value
	}
	return _node, _spec
}

// DictTypeCreateBulk is the builder for creating many DictType entities in bulk.
type DictTypeCreateBulk struct {
	config
	builders []*DictTypeCreate
}

// Save creates the DictType entities in the database.
func (dtcb *DictTypeCreateBulk) Save(ctx context.Context) ([]*DictType, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dtcb.builders))
	nodes := make([]*DictType, len(dtcb.builders))
	mutators := make([]Mutator, len(dtcb.builders))
	for i := range dtcb.builders {
		func(i int, root context.Context) {
			builder := dtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DictTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dtcb *DictTypeCreateBulk) SaveX(ctx context.Context) []*DictType {
	v, err := dtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtcb *DictTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := dtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtcb *DictTypeCreateBulk) ExecX(ctx context.Context) {
	if err := dtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
